================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-17T02:17:53.368Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    node.js.yml
controllers/
  sceneController.js
data/
  characters.json
  parts.json
  scenes.json
  sounds.json
public/
  css/
    style.css
routes/
  characterRoutes.js
  motorRoutes.js
  partRoutes.js
  sceneRoutes.js
  soundRoutes.js
services/
  sceneService.js
test/
  sceneService.test.js
views/
  partials/
    character-selection.ejs
    step-form.ejs
    step-list.ejs
  character-form.ejs
  characters.ejs
  index.ejs
  motor-index.ejs
  part-form.ejs
  parts.ejs
  scene-form.ejs
  scenes.ejs
  sound-form.ejs
  sounds.ejs
.gitignore
app.js
dataManager.js
motor_control.py
motor_settings.json
package.json
README.md
server.js

================================================================
Repository Files
================================================================

================
File: .github/workflows/node.js.yml
================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

================
File: controllers/sceneController.js
================
const {
    getAllScenes,
    getScene,
    saveScene,
    removeScene,
    addStepToScene,
    updateStepInScene,
    removeStepFromScene,
    getAllCharacters,
    getAllParts,
    getAllSounds
} = require('../services/sceneService');

exports.getScenes = async (req, res) => {
    try {
        const scenes = await getAllScenes();
        const characters = await getAllCharacters();
        res.render('scenes', { 
            title: 'Scenes',
            scenes,
            characters
        });
    } catch (error) {
        console.error('Error fetching scenes:', error);
        res.status(500).send('Something broke!');
    }
};

exports.getSceneById = async (req, res) => {
    try {
        const scene = await getScene(req.params.id);
        const characters = await getAllCharacters();
        const parts = await getAllParts();
        const sounds = await getAllSounds();
        if (scene) {
            res.render('scene-form', { 
                title: 'Edit Scene',
                scene, 
                action: `/scenes/${scene.id}`, 
                characters, 
                parts, 
                sounds 
            });
        } else {
            res.status(404).send('Scene not found');
        }
    } catch (error) {
        console.error('Error fetching scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.newScene = async (req, res) => {
    try {
        const characters = await getAllCharacters();
        const parts = await getAllParts();
        const sounds = await getAllSounds();
        res.render('scene-form', { 
            title: 'New Scene',
            scene: {},
            action: '/scenes',
            characters, 
            parts, 
            sounds 
        });
    } catch (error) {
        console.error('Error rendering new scene form:', error);
        res.status(500).send('Something broke!');
    }
};

exports.createScene = async (req, res) => {
    try {
        const scene = await saveScene(req.body);
        res.redirect('/scenes');
    } catch (error) {
        console.error('Error creating scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.updateScene = async (req, res) => {
    try {
        const scene = await saveScene(req.body, req.params.id);
        res.redirect('/scenes');
    } catch (error) {
        console.error('Error updating scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.deleteScene = async (req, res) => {
    try {
        await removeScene(req.params.id);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error deleting scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.addStep = async (req, res) => {
    try {
        const scene = await addStepToScene(req.params.id, req.body);
        res.json(scene);
    } catch (error) {
        console.error('Error adding step:', error);
        res.status(500).send('Something broke!');
    }
};

exports.updateStep = async (req, res) => {
    try {
        const scene = await updateStepInScene(req.params.sceneId, req.params.stepIndex, req.body);
        res.json(scene);
    } catch (error) {
        console.error('Error updating step:', error);
        res.status(500).send('Something broke!');
    }
};

exports.deleteStep = async (req, res) => {
    try {
        const scene = await removeStepFromScene(req.params.sceneId, req.params.stepIndex);
        res.json(scene);
    } catch (error) {
        console.error('Error deleting step:', error);
        res.status(500).send('Something broke!');
    }
};

================
File: data/characters.json
================
[
  {
    "id": 1,
    "char_name": "Axe Dude Again",
    "char_description": "asdasdasd",
    "parts": [
      2
    ],
    "sounds": [
      2
    ],
    "image": "1723849608558.jpg"
  },
  {
    "id": 2,
    "char_name": "Cocaine Bear",
    "char_description": "scary coke bear that loves soda",
    "parts": [
      2
    ],
    "sounds": [
      5
    ],
    "image": "1723849989190.jpg"
  },
  {
    "id": 3,
    "char_name": "Baphomet",
    "char_description": "Devil of underlord",
    "parts": [
      1
    ],
    "sounds": [
      2
    ],
    "image": "1723850012183.jpg"
  }
]

================
File: data/parts.json
================
[
  {
    "id": 1,
    "name": "Right Arm",
    "type": "motor",
    "directionPin": 18,
    "pwmPin": 24
  },
  {
    "id": 2,
    "name": "Left Arm",
    "type": "motor",
    "directionPin": 20,
    "pwmPin": 22
  }
]

================
File: data/scenes.json
================
[
  {
    "id": 1,
    "scene_name": "Bear Attack",
    "character_id": "2",
    "steps": [
      {
        "name": "Roar!!!",
        "type": "sound"
      }
    ]
  }
]

================
File: data/sounds.json
================
[
  {
    "id": 2,
    "name": "TenaciousD",
    "filename": "1723842056726.mp3"
  },
  {
    "id": 3,
    "name": "Good Evening",
    "filename": "1723850079155.mp3"
  },
  {
    "id": 4,
    "name": "Igor Intro",
    "filename": "1723850096055.mp3"
  },
  {
    "id": 5,
    "name": "Snarling",
    "filename": "1723850120938.mp3"
  }
]

================
File: public/css/style.css
================
body {
    font-family: 'Courier New', Courier, monospace;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #000000;
    color: #00ff00;
}

h1, h2, h3, h4, h5, h6 {
    color: #00ff00;
    text-shadow: 0 0 5px #00ff00;
}

a {
    color: #00ffff;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
    text-shadow: 0 0 5px #00ffff;
}

.button {
    display: inline-block;
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    margin: 10px 0;
}

.button:hover {
    background-color: #004400;
    text-decoration: none;
    box-shadow: 0 0 10px #00ff00;
}

form {
    background-color: #001100;
    padding: 20px;
    border-radius: 5px;
    border: 1px solid #00ff00;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"],
input[type="number"],
textarea,
select {
    width: 100%;
    padding: 8px;
    border: 1px solid #00ff00;
    border-radius: 4px;
    background-color: #000000;
    color: #00ff00;
    box-sizing: border-box;
}

button {
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #004400;
    box-shadow: 0 0 10px #00ff00;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #001100;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

table, th, td {
    border: 1px solid #00ff00;
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #002200;
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #001800;
}

#parts-container, #sounds-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

#available-parts, #selected-parts, #available-sounds, #selected-sounds {
    width: 40%;
}

#available-parts select, #selected-parts select, #available-sounds select, #selected-sounds select {
    width: 100%;
    height: 200px;
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
}

#parts-container > div:nth-child(2), #sounds-container > div:nth-child(2) {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#parts-container button, #sounds-container button {
    margin: 5px;
}

input[type="file"] {
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 5px;
    border-radius: 4px;
}

option {
    background-color: #001100;
    color: #00ff00;
}

input:focus, textarea:focus, select:focus {
    outline: none;
    box-shadow: 0 0 5px #00ff00;
}

================
File: routes/characterRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const fs = require('fs').promises;
const path = require('path');
const multer = require('multer');

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/images/characters/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

router.get('/', async (req, res) => {
    try {
        console.log('GET /characters route hit');
        console.log('Fetching characters...');
        const characters = await dataManager.getCharacters();
        console.log(`Retrieved ${characters.length} characters`);

        console.log('Fetching parts...');
        const parts = await dataManager.getParts();
        console.log(`Retrieved ${parts.length} parts`);

        console.log('Fetching sounds...');
        const sounds = await dataManager.getSounds();
        console.log(`Retrieved ${sounds.length} sounds`);

        console.log('Preparing to render characters page...');
        console.log('Characters:', JSON.stringify(characters));
        console.log('Parts:', JSON.stringify(parts));
        console.log('Sounds:', JSON.stringify(sounds));

        res.render('characters', { title: 'Characters', characters, parts, sounds }, (err, html) => {
            if (err) {
                console.error('Error rendering characters template:', err);
                res.status(500).send('An error occurred while rendering the characters page: ' + err.message);
            } else {
                console.log('Characters page rendered successfully');
                res.send(html);
            }
        });
    } catch (error) {
        console.error('Error in GET /characters route:', error);
        res.status(500).send('An error occurred while loading the characters page: ' + error.message);
    }
});


router.get('/new', async (req, res) => {
    try {
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        res.render('character-form', { title: 'Add New Character', action: '/characters', character: {}, parts, sounds });
    } catch (error) {
        console.error('Error in GET /characters/new route:', error);
        res.status(500).send('An error occurred while loading the new character form: ' + error.message);
    }
});

router.get('/:id/edit', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        const character = characters.find(c => c.id === parseInt(req.params.id));
        if (character) {
            res.render('character-form', { title: 'Edit Character', action: '/characters/' + character.id, character, parts, sounds });
        } else {
            res.status(404).send('Character not found');
        }
    } catch (error) {
        console.error('Error in GET /characters/:id/edit route:', error);
        res.status(500).send('An error occurred while loading the edit character form: ' + error.message);
    }
});

router.post('/', upload.single('character_image'), async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const newCharacter = {
            id: dataManager.getNextId(characters),
            char_name: req.body.char_name,
            char_description: req.body.char_description,
            parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : req.body.parts ? [Number(req.body.parts)] : [],
            sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : req.body.sounds ? [Number(req.body.sounds)] : [],
            image: req.file ? req.file.filename : null
        };
        characters.push(newCharacter);
        await dataManager.saveCharacters(characters);
        res.redirect('/characters');
    } catch (error) {
        console.error('Error in POST /characters route:', error);
        res.status(500).send('An error occurred while creating the character: ' + error.message);
    }
});

router.post('/:id', upload.single('character_image'), async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const characters = await dataManager.getCharacters();
        const index = characters.findIndex(c => c.id === id);
        if (index !== -1) {
            const oldImage = characters[index].image;
            characters[index] = {
                id: id,
                char_name: req.body.char_name,
                char_description: req.body.char_description,
                parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : req.body.parts ? [Number(req.body.parts)] : [],
                sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : req.body.sounds ? [Number(req.body.sounds)] : [],
                image: req.file ? req.file.filename : oldImage
            };
            if (req.file && oldImage) {
                try {
                    await fs.unlink(path.join('public', 'images', 'characters', oldImage));
                } catch (error) {
                    console.error('Error deleting old image:', error);
                }
            }
            await dataManager.saveCharacters(characters);
            res.redirect('/characters');
        } else {
            res.status(404).send('Character not found');
        }
    } catch (error) {
        console.error('Error in POST /characters/:id route:', error);
        res.status(500).send('An error occurred while updating the character: ' + error.message);
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        console.log('DELETE /characters/:id route hit. ID:', req.params.id);
        const id = parseInt(req.params.id);
        const characters = await dataManager.getCharacters();
        const index = characters.findIndex(c => c.id === id);
        if (index !== -1) {
            const character = characters[index];
            if (character.image) {
                try {
                    await fs.unlink(path.join('public', 'images', 'characters', character.image));
                } catch (error) {
                    console.error('Error deleting character image:', error);
                }
            }
            characters.splice(index, 1);
            await dataManager.saveCharacters(characters);
            res.sendStatus(200);
        } else {
            res.status(404).send('Character not found');
        }
    } catch (error) {
        console.error('Error in POST /characters/:id/delete route:', error);
        res.status(500).send('An error occurred while deleting the character: ' + error.message);
    }
});

module.exports = router;

================
File: routes/motorRoutes.js
================
const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

const settingsFile = path.join(__dirname, '..', 'motor_settings.json');

async function getSettings() {
    try {
        const data = await fs.readFile(settingsFile, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            const defaultSettings = { dirPin: 18, pwmPin: 24 };
            await saveSettings(defaultSettings);
            return defaultSettings;
        }
        throw error;
    }
}

async function saveSettings(settings) {
    await fs.writeFile(settingsFile, JSON.stringify(settings, null, 2));
}

function controlMotor(direction, speed, duration, dirPin, pwmPin) {
    return new Promise((resolve, reject) => {
        const pythonScript = path.join(__dirname, '..', 'motor_control.py');
        const command = `sudo python3 ${pythonScript} ${direction} ${speed} ${duration} ${dirPin} ${pwmPin}`;

        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error: ${error.message}`);
                return reject(error);
            }
            if (stderr) {
                console.error(`stderr: ${stderr}`);
                return reject(new Error(stderr));
            }
            console.log(`stdout: ${stdout}`);
            resolve();
        });
    });
}

router.get('/', async (req, res) => {
    const settings = await getSettings();
    res.render('motor-index', { title: 'Motor Control Panel', settings });
});

router.post('/save-settings', async (req, res) => {
    const { dirPin, pwmPin } = req.body;
    await saveSettings({ dirPin: parseInt(dirPin), pwmPin: parseInt(pwmPin) });
    res.redirect('/motor');
});

router.post('/control-motor', async (req, res) => {
    const { direction, speed, duration, directionPin, pwmPin } = req.body;
    try {
        await controlMotor(direction, parseInt(speed), parseInt(duration), parseInt(directionPin), parseInt(pwmPin));
        res.sendStatus(200);
    } catch (error) {
        res.status(500).send(`Error controlling motor: ${error.message}`);
    }
});

module.exports = router;

================
File: routes/partRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { exec } = require('child_process');
const path = require('path');

router.get('/', async (req, res) => {
    const parts = await dataManager.getParts();
    res.render('parts', { title: 'Parts', parts });
});

router.get('/new', (req, res) => {
    res.render('part-form', { title: 'Add New Part', action: '/parts', part: {} });
});

router.get('/:id/edit', async (req, res) => {
    const parts = await dataManager.getParts();
    const part = parts.find(p => p.id === parseInt(req.params.id));
    if (part) {
        res.render('part-form', { title: 'Edit Part', action: '/parts/' + part.id, part });
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/', async (req, res) => {
    const parts = await dataManager.getParts();
    const newPart = {
        id: dataManager.getNextId(parts),
        name: req.body.name,
        type: req.body.type
    };

    if (req.body.type === 'motor') {
        newPart.directionPin = parseInt(req.body.directionPin);
        newPart.pwmPin = parseInt(req.body.pwmPin);
    } else {
        newPart.pin = parseInt(req.body.pin);
    }

    parts.push(newPart);
    await dataManager.saveParts(parts);
    res.redirect('/parts');
});

router.post('/:id', async (req, res) => {
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts[index] = {
            id: id,
            name: req.body.name,
            type: req.body.type
        };

        if (req.body.type === 'motor') {
            parts[index].directionPin = parseInt(req.body.directionPin);
            parts[index].pwmPin = parseInt(req.body.pwmPin);
        } else {
            parts[index].pin = parseInt(req.body.pin);
        }

        await dataManager.saveParts(parts);
        res.redirect('/parts');
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/:id/delete', async (req, res) => {
    console.log('DELETE /parts/:id route hit. ID:', req.params.id);
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts.splice(index, 1);
        await dataManager.saveParts(parts);
        res.sendStatus(200);
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/test-motor', (req, res) => {
    console.log('Test motor route hit');
    console.log('Request body:', req.body);
    
    const { direction, speed, duration, directionPin, pwmPin } = req.body;
    const pythonScript = path.join(__dirname, '..', 'motor_control.py');
    const command = `sudo python3 ${pythonScript} ${direction} ${speed} ${duration} ${directionPin} ${pwmPin}`;
    
    console.log('Command to be executed:', command);

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Exec error: ${error.message}`);
            return res.status(500).send(`Error executing command: ${error.message}`);
        }
        if (stderr) {
            console.error(`stderr: ${stderr}`);
            return res.status(500).send(`Error from Python script: ${stderr}`);
        }
        console.log(`stdout: ${stdout}`);
        res.status(200).send('Motor test successful');
    });
});

module.exports = router;

================
File: routes/sceneRoutes.js
================
const express = require('express');
const router = express.Router();
const {
    getScenes,
    getSceneById,
    createScene,
    updateScene,
    deleteScene,
    newScene,
    addStep,
    updateStep,
    deleteStep
} = require('../controllers/sceneController');

router.get('/', getScenes);
router.get('/new', newScene);
router.get('/:id/edit', getSceneById);
router.post('/', createScene);
router.post('/:id', updateScene);
router.post('/:id/delete', deleteScene);
router.post('/:id/steps', addStep);
router.put('/:sceneId/steps/:stepIndex', updateStep);
router.delete('/:sceneId/steps/:stepIndex', deleteStep);

module.exports = router;

================
File: routes/soundRoutes.js
================
const express = require('express');
const path = require('path');
const fs = require('fs').promises;
const mpg123 = require('node-mpg123');
const dataManager = require('../dataManager');
const router = express.Router();

// Multer setup for file uploads
const multer = require('multer');
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/sounds/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

let currentPlayer = null;

router.get('/', async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        res.render('sounds', { title: 'Sounds', sounds });
    } catch (error) {
        console.error('Error fetching sounds:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/new', (req, res) => {
    res.render('sound-form', { title: 'Add New Sound', action: '/sounds', sound: {} });
});

router.post('/', upload.single('sound_file'), async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        const newSound = {
            id: dataManager.getNextId(sounds),
            name: req.body.name,
            filename: req.file.filename
        };
        sounds.push(newSound);
        await dataManager.saveSounds(sounds);
        res.redirect('/sounds');
    } catch (error) {
        console.error('Error adding sound:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/play', async (req, res) => {
    try {
        const { soundId } = req.body;
        const sounds = await dataManager.getSounds();
        const sound = sounds.find(s => s.id === parseInt(soundId));

        if (sound) {
            const filePath = path.join(__dirname, '../public/sounds', sound.filename);
            
            if (currentPlayer) {
                currentPlayer.stop();
            }

            console.log('Playing sound:', filePath);

            currentPlayer = new mpg123();

            currentPlayer.play(filePath);

            currentPlayer.on('error', (error) => {
                console.error('Error playing sound:', error);
            });

            currentPlayer.on('end', () => {
                console.log('Sound finished playing');
                currentPlayer = null;
            });

            res.status(200).send('Playing sound on character');
        } else {
            res.status(404).send('Sound not found');
        }
    } catch (error) {
        console.error('Error playing sound on character:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/stop', (req, res) => {
    try {
        if (currentPlayer) {
            currentPlayer.stop();
            currentPlayer = null;
            console.log('Stopped current sound');
        }
        console.log('Stopping all sounds on character');
        res.status(200).send('Stopped all sounds');
    } catch (error) {
        console.error('Error stopping sounds on character:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/:id/delete', async (req, res) => {
    console.log('DELETE /sounds/:id route hit. ID:', req.params.id);
    try {
        const soundId = parseInt(req.params.id);
        const sounds = await dataManager.getSounds();
        const index = sounds.findIndex(s => s.id === soundId);
        if (index !== -1) {
            const [deletedSound] = sounds.splice(index, 1);
            await dataManager.saveSounds(sounds);
            
            // Attempt to delete the file, but don't fail if it doesn't exist
            try {
                await fs.unlink(path.join('public/sounds', deletedSound.filename));
            } catch (error) {
                console.error('Error deleting sound file:', error);
                // Continue even if file deletion fails
            }
            
            res.sendStatus(200);
        } else {
            res.status(404).send('Sound not found');
        }
    } catch (error) {
        console.error('Error deleting sound:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/test-sound', (req, res) => {
    const testSoundPath = path.join(__dirname, '../public/sounds/test.mp3');
    
    console.log('Playing test sound:', testSoundPath);

    const player = new mpg123();

    player.play(testSoundPath);

    player.on('error', (error) => {
        console.error('Error playing test sound:', error);
        res.status(500).send('Error playing test sound');
    });

    player.on('end', () => {
        console.log('Test sound finished playing');
        res.send('Test sound played');
    });
});

module.exports = router;

================
File: services/sceneService.js
================
const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '../data/scenes.json');
const charactersPath = path.join(__dirname, '../data/characters.json');
const partsPath = path.join(__dirname, '../data/parts.json');
const soundsPath = path.join(__dirname, '../data/sounds.json');

const readJsonFile = async (filePath) => {
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        throw error;
    }
};

const writeJsonFile = async (filePath, data) => {
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
};

const getAllScenes = async () => {
    return readJsonFile(dataPath);
};

const getAllCharacters = async () => {
    return readJsonFile(charactersPath);
};

const getAllParts = async () => {
    return readJsonFile(partsPath);
};

const getAllSounds = async () => {
    return readJsonFile(soundsPath);
};

const getScene = async (id) => {
    const scenes = await getAllScenes();
    return scenes.find(scene => scene.id === parseInt(id));
};

const saveScene = async (sceneData, id = null) => {
    let scenes = await getAllScenes();
    if (id) {
        const index = scenes.findIndex(scene => scene.id === parseInt(id));
        if (index !== -1) {
            scenes[index] = { ...scenes[index], ...sceneData, id: parseInt(id) };
        } else {
            throw new Error('Scene not found');
        }
    } else {
        const newId = Math.max(...scenes.map(s => s.id), 0) + 1;
        scenes.push({ ...sceneData, id: newId });
    }
    await writeJsonFile(dataPath, scenes);
    return id ? scenes.find(scene => scene.id === parseInt(id)) : scenes[scenes.length - 1];
};

const removeScene = async (id) => {
    let scenes = await getAllScenes();
    scenes = scenes.filter(scene => scene.id !== parseInt(id));
    await writeJsonFile(dataPath, scenes);
};

const addStepToScene = async (sceneId, stepData) => {
    const scene = await getScene(sceneId);
    if (!scene) {
        throw new Error('Scene not found');
    }
    scene.steps = scene.steps || [];
    scene.steps.push(stepData);
    return saveScene(scene, sceneId);
};

const updateStepInScene = async (sceneId, stepIndex, stepData) => {
    const scene = await getScene(sceneId);
    if (!scene || !scene.steps || stepIndex >= scene.steps.length) {
        throw new Error('Scene or step not found');
    }
    scene.steps[stepIndex] = { ...scene.steps[stepIndex], ...stepData };
    return saveScene(scene, sceneId);
};

const removeStepFromScene = async (sceneId, stepIndex) => {
    const scene = await getScene(sceneId);
    if (!scene || !scene.steps || stepIndex >= scene.steps.length) {
        throw new Error('Scene or step not found');
    }
    scene.steps.splice(stepIndex, 1);
    return saveScene(scene, sceneId);
};

module.exports = {
    getAllScenes,
    getAllCharacters,
    getAllParts,
    getAllSounds,
    getScene,
    saveScene,
    removeScene,
    addStepToScene,
    updateStepInScene,
    removeStepFromScene
};

================
File: test/sceneService.test.js
================
// test/sceneService.test.js
const { expect } = require('chai');
const {
    getAllScenes,
    getScene,
    saveScene,
    removeScene
} = require('../services/sceneService');

describe('Scene Service', () => {
    it('should return all scenes', async () => {
        const scenes = await getAllScenes();
        expect(scenes).to.be.an('array');
    });

    it('should return a specific scene by id', async () => {
        const scene = await getScene(1);
        expect(scene).to.be.an('object');
        expect(scene).to.have.property('id');
    });

    // Add more tests for create, update, and delete
});

================
File: views/partials/character-selection.ejs
================
<div>
    <label for="scene_name">Scene Name:</label>
    <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
</div>
<div>
    <label for="character_id">Character:</label>
    <select id="character_id" name="character_id" required onchange="updateCharacterParts()">
        <% characters.forEach(function(character) { %>
            <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                <%= character.char_name %>
            </option>
        <% }); %>
    </select>
</div>

================
File: views/partials/step-form.ejs
================
<div class="stepForm" data-scene-id="<%= step.scene_id %>">
    <label>Step Type:</label>
    <select name="type">
        <option value="motor" <%= step.type === 'motor' ? 'selected' : '' %>>Motor</option>
        <option value="light" <%= step.type === 'light' ? 'selected' : '' %>>Light</option>
        <option value="sound" <%= step.type === 'sound' ? 'selected' : '' %>>Sound</option>
    </select>

    <% if (step.type === 'motor') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
        <label>Direction:</label>
        <input type="text" name="direction" value="<%= step.direction %>">
        <label>Speed:</label>
        <input type="number" name="speed" value="<%= step.speed %>">
    <% } else if (step.type === 'light') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
    <% } else if (step.type === 'sound') { %>
        <label>Sound ID:</label>
        <input type="text" name="sound_id" value="<%= step.sound_id %>">
    <% } %>

    <button type="button" class="saveStepButton">Save Step</button>
</div>

================
File: views/partials/step-list.ejs
================
<div id="steps">
    <h3>Steps</h3>
    <div id="step-list" class="sortable">
        <!-- Existing steps will be loaded here -->
    </div>
    <button type="button" id="add-step-button" onclick="addStep()">Add Step</button>
</div>

<script>
    const characterParts = {};
    const characterSounds = {};

    <% characters.forEach(function(character) { %>
        characterParts[<%= character.id %>] = [
            <% character.parts.forEach(function(partId) { %>
                <% const part = parts.find(p => p.id === partId); %>
                <% if (part) { %>
                    { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                <% } %>
            <% }); %>
        ];
        characterSounds[<%= character.id %>] = [
            <% character.sounds.forEach(function(soundId) { %>
                <% const sound = sounds.find(s => s.id === soundId); %>
                <% if (sound) { %>
                    { id: <%= sound.id %>, name: "<%= sound.name %>" },
                <% } %>
            <% }); %>
        ];
    <% }); %>

    function loadExistingSteps(steps) {
        steps.forEach((step, index) => {
            addStep();
            const stepDiv = document.querySelector('.step:last-of-type');
            stepDiv.querySelector('.step-name').value = step.name || '';
            stepDiv.querySelector('.concurrent').checked = step.concurrent;
            stepDiv.querySelector('.action-type').value = step.type;
            updateActionFields(stepDiv.querySelector('.action-type'), step);

            if (step.type === 'sound') {
                stepDiv.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                stepDiv.querySelector('.part-id').value = step.part_id;
                stepDiv.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    stepDiv.querySelector('.direction').value = step.direction;
                    stepDiv.querySelector('.speed').value = step.speed;
                }
            }
        });
    }

    function addStep() {
        const stepList = document.getElementById('step-list');
        const currentStepCount = stepList.children.length;
        const stepDiv = document.createElement('div');
        stepDiv.className = 'step';
        stepDiv.innerHTML = `
            <h4>Step ${currentStepCount + 1}</h4>
            <input type="text" class="step-name" placeholder="Step Name" onchange="updateStepsJson()">
            <label>
                Concurrent:
                <input type="checkbox" class="concurrent" onchange="updateStepsJson()">
            </label>
            <select class="action-type" onchange="updateActionFields(this)">
                <option value="">Select Action</option>
                <option value="sound">Play Sound</option>
                <option value="motor">Move Motor</option>
                <option value="servo">Move Servo</option>
                <option value="light">Control Light</option>
            </select>
            <div class="action-fields"></div>
            <button type="button" onclick="removeStep(this)">Remove Step</button>
        `;
        stepList.appendChild(stepDiv);
        updateStepNumbers();
        updateStepsJson();
    }

    function removeStep(button) {
        button.closest('.step').remove();
        updateStepNumbers();
        updateStepsJson();
    }

    function updateStepNumbers() {
        const steps = document.querySelectorAll('.step');
        steps.forEach((step, index) => {
            const stepHeader = step.querySelector('h4');
            if (stepHeader) {
                stepHeader.textContent = `Step ${index + 1}`;
            }
        });
    }

    function updateActionFields(select, step = null) {
        const actionFields = select.nextElementSibling;
        const characterId = document.getElementById('character_id').value;
        const actionType = select.value;

        actionFields.innerHTML = '';

        if (actionType === 'sound') {
            const sounds = characterSounds[characterId];
            actionFields.innerHTML += `
                <select class="sound-id" onchange="updateStepsJson()">
                    ${sounds.map(sound => `<option value="${sound.id}">${sound.name}</option>`).join('')}
                </select>
            `;
        } else if (actionType === 'motor') {
            const parts = characterParts[characterId].filter(part => part.type === actionType);
            actionFields.innerHTML += `
                <select class="part-id" onchange="updateStepsJson()">
                    ${parts.map(part => `<option value="${part.id}">${part.name}</option>`).join('')}
                </select>
                <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                <select class="direction" onchange="updateStepsJson()">
                    <option value="F">Forward</option>
                    <option value="R">Reverse</option>
                </select>
                <input type="number" class="speed" placeholder="Speed (0-100)" min="0" max="100" onchange="updateStepsJson()">
                <button type="button" class="test-motor-button" onclick="testMotor(this)">Test Motor</button>
            `;
        }

        if (step) {
            if (step.type === 'sound') {
                actionFields.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                actionFields.querySelector('.part-id').value = step.part_id;
                actionFields.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    actionFields.querySelector('.direction').value = step.direction;
                    actionFields.querySelector('.speed').value = step.speed;
                }
            }
        }

        updateStepsJson();
    }

    function updateStepsJson() {
        const steps = [];
        document.querySelectorAll('.step').forEach((stepDiv) => {
            const step = {
                name: stepDiv.querySelector('.step-name').value,
                concurrent: stepDiv.querySelector('.concurrent').checked,
                type: stepDiv.querySelector('.action-type').value
            };

            if (step.type === 'sound') {
                step.sound_id = stepDiv.querySelector('.sound-id').value;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                step.part_id = parseInt(stepDiv.querySelector('.part-id').value);
                step.duration = parseInt(stepDiv.querySelector('.duration').value);

                if (step.type === 'motor') {
                    step.direction = stepDiv.querySelector('.direction').value;
                    step.speed = parseInt(stepDiv.querySelector('.speed').value);
                }
            }

            steps.push(step);
        });

        document.getElementById('steps_json').value = JSON.stringify(steps);
    }

    function testMotor(button) {
        const stepDiv = button.closest('.step');
        const direction = stepDiv.querySelector('.direction').value;
        const speed = stepDiv.querySelector('.speed').value;
        const duration = stepDiv.querySelector('.duration').value;
        const partId = stepDiv.querySelector('.part-id').value;

        // Replace with actual logic to retrieve pins for the selected part
        const directionPin = 18; // Example value
        const pwmPin = 24; // Example value

        axios.post('/motor/control-motor', {
            direction: direction,
            speed: parseInt(speed),
            duration: parseInt(duration),
            directionPin: directionPin,
            pwmPin: pwmPin
        })
        .then(function (response) {
            alert('Motor test successful!');
        })
        .catch(function (error) {
            alert('Error testing motor: ' + (error.response ? error.response.data : error.message));
        });
    }

    function updateCharacterParts() {
        const characterId = document.getElementById('character_id').value;
        document.querySelectorAll('.step').forEach(stepDiv => {
            const actionType = stepDiv.querySelector('.action-type').value;
            if (actionType) {
                updateActionFields(stepDiv.querySelector('.action-type'));
            }
        });
    }

    // Load existing steps if editing a scene
    const existingSteps = <%= JSON.stringify(scene.steps || []) %>;
    loadExistingSteps(existingSteps);

    updateStepsJson();

    // Make steps sortable
    $(function() {
        $("#step-list").sortable({
            update: function(event, ui) {
                updateStepNumbers();
                updateStepsJson();
            }
        });
    });

    document.getElementById('sceneForm').onsubmit = function() {
        updateStepsJson();
        return true;
    };
</script>

================
File: views/character-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (character.id) { %>
            <input type="hidden" name="id" value="<%= character.id %>">
        <% } %>
        <div>
            <label for="char_name">Name:</label>
            <input type="text" id="char_name" name="char_name" value="<%= character.char_name || '' %>" required>
        </div>
        <div>
            <label for="char_description">Description:</label>
            <textarea id="char_description" name="char_description" required><%= character.char_description || '' %></textarea>
        </div>
        <div>
            <label for="character_image">Character Image:</label>
            <input type="file" id="character_image" name="character_image" accept="image/*">
            <% if (character.image) { %>
                <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 200px;">
            <% } %>
        </div>
        <div>
            <label>Parts:</label>
            <div id="parts-container">
                <div id="available-parts">
                    <h4>Available Parts:</h4>
                    <select id="available-parts-select" multiple>
                        <% parts.forEach(function(part) { %>
                            <option value="<%= part.id %>" <%= character.parts && character.parts.includes(part.id) ? 'disabled' : '' %>>
                                <%= part.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addPart()">Add &gt;</button>
                    <button type="button" onclick="removePart()">&lt; Remove</button>
                </div>
                <div id="selected-parts">
                    <h4>Selected Parts:</h4>
                    <select id="selected-parts-select" name="parts" multiple>
                        <% if (character.parts) { %>
                            <% character.parts.forEach(function(partId) { %>
                                <% const part = parts.find(p => p.id === partId); %>
                                <% if (part) { %>
                                    <option value="<%= part.id %>"><%= part.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <div>
            <label>Sounds:</label>
            <div id="sounds-container">
                <div id="available-sounds">
                    <h4>Available Sounds:</h4>
                    <select id="available-sounds-select" multiple>
                        <% sounds.forEach(function(sound) { %>
                            <option value="<%= sound.id %>" <%= character.sounds && character.sounds.includes(sound.id) ? 'disabled' : '' %>>
                                <%= sound.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addSound()">Add &gt;</button>
                    <button type="button" onclick="removeSound()">&lt; Remove</button>
                </div>
                <div id="selected-sounds">
                    <h4>Selected Sounds:</h4>
                    <select id="selected-sounds-select" name="sounds" multiple>
                        <% if (character.sounds) { %>
                            <% character.sounds.forEach(function(soundId) { %>
                                <% const sound = sounds.find(s => s.id === soundId); %>
                                <% if (sound) { %>
                                    <option value="<%= sound.id %>"><%= sound.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit">Save Character</button>
    </form>
    <a href="/characters" class="button">Back to Characters</a>

    <script>
        function addPart() {
            moveOptions('available-parts-select', 'selected-parts-select');
        }

        function removePart() {
            moveOptions('selected-parts-select', 'available-parts-select');
        }

        function addSound() {
            moveOptions('available-sounds-select', 'selected-sounds-select');
        }

        function removeSound() {
            moveOptions('selected-sounds-select', 'available-sounds-select');
        }

        function moveOptions(fromId, toId) {
            const fromSelect = document.getElementById(fromId);
            const toSelect = document.getElementById(toId);
            
            for (let option of Array.from(fromSelect.selectedOptions)) {
                toSelect.add(option);
                option.selected = false;
            }
            updateAvailableOptions();
        }

        function updateAvailableOptions() {
            const availableParts = document.getElementById('available-parts-select');
            const selectedParts = document.getElementById('selected-parts-select');
            const availableSounds = document.getElementById('available-sounds-select');
            const selectedSounds = document.getElementById('selected-sounds-select');

            for (let option of availableParts.options) {
                option.disabled = Array.from(selectedParts.options).some(o => o.value === option.value);
            }

            for (let option of availableSounds.options) {
                option.disabled = Array.from(selectedSounds.options).some(o => o.value === option.value);
            }
        }

        // Ensure all options are selected before form submission
        document.querySelector('form').onsubmit = function() {
            const selectedParts = document.getElementById('selected-parts-select');
            const selectedSounds = document.getElementById('selected-sounds-select');
            
            for (let option of selectedParts.options) {
                option.selected = true;
            }
            
            for (let option of selectedSounds.options) {
                option.selected = true;
            }
            
            return true;
        };

        // Initialize available options
        updateAvailableOptions();
    </script>
</body>
</html>

================
File: views/characters.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <% if (typeof error !== 'undefined') { %>
        <div class="error">Error: <%= error %></div>
    <% } else { %>
        <a href="/characters/new" class="button">Add New Character</a>
        <table>
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Parts</th>
                    <th>Sounds</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% try { %>
                    <% characters.forEach(function(character) { %>
                        <tr>
                            <td>
                                <% if (character.image) { %>
                                    <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 100px;">
                                <% } else { %>
                                    No Image
                                <% } %>
                            </td>
                            <td><%= character.char_name %></td>
                            <td><%= character.char_description %></td>
                            <td>
                                <% character.parts.forEach(function(partId) { %>
                                    <% const part = parts.find(p => p.id === partId); %>
                                    <% if (part) { %>
                                        <%= part.name %><br>
                                    <% } %>
                                <% }); %>
                            </td>
                            <td>
                                <% character.sounds.forEach(function(soundId) { %>
                                    <% const sound = sounds.find(s => s.id === soundId); %>
                                    <% if (sound) { %>
                                        <%= sound.name %><br>
                                    <% } %>
                                <% }); %>
                            </td>
                            <td>
                                <a href="/characters/<%= character.id %>/edit" class="button">Edit</a>
                                <button onclick="deleteCharacter(<%= character.id %>)" class="button">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                <% } catch (err) { %>
                    <tr>
                        <td colspan="6">Error rendering characters: <%= err.message %></td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    <% } %>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteCharacter(id) {
            if (confirm('Are you sure you want to delete this character?')) {
                $.post('/characters/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting character: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MonsterBox Control Panel</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Creepster&display=swap">
</head>
<body>
    <header>
        <h1>MonsterBox(tm)</h1>
    </header>
    <main>
        <h2>Welcome to the MonsterBox Control Panel</h2>
        <p>Choose an option from the menu to get started.</p>
    </main>

    <nav>
        <ul>
            <li><a href="/scenes">Scenes</a></li>
            <li><a href="/characters">Characters</a></li>
            <li><a href="/parts">Parts</a></li>
            <li><a href="/sounds">Sounds</a></li>
            <li><a href="/motor">Motor Control</a></li>
        </ul>
    </nav>
    <p>An animatronic automation package by ARW 8.15.2024.</p>
</body>
</html>

================
File: views/motor-index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    
    <h2>Motor Settings</h2>
    <form id="settingsForm" action="/motor/save-settings" method="POST">
        <label for="dirPin">Direction Pin:</label>
        <input type="number" id="dirPin" name="dirPin" value="<%= settings.dirPin %>" required>
        
        <label for="pwmPin">PWM Pin:</label>
        <input type="number" id="pwmPin" name="pwmPin" value="<%= settings.pwmPin %>" required>
        
        <button type="submit">Save Settings</button>
    </form>

    <h2>Motor Control</h2>
    <div id="controlPanel">
        <div class="direction-control">
            <label>Direction:</label>
            <div class="radio-group">
                <input type="radio" id="forward" name="direction" value="forward" checked>
                <label for="forward">Forward</label>
                <input type="radio" id="backward" name="direction" value="backward">
                <label for="backward">Backward</label>
            </div>
        </div>
        
        <label for="speed">Speed:</label>
        <input type="range" id="speed" min="0" max="100" value="50">
        <span id="speedValue">50</span>
        
        <label for="duration">Duration (ms):</label>
        <input type="range" id="duration" min="100" max="5000" value="1000">
        <span id="durationValue">1000</span>
        
        <button id="runMotor">Run Motor</button>
    </div>

    <a href="/" class="button">Back to Main Menu</a>

    <script>
        const speedSlider = document.getElementById('speed');
        const speedValue = document.getElementById('speedValue');
        const durationSlider = document.getElementById('duration');
        const durationValue = document.getElementById('durationValue');
        const runMotorButton = document.getElementById('runMotor');

        speedSlider.oninput = function() {
            speedValue.textContent = this.value;
        }

        durationSlider.oninput = function() {
            durationValue.textContent = this.value;
        }

        runMotorButton.onclick = function() {
            const direction = document.querySelector('input[name="direction"]:checked').value;
            const speed = speedSlider.value;
            const duration = durationSlider.value;
            const directionPin = document.getElementById('dirPin').value;
            const pwmPin = document.getElementById('pwmPin').value;

            axios.post('/motor/control-motor', {
                direction: direction,
                speed: speed,
                duration: duration,
                directionPin: directionPin,
                pwmPin: pwmPin
            })
            .then(function (response) {
                console.log('Motor controlled successfully');
                alert('Motor control successful!');
            })
            .catch(function (error) {
                console.error('Error controlling motor:', error);
                alert('Error controlling motor: ' + (error.response ? error.response.data : error.message));
            });
        }
    </script>
</body>
</html>

================
File: views/part-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" id="partForm">
        <% if (part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part.name || '' %>" required>
        </div>
        <div>
            <label for="type">Type:</label>
            <select id="type" name="type" required onchange="togglePinInputs()">
                <option value="motor" <%= part.type === 'motor' ? 'selected' : '' %>>Motor</option>
                <option value="servo" <%= part.type === 'servo' ? 'selected' : '' %>>Servo</option>
                <option value="light" <%= part.type === 'light' ? 'selected' : '' %>>Light</option>
            </select>
        </div>
        <div id="motorInputs" style="display: none;">
            <div>
                <label for="directionPin">Direction Pin:</label>
                <input type="number" id="directionPin" name="directionPin" value="<%= part.directionPin || '' %>" min="0" max="40" required>
            </div>
            <div>
                <label for="pwmPin">PWM Pin:</label>
                <input type="number" id="pwmPin" name="pwmPin" value="<%= part.pwmPin || '' %>" min="0" max="40" required>
            </div>
            <div class="direction-control">
                <label>Direction:</label>
                <div class="radio-group">
                    <input type="radio" id="forward" name="direction" value="forward" checked>
                    <label for="forward">Forward</label>
                    <input type="radio" id="backward" name="direction" value="backward">
                    <label for="backward">Backward</label>
                </div>
            </div>
            <div>
                <label for="speed">Speed:</label>
                <input type="range" id="speed" min="0" max="100" value="50">
                <span id="speedValue">50</span>
            </div>
            <div>
                <label for="duration">Duration (ms):</label>
                <input type="range" id="duration" min="100" max="5000" value="1000">
                <span id="durationValue">1000</span>
            </div>
            <button type="button" id="testMotor">Test Motor</button>
        </div>
        <div id="otherInputs" style="display: none;">
            <label for="pin">GPIO Pin:</label>
            <input type="number" id="pin" name="pin" value="<%= part.pin || '' %>" min="0" max="40">
        </div>
        <button type="submit">Save Part</button>
    </form>
    <a href="/parts" class="button">Back to Parts</a>

    <script>
        function togglePinInputs() {
            const type = document.getElementById('type').value;
            const motorInputs = document.getElementById('motorInputs');
            const otherInputs = document.getElementById('otherInputs');

            if (type === 'motor') {
                motorInputs.style.display = 'block';
                otherInputs.style.display = 'none';
            } else {
                motorInputs.style.display = 'none';
                otherInputs.style.display = 'block';
            }
        }

        // Call the function on page load to set the initial state
        togglePinInputs();

        const speedSlider = document.getElementById('speed');
        const speedValue = document.getElementById('speedValue');
        const durationSlider = document.getElementById('duration');
        const durationValue = document.getElementById('durationValue');
        const testMotorButton = document.getElementById('testMotor');

        speedSlider.oninput = function() {
            speedValue.textContent = this.value;
        }

        durationSlider.oninput = function() {
            durationValue.textContent = this.value;
        }

        testMotorButton.onclick = function() {
            const direction = document.querySelector('input[name="direction"]:checked').value;
            const speed = speedSlider.value;
            const duration = durationSlider.value;
            const directionPin = document.getElementById('directionPin').value;
            const pwmPin = document.getElementById('pwmPin').value;

            if (!directionPin || !pwmPin) {
                alert('Please enter both Direction Pin and PWM Pin before testing.');
                return;
            }

            axios.post('/motor/control-motor', {
                direction: direction,
                speed: speed,
                duration: duration,
                directionPin: parseInt(directionPin),
                pwmPin: parseInt(pwmPin)
            })
            .then(function (response) {
                console.log('Motor controlled successfully');
                alert('Motor test successful!');
            })
            .catch(function (error) {
                console.error('Error controlling motor:', error);
                alert('Error testing motor: ' + (error.response ? error.response.data : error.message));
            });
        }
    </script>
</body>
</html>

================
File: views/parts.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/parts/new" class="button">Add New Part</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Pin Details</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% parts.forEach(function(part) { %>
                <tr>
                    <td><%= part.name %></td>
                    <td><%= part.type %></td>
                    <td>
                        <% if (part.type === 'motor') { %>
                            Dir Pin: <%= part.directionPin %><br>
                            PWM Pin: <%= part.pwmPin %><br>
                            Frequency: <%= part.frequency %> Hz
                        <% } else { %>
                            Pin: <%= part.pin %>
                        <% } %>
                    </td>
                    <td>
                        <a href="/parts/<%= part.id %>/edit" class="button">Edit</a>
                        <button onclick="deletePart(<%= part.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deletePart(id) {
            if (confirm('Are you sure you want to delete this part?')) {
                $.post('/parts/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting part: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/scene-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form id="sceneForm" action="<%= action %>" method="POST">
        <input type="hidden" name="id" value="<%= scene.id %>">
        <div>
            <label for="scene_name">Scene Name:</label>
            <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
        </div>
        <div>
            <label for="character_id">Character:</label>
            <select id="character_id" name="character_id" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>

        <h2>Steps</h2>
        <div id="steps">
            <div id="step-list">
                <% (scene.steps || []).forEach(function(step, index) { %>
                    <div class="step" data-step-id="<%= index %>">
                        <h3>Step <%= index + 1 %></h3>
                        <input type="text" name="steps[<%= index %>][name]" value="<%= step.name %>" placeholder="Step Name" required>
                        <select name="steps[<%= index %>][type]" required>
                            <option value="sound" <%= step.type === 'sound' ? 'selected' : '' %>>Play Sound</option>
                            <option value="motor" <%= step.type === 'motor' ? 'selected' : '' %>>Move Motor</option>
                            <option value="light" <%= step.type === 'light' ? 'selected' : '' %>>Control Light</option>
                        </select>
                        <!-- Add more fields based on the step type -->
                        <button type="button" onclick="removeStep(this)">Remove Step</button>
                    </div>
                <% }); %>
            </div>
            <button type="button" onclick="addStep()">Add Step</button>
        </div>

        <button type="submit">Save Scene</button>
    </form>
    <a href="/scenes" class="button">Back to Scenes</a>

    <script>
        function addStep() {
            const stepList = document.getElementById('step-list');
            const stepCount = stepList.children.length;
            const newStep = document.createElement('div');
            newStep.className = 'step';
            newStep.dataset.stepId = stepCount;
            newStep.innerHTML = `
                <h3>Step ${stepCount + 1}</h3>
                <input type="text" name="steps[${stepCount}][name]" placeholder="Step Name" required>
                <select name="steps[${stepCount}][type]" required>
                    <option value="sound">Play Sound</option>
                    <option value="motor">Move Motor</option>
                    <option value="light">Control Light</option>
                </select>
                <button type="button" onclick="removeStep(this)">Remove Step</button>
            `;
            stepList.appendChild(newStep);
        }

        function removeStep(button) {
            button.closest('.step').remove();
            updateStepNumbers();
        }

        function updateStepNumbers() {
            const steps = document.querySelectorAll('.step');
            steps.forEach((step, index) => {
                step.querySelector('h3').textContent = `Step ${index + 1}`;
                step.dataset.stepId = index;
                step.querySelectorAll('input, select').forEach(input => {
                    input.name = input.name.replace(/\d+/, index);
                });
            });
        }

        $(function() {
            $("#step-list").sortable({
                update: updateStepNumbers
            });
        });
    </script>
</body>
</html>

================
File: views/scenes.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/scenes/new" class="button">Add New Scene</a>
    <table>
        <thead>
            <tr>
                <th>Scene Name</th>
                <th>Character</th>
                <th>Number of Steps</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% scenes.forEach(function(scene) { %>
                <tr>
                    <td><%= scene.scene_name %></td>
                    <td><%= characters.find(c => c.id === scene.character_id)?.char_name || 'N/A' %></td>
                    <td><%= scene.steps ? scene.steps.length : 0 %></td>
                    <td>
                        <a href="/scenes/<%= scene.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteScene(<%= scene.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteScene(id) {
            if (confirm('Are you sure you want to delete this scene?')) {
                $.post('/scenes/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting scene: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/sound-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (sound.id) { %>
            <input type="hidden" name="id" value="<%= sound.id %>">
        <% } %>
        <div>
            <label for="name">Sound Name:</label>
            <input type="text" id="name" name="name" value="<%= sound.name || '' %>" required>
        </div>
        <div>
            <label for="sound_file">Sound File (MP3):</label>
            <input type="file" id="sound_file" name="sound_file" accept=".mp3" <%= sound.id ? '' : 'required' %>>
        </div>
        <% if (sound.id && sound.filename) { %>
            <div>
                <p>Current file: <%= sound.filename %></p>
                <audio controls>
                    <source src="/sounds/<%= sound.filename %>" type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
            </div>
        <% } %>
        <button type="submit">Save Sound</button>
    </form>
    <a href="/sounds" class="button">Back to Sounds</a>
</body>
</html>

================
File: views/sounds.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sounds/new" class="button">Add New Sound</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Filename</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sounds.forEach(function(sound) { %>
                <tr>
                    <td><%= sound.name %></td>
                    <td><%= sound.filename %></td>
                    <td>
                        <button onclick="playOnCharacter(<%= sound.id %>)">Play (on Character)</button>
                        <button onclick="playLocal('<%= sound.filename %>')">Play (local)</button>
                        <button onclick="deleteSound(<%= sound.id %>)">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <button onclick="stopSounds()">Stop All Sounds</button>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function playLocal(filename) {
            const audio = new Audio(`/sounds/${filename}`);
            audio.play().catch(error => {
                console.error('Error playing sound locally:', error);
                alert('Error playing sound locally');
            });
        }

        function playOnCharacter(soundId) {
            fetch('/sounds/play', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ soundId }),
            }).then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(text);
                    });
                }
                return response.text();
            }).then(text => {
                console.log(text);
            }).catch(error => {
                console.error('Error playing sound on character:', error);
                alert('Error playing sound on character: ' + error.message);
            });
        }

        function stopSounds() {
            fetch('/sounds/stop', {
                method: 'POST',
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Failed to stop sounds');
                }
                return response.text();
            }).then(text => {
                console.log(text);
            }).catch(error => {
                console.error('Error stopping sounds:', error);
                alert('Error stopping sounds: ' + error.message);
            });
        }

        function deleteSound(id) {
            if (confirm('Are you sure you want to delete this sound?')) {
                $.post('/sounds/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting sound: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: .gitignore
================
.codiumai

================
File: app.js
================
const express = require('express');
const dataManager = require('./dataManager');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const app = express();
const port = 3000;

// Import routes
const motorRoutes = require('./routes/motorRoutes');
const sceneRoutes = require('./routes/sceneRoutes');
const characterRoutes = require('./routes/characterRoutes');
const partRoutes = require('./routes/partRoutes');
const soundRoutes = require('./routes/soundRoutes');

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        if (file.fieldname === "sound_file") {
            cb(null, 'public/sounds/');
        } else if (file.fieldname === "character_image") {
            cb(null, 'public/images/characters/');
        }
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

// Basic Express setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Routes
app.use('/motor', motorRoutes);
app.use('/scenes', sceneRoutes);
app.use('/characters', characterRoutes);
app.use('/parts', partRoutes);
app.use('/sounds', soundRoutes);

// Main menu route
app.get('/', (req, res) => {
    res.render('index', { title: 'MonsterBox Control Panel' });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start the server
app.listen(port, () => {
    console.log(`MonsterBox server running at http://localhost:${port}`);
});

================
File: dataManager.js
================
const fs = require('fs').promises;
const path = require('path');

const dataDir = path.join(__dirname, 'data');

const ensureDataDirExists = async () => {
    try {
        await fs.access(dataDir);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.mkdir(dataDir);
        } else {
            throw error;
        }
    }
};

const readData = async (filename) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        await ensureDataDirExists();
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log(`File ${filename}.json not found. Returning empty array.`);
            return [];
        }
        console.error(`Error reading ${filename}:`, error);
        throw error;
    }
};

const writeData = async (filename, data) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        await ensureDataDirExists();
        await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    } catch (error) {
        console.error(`Error writing ${filename}:`, error);
        throw error;
    }
};

const getNextId = (items) => {
    return items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1;
};

module.exports = {
    getCharacters: () => readData('characters'),
    getScenes: () => readData('scenes'),
    getParts: () => readData('parts'),
    getSounds: () => readData('sounds'),
    saveCharacters: (data) => writeData('characters', data),
    saveScenes: (data) => writeData('scenes', data),
    saveParts: (data) => writeData('parts', data),
    saveSounds: (data) => writeData('sounds', data),
    getNextId
};

================
File: motor_control.py
================
import RPi.GPIO as GPIO
import sys
import time
import logging

# Set up logging
logging.basicConfig(filename='motor_control.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def control_motor(direction, speed, duration, dir_pin, pwm_pin):
    logging.info(f"Controlling motor: direction={direction}, speed={speed}, duration={duration}, dir_pin={dir_pin}, pwm_pin={pwm_pin}")
    
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(dir_pin, GPIO.OUT)
    GPIO.setup(pwm_pin, GPIO.OUT)

    pwm = GPIO.PWM(pwm_pin, 100)  # Use a default frequency of 100 Hz
    pwm.start(0)

    try:
        GPIO.output(dir_pin, GPIO.HIGH if direction == 'forward' else GPIO.LOW)
        pwm.ChangeDutyCycle(int(speed))
        time.sleep(int(duration) / 1000)  # Convert duration to seconds
        pwm.ChangeDutyCycle(0)
    except Exception as e:
        logging.error(f"Error controlling motor: {str(e)}")
        raise
    finally:
        pwm.stop()
        GPIO.cleanup([dir_pin, pwm_pin])

if __name__ == "__main__":
    if len(sys.argv) != 6:
        logging.error("Incorrect number of arguments")
        print("Usage: python motor_control.py <direction> <speed> <duration> <dir_pin> <pwm_pin>")
        sys.exit(1)

    direction = sys.argv[1]
    speed = sys.argv[2]
    duration = sys.argv[3]
    dir_pin = int(sys.argv[4])
    pwm_pin = int(sys.argv[5])

    try:
        control_motor(direction, speed, duration, dir_pin, pwm_pin)
        print("Motor control successful")
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        print(f"Error: {str(e)}")
    finally:
        # Only clean up if GPIO was set up
        if GPIO.getmode() is not None:
            GPIO.cleanup()
            logging.info("GPIO cleanup completed")

================
File: motor_settings.json
================
{
  "dirPin": 18,
  "pwmPin": 24
}

================
File: package.json
================
{
  "name": "scene-builder-app",
  "version": "1.0.0",
  "description": "A refactored scene builder application for managing scenes and steps.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "test": "mocha --recursive"
  },
  "dependencies": {
    "body-parser": "^1.19.0",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "multer": "^1.4.5-lts.1",
    "node-aplay": "^1.0.3",
    "node-mpg123": "^1.0.2-0023",
    "play-sound": "^1.1.6",
    "replit-auth": "^5.0.3"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.1.3",
    "supertest": "^6.1.6"
  },
  "engines": {
    "node": ">=12.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-repo/scene-builder-app.git"
  },
  "keywords": [
    "scene",
    "builder",
    "express",
    "ejs",
    "nodejs"
  ],
  "author": "Your Name",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/your-repo/scene-builder-app/issues"
  },
  "homepage": "https://github.com/your-repo/scene-builder-app#readme"
}

================
File: README.md
================
# MonsterBox

================
File: server.js
================
const express = require('express');
const bodyParser = require('body-parser');
const sceneRoutes = require('./routes/sceneRoutes');

const app = express();

app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));
app.use('/scenes', sceneRoutes);

app.set('view engine', 'ejs');

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
