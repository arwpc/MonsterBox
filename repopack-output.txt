================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-16T00:11:16.134Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    node.js.yml
data/
  characters.json
  parts.json
  scenes.json
  sounds.json
public/
  css/
    style.css
routes/
  characterRoutes.js
  partRoutes.js
  sceneRoutes.js
  soundRoutes.js
views/
  character-form.ejs
  characters.ejs
  index.ejs
  part-form.ejs
  parts.ejs
  scene-form.ejs
  scenes.ejs
  sound-form.ejs
  sounds.ejs
app.js
dataManager.js
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .github/workflows/node.js.yml
================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

================
File: data/characters.json
================
[
  {
    "id": 1,
    "char_name": "Scary Pete",
    "char_description": "Someone with buttholes for eyes",
    "parts": [
      1,
      2,
      4,
      5
    ],
    "sounds": [
      1,
      2,
      3
    ],
    "image": "1723741424106.jpg"
  },
  {
    "id": 2,
    "char_name": "Arnold",
    "char_description": "Not much there",
    "parts": [
      1,
      2,
      5
    ],
    "sounds": [
      1,
      2
    ],
    "image": "1723757152586.jpg"
  }
]

================
File: data/parts.json
================
[
  {
    "id": 1,
    "name": "Right Arm",
    "type": "motor",
    "pin": 17
  },
  {
    "id": 2,
    "name": "Left Arm",
    "type": "motor",
    "pin": 18
  },
  {
    "id": 3,
    "name": "Right Leg",
    "type": "motor",
    "pin": 19
  },
  {
    "id": 4,
    "name": "Left Leg",
    "type": "motor",
    "pin": 21
  },
  {
    "id": 5,
    "name": "Eyes",
    "type": "light",
    "pin": 20
  },
  {
    "id": 6,
    "name": "Spotlight",
    "type": "light",
    "pin": 33
  }
]

================
File: data/scenes.json
================
[
  {
    "id": 1,
    "scene_name": "Jump out and spaz",
    "character_id": 1,
    "steps": [
      {
        "name": "Raise head",
        "concurrent": false,
        "type": "motor",
        "part_id": 2,
        "duration": 10,
        "direction": "F",
        "speed": 100
      }
    ]
  },
  {
    "id": 2,
    "scene_name": "asdasd",
    "character_id": 1,
    "steps": [
      {
        "name": "asdasd",
        "concurrent": false,
        "type": ""
      },
      {
        "name": "nut smack",
        "concurrent": false,
        "type": "motor",
        "part_id": 4,
        "duration": 12,
        "direction": "R",
        "speed": 12
      }
    ]
  },
  {
    "id": 3,
    "scene_name": "Chest lift",
    "character_id": 2,
    "steps": [
      {
        "name": "Lift Left Arm",
        "concurrent": true,
        "type": "motor",
        "part_id": 2,
        "duration": 20,
        "direction": "F",
        "speed": 100
      },
      {
        "name": "Lift Right Arm",
        "concurrent": true,
        "type": "motor",
        "part_id": 1,
        "duration": 20,
        "direction": "F",
        "speed": 100
      }
    ]
  },
  {
    "id": 4,
    "scene_name": "arnold eyes me",
    "character_id": 2,
    "steps": [
      {
        "name": "Turn on eyes",
        "concurrent": false,
        "type": "light",
        "part_id": 5,
        "duration": 5,
        "state": "On",
        "level": 100
      },
      {
        "name": "scare me",
        "concurrent": false,
        "type": "sound",
        "sound_id": 2
      }
    ]
  }
]

================
File: data/sounds.json
================
[
  {
    "id": 1,
    "name": "Evening my friends",
    "filename": "1723741847357.mp3"
  },
  {
    "id": 2,
    "name": "CreakingGate",
    "filename": "1723743284960.mp3"
  },
  {
    "id": 3,
    "name": "notnoise",
    "filename": "1723763656536.mp3"
  },
  {
    "id": 4,
    "name": "Dio by the D",
    "filename": "1723765261821.mp3"
  }
]

================
File: public/css/style.css
================
body {
    font-family: 'Courier New', Courier, monospace;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #000000;
    color: #00ff00;
}

h1, h2, h3, h4, h5, h6 {
    color: #00ff00;
    text-shadow: 0 0 5px #00ff00;
}

a {
    color: #00ffff;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
    text-shadow: 0 0 5px #00ffff;
}

.button {
    display: inline-block;
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    margin: 10px 0;
}

.button:hover {
    background-color: #004400;
    text-decoration: none;
    box-shadow: 0 0 10px #00ff00;
}

form {
    background-color: #001100;
    padding: 20px;
    border-radius: 5px;
    border: 1px solid #00ff00;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"],
input[type="number"],
textarea,
select {
    width: 100%;
    padding: 8px;
    border: 1px solid #00ff00;
    border-radius: 4px;
    background-color: #000000;
    color: #00ff00;
    box-sizing: border-box;
}

button {
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #004400;
    box-shadow: 0 0 10px #00ff00;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #001100;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

table, th, td {
    border: 1px solid #00ff00;
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #002200;
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #001800;
}

#parts-container, #sounds-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

#available-parts, #selected-parts, #available-sounds, #selected-sounds {
    width: 40%;
}

#available-parts select, #selected-parts select, #available-sounds select, #selected-sounds select {
    width: 100%;
    height: 200px;
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
}

#parts-container > div:nth-child(2), #sounds-container > div:nth-child(2) {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#parts-container button, #sounds-container button {
    margin: 5px;
}

input[type="file"] {
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 5px;
    border-radius: 4px;
}

option {
    background-color: #001100;
    color: #00ff00;
}

input:focus, textarea:focus, select:focus {
    outline: none;
    box-shadow: 0 0 5px #00ff00;
}

================
File: routes/characterRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const fs = require('fs').promises;
const path = require('path');
const multer = require('multer');

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/images/characters/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

router.get('/', async (req, res) => {
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    res.render('characters', { title: 'Characters', characters, parts, sounds });
});

router.get('/new', async (req, res) => {
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    res.render('character-form', { title: 'Add New Character', action: '/characters', character: {}, parts, sounds });
});

router.get('/:id/edit', async (req, res) => {
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    const character = characters.find(c => c.id === parseInt(req.params.id));
    if (character) {
        res.render('character-form', { title: 'Edit Character', action: '/characters/' + character.id, character, parts, sounds });
    } else {
        res.status(404).send('Character not found');
    }
});

router.post('/', upload.single('character_image'), async (req, res) => {
    const characters = await dataManager.getCharacters();
    const newCharacter = {
        id: dataManager.getNextId(characters),
        char_name: req.body.char_name,
        char_description: req.body.char_description,
        parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : req.body.parts ? [Number(req.body.parts)] : [],
        sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : req.body.sounds ? [Number(req.body.sounds)] : [],
        image: req.file ? req.file.filename : null
    };
    characters.push(newCharacter);
    await dataManager.saveCharacters(characters);
    res.redirect('/characters');
});

router.post('/:id', upload.single('character_image'), async (req, res) => {
    const id = parseInt(req.params.id);
    const characters = await dataManager.getCharacters();
    const index = characters.findIndex(c => c.id === id);
    if (index !== -1) {
        const oldImage = characters[index].image;
        characters[index] = {
            id: id,
            char_name: req.body.char_name,
            char_description: req.body.char_description,
            parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : req.body.parts ? [Number(req.body.parts)] : [],
            sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : req.body.sounds ? [Number(req.body.sounds)] : [],
            image: req.file ? req.file.filename : oldImage
        };
        if (req.file && oldImage) {
            try {
                await fs.unlink(path.join('public', 'images', 'characters', oldImage));
            } catch (error) {
                console.error('Error deleting old image:', error);
            }
        }
        await dataManager.saveCharacters(characters);
        res.redirect('/characters');
    } else {
        res.status(404).send('Character not found');
    }
});

router.post('/:id/delete', async (req, res) => {
    const id = parseInt(req.params.id);
    const characters = await dataManager.getCharacters();
    const index = characters.findIndex(c => c.id === id);
    if (index !== -1) {
        const character = characters[index];
        if (character.image) {
            try {
                await fs.unlink(path.join('public', 'images', 'characters', character.image));
            } catch (error) {
                console.error('Error deleting character image:', error);
            }
        }
        characters.splice(index, 1);
        await dataManager.saveCharacters(characters);
        res.sendStatus(200);
    } else {
        res.status(404).send('Character not found');
    }
});

module.exports = router;

================
File: routes/partRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');

router.get('/', async (req, res) => {
    const parts = await dataManager.getParts();
    res.render('parts', { title: 'Parts', parts });
});

router.get('/new', (req, res) => {
    res.render('part-form', { title: 'Add New Part', action: '/parts', part: {} });
});

router.get('/:id/edit', async (req, res) => {
    const parts = await dataManager.getParts();
    const part = parts.find(p => p.id === parseInt(req.params.id));
    if (part) {
        res.render('part-form', { title: 'Edit Part', action: '/parts/' + part.id, part });
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/', async (req, res) => {
    const parts = await dataManager.getParts();
    const newPart = {
        id: dataManager.getNextId(parts),
        name: req.body.name,
        type: req.body.type,
        pin: parseInt(req.body.pin)
    };
    parts.push(newPart);
    await dataManager.saveParts(parts);
    res.redirect('/parts');
});

router.post('/:id', async (req, res) => {
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts[index] = {
            id: id,
            name: req.body.name,
            type: req.body.type,
            pin: parseInt(req.body.pin)
        };
        await dataManager.saveParts(parts);
        res.redirect('/parts');
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/:id/delete', async (req, res) => {
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts.splice(index, 1);
        await dataManager.saveParts(parts);
        res.sendStatus(200);
    } else {
        res.status(404).send('Part not found');
    }
});

module.exports = router;

================
File: routes/sceneRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');

router.get('/', async (req, res) => {
    const scenes = await dataManager.getScenes();
    const characters = await dataManager.getCharacters();
    res.render('scenes', { title: 'Scenes', scenes, characters });
});

router.get('/new', async (req, res) => {
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    res.render('scene-form', { title: 'Add New Scene', action: '/scenes', scene: {}, characters, parts, sounds });
});

router.get('/:id/edit', async (req, res) => {
    const scenes = await dataManager.getScenes();
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    const scene = scenes.find(s => s.id === parseInt(req.params.id));
    if (scene) {
        res.render('scene-form', { title: 'Edit Scene', action: '/scenes/' + scene.id, scene, characters, parts, sounds });
    } else {
        res.status(404).send('Scene not found');
    }
});

router.post('/', async (req, res) => {
    const scenes = await dataManager.getScenes();
    const newScene = {
        id: dataManager.getNextId(scenes),
        scene_name: req.body.scene_name,
        character_id: parseInt(req.body.character_id),
        steps: JSON.parse(req.body.steps)
    };
    scenes.push(newScene);
    await dataManager.saveScenes(scenes);
    res.redirect('/scenes');
});

router.post('/:id', async (req, res) => {
    const id = parseInt(req.params.id);
    const scenes = await dataManager.getScenes();
    const index = scenes.findIndex(s => s.id === id);
    if (index !== -1) {
        scenes[index] = {
            id: id,
            scene_name: req.body.scene_name,
            character_id: parseInt(req.body.character_id),
            steps: JSON.parse(req.body.steps)
        };
        await dataManager.saveScenes(scenes);
        res.redirect('/scenes');
    } else {
        res.status(404).send('Scene not found');
    }
});

router.post('/:id/delete', async (req, res) => {
    const id = parseInt(req.params.id);
    const scenes = await dataManager.getScenes();
    const index = scenes.findIndex(s => s.id === id);
    if (index !== -1) {
        scenes.splice(index, 1);
        await dataManager.saveScenes(scenes);
        res.sendStatus(200);
    } else {
        res.status(404).send('Scene not found');
    }
});

module.exports = router;

================
File: routes/soundRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { upload } = require('../app');
const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');

let currentlyPlayingProcess = null;

router.get('/', async (req, res) => {
    const sounds = await dataManager.getSounds();
    res.render('sounds', { title: 'Sounds', sounds, playOnServer: true });
});

router.get('/new', (req, res) => {
    res.render('sound-form', { title: 'Add New Sound', action: '/sounds', sound: {} });
});

router.get('/:id/edit', async (req, res) => {
    const sounds = await dataManager.getSounds();
    const sound = sounds.find(s => s.id === parseInt(req.params.id));
    if (sound) {
        res.render('sound-form', { title: 'Edit Sound', action: '/sounds/' + sound.id, sound });
    } else {
        res.status(404).send('Sound not found');
    }
});

router.post('/', upload.single('sound_file'), async (req, res) => {
    const sounds = await dataManager.getSounds();
    const newSound = {
        id: dataManager.getNextId(sounds),
        name: req.body.name,
        filename: req.file.filename
    };
    sounds.push(newSound);
    await dataManager.saveSounds(sounds);
    res.redirect('/sounds');
});

router.post('/:id', upload.single('sound_file'), async (req, res) => {
    const id = parseInt(req.params.id);
    const sounds = await dataManager.getSounds();
    const index = sounds.findIndex(s => s.id === id);
    if (index !== -1) {
        const oldFilename = sounds[index].filename;
        sounds[index] = {
            id: id,
            name: req.body.name,
            filename: req.file ? req.file.filename : oldFilename
        };
        if (req.file) {
            try {
                await fs.unlink(path.join('public', 'sounds', oldFilename));
            } catch (error) {
                console.error('Error deleting old sound file:', error);
            }
        }
        await dataManager.saveSounds(sounds);
        res.redirect('/sounds');
    } else {
        res.status(404).send('Sound not found');
    }
});

router.post('/:id/delete', async (req, res) => {
    const id = parseInt(req.params.id);
    const sounds = await dataManager.getSounds();
    const index = sounds.findIndex(s => s.id === id);
    if (index !== -1) {
        const sound = sounds[index];
        try {
            await fs.unlink(path.join('public', 'sounds', sound.filename));
        } catch (error) {
            console.error('Error deleting sound file:', error);
        }
        sounds.splice(index, 1);
        await dataManager.saveSounds(sounds);
        res.sendStatus(200);
    } else {
        res.status(404).send('Sound not found');
    }
});

router.get('/play/:id', async (req, res) => {
    const sounds = await dataManager.getSounds();
    const sound = sounds.find(s => s.id === parseInt(req.params.id));
    if (sound) {
        const soundPath = path.join(__dirname, '..', 'public', 'sounds', sound.filename);
        const fileExtension = path.extname(soundPath).toLowerCase();
        let command, args;

        if (fileExtension === '.wav') {
            command = 'aplay';
            args = [soundPath];
        } else if (fileExtension === '.mp3') {
            command = 'mpg123';
            args = [soundPath];
        } else {
            return res.status(400).send('Unsupported file format');
        }

        // Stop any currently playing sound
        if (currentlyPlayingProcess) {
            currentlyPlayingProcess.kill();
        }

        currentlyPlayingProcess = spawn(command, args);

        currentlyPlayingProcess.on('error', (error) => {
            console.error(`Error playing sound: ${error.message}`);
            res.status(500).send('Error playing sound');
        });

        currentlyPlayingProcess.on('exit', (code, signal) => {
            if (code !== 0 && signal !== 'SIGTERM') {
                console.error(`Sound process exited with code ${code} and signal ${signal}`);
            }
            currentlyPlayingProcess = null;
        });

        res.send('Sound playing started');
    } else {
        res.status(404).send('Sound not found');
    }
});

router.get('/stop', (req, res) => {
    if (currentlyPlayingProcess) {
        currentlyPlayingProcess.kill();
        currentlyPlayingProcess = null;
        res.send('Sound stopped');
    } else {
        res.send('No sound playing');
    }
});

module.exports = router;

================
File: views/character-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (character.id) { %>
            <input type="hidden" name="id" value="<%= character.id %>">
        <% } %>
        <div>
            <label for="char_name">Name:</label>
            <input type="text" id="char_name" name="char_name" value="<%= character.char_name || '' %>" required>
        </div>
        <div>
            <label for="char_description">Description:</label>
            <textarea id="char_description" name="char_description" required><%= character.char_description || '' %></textarea>
        </div>
        <div>
            <label for="character_image">Character Image:</label>
            <input type="file" id="character_image" name="character_image" accept="image/*">
            <% if (character.image) { %>
                <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 200px;">
            <% } %>
        </div>
        <div>
            <label>Parts:</label>
            <div id="parts-container">
                <div id="available-parts">
                    <h4>Available Parts:</h4>
                    <select id="available-parts-select" multiple>
                        <% parts.forEach(function(part) { %>
                            <option value="<%= part.id %>" <%= character.parts && character.parts.includes(part.id) ? 'disabled' : '' %>>
                                <%= part.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addPart()">Add &gt;</button>
                    <button type="button" onclick="removePart()">&lt; Remove</button>
                </div>
                <div id="selected-parts">
                    <h4>Selected Parts:</h4>
                    <select id="selected-parts-select" name="parts" multiple>
                        <% if (character.parts) { %>
                            <% character.parts.forEach(function(partId) { %>
                                <% const part = parts.find(p => p.id === partId); %>
                                <% if (part) { %>
                                    <option value="<%= part.id %>"><%= part.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <div>
            <label>Sounds:</label>
            <div id="sounds-container">
                <div id="available-sounds">
                    <h4>Available Sounds:</h4>
                    <select id="available-sounds-select" multiple>
                        <% sounds.forEach(function(sound) { %>
                            <option value="<%= sound.id %>" <%= character.sounds && character.sounds.includes(sound.id) ? 'disabled' : '' %>>
                                <%= sound.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addSound()">Add &gt;</button>
                    <button type="button" onclick="removeSound()">&lt; Remove</button>
                </div>
                <div id="selected-sounds">
                    <h4>Selected Sounds:</h4>
                    <select id="selected-sounds-select" name="sounds" multiple>
                        <% if (character.sounds) { %>
                            <% character.sounds.forEach(function(soundId) { %>
                                <% const sound = sounds.find(s => s.id === soundId); %>
                                <% if (sound) { %>
                                    <option value="<%= sound.id %>"><%= sound.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit">Save Character</button>
    </form>
    <a href="/characters" class="button">Back to Characters</a>

    <script>
        function addPart() {
            moveOptions('available-parts-select', 'selected-parts-select');
        }

        function removePart() {
            moveOptions('selected-parts-select', 'available-parts-select');
        }

        function addSound() {
            moveOptions('available-sounds-select', 'selected-sounds-select');
        }

        function removeSound() {
            moveOptions('selected-sounds-select', 'available-sounds-select');
        }

        function moveOptions(fromId, toId) {
            const fromSelect = document.getElementById(fromId);
            const toSelect = document.getElementById(toId);
            
            for (let option of Array.from(fromSelect.selectedOptions)) {
                toSelect.add(option);
                option.selected = false;
            }
            updateAvailableOptions();
        }

        function updateAvailableOptions() {
            const availableParts = document.getElementById('available-parts-select');
            const selectedParts = document.getElementById('selected-parts-select');
            const availableSounds = document.getElementById('available-sounds-select');
            const selectedSounds = document.getElementById('selected-sounds-select');

            for (let option of availableParts.options) {
                option.disabled = Array.from(selectedParts.options).some(o => o.value === option.value);
            }

            for (let option of availableSounds.options) {
                option.disabled = Array.from(selectedSounds.options).some(o => o.value === option.value);
            }
        }

        // Ensure all options are selected before form submission
        document.querySelector('form').onsubmit = function() {
            const selectedParts = document.getElementById('selected-parts-select');
            const selectedSounds = document.getElementById('selected-sounds-select');
            
            for (let option of selectedParts.options) {
                option.selected = true;
            }
            
            for (let option of selectedSounds.options) {
                option.selected = true;
            }
            
            return true;
        };

        // Initialize available options
        updateAvailableOptions();
    </script>
</body>
</html>

================
File: views/characters.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/characters/new" class="button">Add New Character</a>
    <table>
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Parts</th>
                <th>Sounds</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% characters.forEach(function(character) { %>
                <tr>
                    <td>
                        <% if (character.image) { %>
                            <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 100px;">
                        <% } else { %>
                            No Image
                        <% } %>
                    </td>
                    <td><%= character.char_name %></td>
                    <td><%= character.char_description %></td>
                    <td>
                        <% character.parts.forEach(function(partId) { %>
                            <% const part = parts.find(p => p.id === partId); %>
                            <% if (part) { %>
                                <%= part.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <% character.sounds.forEach(function(soundId) { %>
                            <% const sound = sounds.find(s => s.id === soundId); %>
                            <% if (sound) { %>
                                <%= sound.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <a href="/characters/<%= character.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteCharacter(<%= character.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteCharacter(id) {
            if (confirm('Are you sure you want to delete this character?')) {
                $.post('/characters/' + id + '/delete', function() {
                    location.reload();
                }).fail(function() {
                    alert('Error deleting character');
                });
            }
        }
    </script>
</body>
</html>

================
File: views/index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <nav>
        <ul>
            <li><a href="/characters">Manage Characters</a></li>
            <li><a href="/scenes">Manage Scenes</a></li>
            <li><a href="/parts">Manage Parts</a></li>
            <li><a href="/sounds">Manage Sounds</a></li>
        </ul>
    </nav>
</body>
</html>

================
File: views/part-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part.name || '' %>" required>
        </div>
        <div>
            <label for="type">Type:</label>
            <select id="type" name="type" required>
                <option value="motor" <%= part.type === 'motor' ? 'selected' : '' %>>Motor</option>
                <option value="servo" <%= part.type === 'servo' ? 'selected' : '' %>>Servo</option>
                <option value="light" <%= part.type === 'light' ? 'selected' : '' %>>Light</option>
            </select>
        </div>
        <div>
            <label for="pin">GPIO Pin:</label>
            <input type="number" id="pin" name="pin" value="<%= part.pin || '' %>" required min="0" max="40">
        </div>
        <button type="submit">Save Part</button>
    </form>
    <a href="/parts" class="button">Back to Parts</a>
</body>
</html>

================
File: views/parts.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/parts/new" class="button">Add New Part</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Pin</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% parts.forEach(function(part) { %>
                <tr>
                    <td><%= part.name %></td>
                    <td><%= part.type %></td>
                    <td><%= part.pin %></td>
                    <td>
                        <a href="/parts/<%= part.id %>/edit" class="button">Edit</a>
                        <button onclick="deletePart(<%= part.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deletePart(id) {
            if (confirm('Are you sure you want to delete this part?')) {
                $.post('/parts/' + id + '/delete', function() {
                    location.reload();
                }).fail(function() {
                    alert('Error deleting part');
                });
            }
        }
    </script>
</body>
</html>

================
File: views/scene-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (scene.id) { %>
            <input type="hidden" name="id" value="<%= scene.id %>">
        <% } %>
        <div>
            <label for="scene_name">Scene Name:</label>
            <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
        </div>
        <div>
            <label for="character_id">Character:</label>
            <select id="character_id" name="character_id" required onchange="updateCharacterParts()">
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div id="steps">
            <h3>Steps</h3>
            <button type="button" id="add-step-btn">Add Step</button>
            <div id="step-list" class="sortable"></div>
        </div>
        <input type="hidden" id="steps_json" name="steps" value="">
        <button type="submit">Save Scene</button>
    </form>
    <a href="/scenes" class="button">Back to Scenes</a>

    <script>
        let stepCount = 0;
        const characterParts = {};
        const characterSounds = {};

        <% characters.forEach(function(character) { %>
            characterParts[<%= character.id %>] = [
                <% character.parts.forEach(function(partId) { %>
                    <% const part = parts.find(p => p.id === partId); %>
                    <% if (part) { %>
                        { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                    <% } %>
                <% }); %>
            ];
            characterSounds[<%= character.id %>] = [
                <% character.sounds.forEach(function(soundId) { %>
                    <% const sound = sounds.find(s => s.id === soundId); %>
                    <% if (sound) { %>
                        { id: <%= sound.id %>, name: "<%= sound.name %>" },
                    <% } %>
                <% }); %>
            ];
        <% }); %>

        function addStep(stepData = null) {
            const stepList = document.getElementById('step-list');
            const stepDiv = document.createElement('div');
            stepDiv.className = 'step';
            stepDiv.innerHTML = `
                <h4>Step ${++stepCount}</h4>
                <input type="text" class="step-name" placeholder="Step Name" onchange="updateStepsJson()" value="${stepData ? stepData.name : ''}">
                <label>
                    Concurrent:
                    <input type="checkbox" class="concurrent" onchange="updateStepsJson()" ${stepData && stepData.concurrent ? 'checked' : ''}>
                </label>
                <select class="action-type" onchange="updateActionFields(this)">
                    <option value="">Select Action</option>
                    <option value="sound" ${stepData && stepData.type === 'sound' ? 'selected' : ''}>Play Sound</option>
                    <option value="motor" ${stepData && stepData.type === 'motor' ? 'selected' : ''}>Move Motor</option>
                    <option value="servo" ${stepData && stepData.type === 'servo' ? 'selected' : ''}>Move Servo</option>
                    <option value="light" ${stepData && stepData.type === 'light' ? 'selected' : ''}>Control Light</option>
                </select>
                <div class="action-fields"></div>
                <button type="button" onclick="removeStep(this)">Remove Step</button>
            `;
            stepList.appendChild(stepDiv);
            if (stepData) {
                updateActionFields(stepDiv.querySelector('.action-type'), stepData);
            }
            updateStepsJson();
        }

        function removeStep(button) {
            button.closest('.step').remove();
            updateStepsJson();
        }

        function updateActionFields(select, stepData = null) {
            const actionFields = select.nextElementSibling;
            const characterId = document.getElementById('character_id').value;
            const actionType = select.value;

            actionFields.innerHTML = '';

            if (actionType === 'sound') {
                const sounds = characterSounds[characterId];
                actionFields.innerHTML += `
                    <select class="sound-id" onchange="updateStepsJson()">
                        ${sounds.map(sound => `<option value="${sound.id}" ${stepData && stepData.sound_id == sound.id ? 'selected' : ''}>${sound.name}</option>`).join('')}
                    </select>
                `;
            } else if (['motor', 'servo', 'light'].includes(actionType)) {
                const parts = characterParts[characterId].filter(part => part.type === actionType);
                actionFields.innerHTML += `
                    <select class="part-id" onchange="updateStepsJson()">
                        ${parts.map(part => `<option value="${part.id}" ${stepData && stepData.part_id == part.id ? 'selected' : ''}>${part.name}</option>`).join('')}
                    </select>
                `;

                if (actionType === 'motor') {
                    actionFields.innerHTML += `
                        <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()" value="${stepData ? stepData.duration : ''}">
                        <select class="direction" onchange="updateStepsJson()">
                            <option value="F" ${stepData && stepData.direction === 'F' ? 'selected' : ''}>Forward</option>
                            <option value="R" ${stepData && stepData.direction === 'R' ? 'selected' : ''}>Reverse</option>
                        </select>
                        <input type="number" class="speed" placeholder="Speed (0-100)" min="0" max="100" onchange="updateStepsJson()" value="${stepData ? stepData.speed : ''}">
                    `;
                } else if (actionType === 'servo') {
                    actionFields.innerHTML += `
                        <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()" value="${stepData ? stepData.duration : ''}">
                        <input type="number" class="angle" placeholder="Angle (0-180)" min="0" max="180" onchange="updateStepsJson()" value="${stepData ? stepData.angle : ''}">
                    `;
                } else if (actionType === 'light') {
                    actionFields.innerHTML += `
                        <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()" value="${stepData ? stepData.duration : ''}">
                        <select class="state" onchange="updateStepsJson()">
                            <option value="On" ${stepData && stepData.state === 'On' ? 'selected' : ''}>On</option>
                            <option value="Off" ${stepData && stepData.state === 'Off' ? 'selected' : ''}>Off</option>
                        </select>
                        <input type="number" class="level" placeholder="Level (0-100)" min="0" max="100" onchange="updateStepsJson()" value="${stepData ? stepData.level : ''}">
                    `;
                }
            }

            updateStepsJson();
        }

        function updateStepsJson() {
            const steps = [];
            document.querySelectorAll('.step').forEach((stepDiv, index) => {
                const step = {
                    name: stepDiv.querySelector('.step-name').value,
                    concurrent: stepDiv.querySelector('.concurrent').checked,
                    type: stepDiv.querySelector('.action-type').value
                };

                if (step.type === 'sound') {
                    step.sound_id = parseInt(stepDiv.querySelector('.sound-id').value);
                } else if (['motor', 'servo', 'light'].includes(step.type)) {
                    step.part_id = parseInt(stepDiv.querySelector('.part-id').value);
                    step.duration = parseInt(stepDiv.querySelector('.duration').value);

                    if (step.type === 'motor') {
                        step.direction = stepDiv.querySelector('.direction').value;
                        step.speed = parseInt(stepDiv.querySelector('.speed').value);
                    } else if (step.type === 'servo') {
                        step.angle = parseInt(stepDiv.querySelector('.angle').value);
                    } else if (step.type === 'light') {
                        step.state = stepDiv.querySelector('.state').value;
                        step.level = parseInt(stepDiv.querySelector('.level').value);
                    }
                }

                steps.push(step);
            });

            document.getElementById('steps_json').value = JSON.stringify(steps);
        }

        function updateCharacterParts() {
            const characterId = document.getElementById('character_id').value;
            document.querySelectorAll('.step').forEach(stepDiv => {
                const actionType = stepDiv.querySelector('.action-type').value;
                if (actionType) {
                    updateActionFields(stepDiv.querySelector('.action-type'));
                }
            });
        }

        // Load existing steps if editing a scene
        const existingSteps = <%- JSON.stringify(scene.steps || []) %>;
        existingSteps.forEach(step => {
            addStep(step);
        });

        updateStepsJson();

        // Make steps sortable
        $(function() {
            $("#step-list").sortable({
                update: function(event, ui) {
                    updateStepsJson();
                }
            });
        });

        // Add event listener for the "Add Step" button
        document.getElementById('add-step-btn').addEventListener('click', () => addStep());
    </script>
</body>
</html>

================
File: views/scenes.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/scenes/new" class="button">Add New Scene</a>
    <table>
        <thead>
            <tr>
                <th>Scene Name</th>
                <th>Character</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% scenes.forEach(function(scene) { %>
                <tr>
                    <td><%= scene.scene_name %></td>
                    <td>
                        <% const character = characters.find(c => c.id === scene.character_id); %>
                        <%= character ? character.char_name : 'Unknown' %>
                    </td>
                    <td>
                        <a href="/scenes/<%= scene.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteScene(<%= scene.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteScene(id) {
            if (confirm('Are you sure you want to delete this scene?')) {
                $.post('/scenes/' + id + '/delete', function() {
                    location.reload();
                }).fail(function() {
                    alert('Error deleting scene');
                });
            }
        }
    </script>
</body>
</html>

================
File: views/sound-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (sound.id) { %>
            <input type="hidden" name="id" value="<%= sound.id %>">
        <% } %>
        <div>
            <label for="name">Sound Name:</label>
            <input type="text" id="name" name="name" value="<%= sound.name || '' %>" required>
        </div>
        <div>
            <label for="sound_file">Sound File (MP3 or WAV):</label>
            <input type="file" id="sound_file" name="sound_file" accept=".mp3,.wav" <%= sound.id ? '' : 'required' %>>
        </div>
        <% if (sound.id && sound.filename) { %>
            <div>
                <p>Current file: <%= sound.filename %></p>
                <button type="button" onclick="playSound(<%= sound.id %>)">Play</button>
                <button type="button" onclick="stopSound()">Stop</button>
            </div>
        <% } %>
        <button type="submit">Save Sound</button>
    </form>
    <a href="/sounds" class="button">Back to Sounds</a>

    <script>
        function playSound(soundId) {
            $.get('/play-sound/' + soundId, function(data) {
                alert(data);
            }).fail(function() {
                alert('Error playing sound');
            });
        }

        function stopSound() {
            $.get('/stop-sound', function(data) {
                alert(data);
            }).fail(function() {
                alert('Error stopping sound');
            });
        }
    </script>
</body>
</html>

================
File: views/sounds.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sounds/new" class="button">Add New Sound</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Filename</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sounds.forEach(function(sound) { %>
                <tr>
                    <td><%= sound.name %></td>
                    <td><%= sound.filename %></td>
                    <td>
                        <a href="/sounds/<%= sound.id %>/edit" class="button">Edit</a>
                        <button onclick="playSound(<%= sound.id %>)" class="button">Play</button>
                        <button onclick="stopSound()" class="button">Stop</button>
                        <button onclick="deleteSound(<%= sound.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function playSound(soundId) {
            $.get('/play-sound/' + soundId, function(data) {
                alert(data);
            }).fail(function() {
                alert('Error playing sound');
            });
        }

        function stopSound() {
            $.get('/stop-sound', function(data) {
                alert(data);
            }).fail(function() {
                alert('Error stopping sound');
            });
        }

        function deleteSound(id) {
            if (confirm('Are you sure you want to delete this sound?')) {
                $.post('/sounds/' + id + '/delete', function() {
                    location.reload();
                }).fail(function() {
                    alert('Error deleting sound');
                });
            }
        }
    </script>
</body>
</html>

================
File: app.js
================
const express = require('express');
const path = require('path');

const characterRoutes = require('./routes/characterRoutes');
const sceneRoutes = require('./routes/sceneRoutes');
const partRoutes = require('./routes/partRoutes');
const soundRoutes = require('./routes/soundRoutes');

const app = express();
const port = 3000;

// Basic Express setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Main menu route
app.get('/', (req, res) => {
    res.render('index', { title: 'MonsterBox Control Panel' });
});

// Use route modules
app.use('/characters', characterRoutes);
app.use('/scenes', sceneRoutes);
app.use('/parts', partRoutes);
app.use('/sounds', soundRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start the server
app.listen(port, () => {
    console.log(`MonsterBox server running at http://localhost:${port}`);
});

================
File: dataManager.js
================
const fs = require('fs').promises;
const path = require('path');

const dataDir = path.join(__dirname, 'data');

// Ensure the data directory exists
fs.mkdir(dataDir, { recursive: true }).catch(console.error);

const readData = async (filename) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            // File doesn't exist, return an empty array
            return [];
        }
        throw error;
    }
};

const writeData = async (filename, data) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
};

const getNextId = (items) => {
    return items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1;
};

const getCharacters = () => readData('characters');
const getScenes = () => readData('scenes');
const getParts = () => readData('parts');
const getSounds = () => readData('sounds');

const saveCharacters = (data) => writeData('characters', data);
const saveScenes = (data) => writeData('scenes', data);
const saveParts = (data) => writeData('parts', data);
const saveSounds = (data) => writeData('sounds', data);

const deleteFile = async (filename) => {
    const filePath = path.join(dataDir, filename);
    try {
        await fs.unlink(filePath);
    } catch (error) {
        if (error.code !== 'ENOENT') {
            throw error;
        }
    }
};

module.exports = {
    getCharacters,
    getScenes,
    getParts,
    getSounds,
    saveCharacters,
    saveScenes,
    saveParts,
    saveSounds,
    getNextId,
    deleteFile
};

================
File: package.json
================
{
  "dependencies": {
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "gpio": "^0.2.10",
    "multer": "^1.4.5-lts.1"
  }
}

================
File: README.md
================
# MonsterBox
