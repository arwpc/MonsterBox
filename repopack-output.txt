================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-15T21:28:29.324Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    node.js.yml
data/
  characters.json
  parts.json
  scenes.json
  sounds.json
public/
  css/
    style.css
views/
  character-form.ejs
  characters.ejs
  index.ejs
  part-form.ejs
  parts.ejs
  scene-form.ejs
  scenes.ejs
  sound-form.ejs
  sounds.ejs
app.js
dataManager.js
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .github/workflows/node.js.yml
================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

================
File: data/characters.json
================
[
  {
    "id": 1,
    "char_name": "Scary Pete",
    "char_description": "Someone with buttholes for eyes",
    "parts": [
      1,
      2,
      4,
      5
    ],
    "sounds": [],
    "image": "1723741424106.jpg"
  },
  {
    "id": 2,
    "char_name": "Arnold",
    "char_description": "Not much there",
    "parts": [
      1,
      2
    ],
    "sounds": [],
    "image": "1723757152586.jpg"
  }
]

================
File: data/parts.json
================
[
  {
    "id": 1,
    "name": "Right Arm",
    "type": "motor",
    "pin": 17
  },
  {
    "id": 2,
    "name": "Left Arm",
    "type": "motor",
    "pin": 18
  },
  {
    "id": 3,
    "name": "Right Leg",
    "type": "motor",
    "pin": 19
  },
  {
    "id": 4,
    "name": "Left Leg",
    "type": "motor",
    "pin": 21
  },
  {
    "id": 5,
    "name": "Eyes",
    "type": "light",
    "pin": 20
  }
]

================
File: data/scenes.json
================
[
  {
    "id": 1,
    "scene_name": "Jump out and spaz",
    "character_id": 1,
    "steps": [
      {
        "name": "Raise head",
        "concurrent": false,
        "type": "motor",
        "part_id": 2,
        "duration": 10,
        "direction": "F",
        "speed": 100
      }
    ]
  },
  {
    "id": 2,
    "scene_name": "asdasd",
    "character_id": 1,
    "steps": [
      {
        "name": "asdasd",
        "concurrent": false,
        "type": ""
      }
    ]
  },
  {
    "id": 3,
    "scene_name": "Chest lift",
    "character_id": 2,
    "steps": [
      {
        "name": "Lift Right Arm",
        "concurrent": false,
        "type": "motor",
        "part_id": 1,
        "duration": 20,
        "direction": "F",
        "speed": 100
      }
    ]
  }
]

================
File: data/sounds.json
================
[
  {
    "id": 1,
    "name": "Evening my friends",
    "filename": "1723741847357.mp3"
  },
  {
    "id": 2,
    "name": "CreakingGate",
    "filename": "1723743284960.mp3"
  }
]

================
File: public/css/style.css
================
body {
    font-family: 'Courier New', Courier, monospace;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #000000;
    color: #00ff00;
}

h1, h2, h3, h4, h5, h6 {
    color: #00ff00;
    text-shadow: 0 0 5px #00ff00;
}

a {
    color: #00ffff;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
    text-shadow: 0 0 5px #00ffff;
}

.button {
    display: inline-block;
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    margin: 10px 0;
}

.button:hover {
    background-color: #004400;
    text-decoration: none;
    box-shadow: 0 0 10px #00ff00;
}

form {
    background-color: #001100;
    padding: 20px;
    border-radius: 5px;
    border: 1px solid #00ff00;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"],
input[type="number"],
textarea,
select {
    width: 100%;
    padding: 8px;
    border: 1px solid #00ff00;
    border-radius: 4px;
    background-color: #000000;
    color: #00ff00;
    box-sizing: border-box;
}

button {
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #004400;
    box-shadow: 0 0 10px #00ff00;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #001100;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

table, th, td {
    border: 1px solid #00ff00;
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #002200;
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #001800;
}

#parts-container, #sounds-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

#available-parts, #selected-parts, #available-sounds, #selected-sounds {
    width: 40%;
}

#available-parts select, #selected-parts select, #available-sounds select, #selected-sounds select {
    width: 100%;
    height: 200px;
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
}

#parts-container > div:nth-child(2), #sounds-container > div:nth-child(2) {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#parts-container button, #sounds-container button {
    margin: 5px;
}

input[type="file"] {
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 5px;
    border-radius: 4px;
}

option {
    background-color: #001100;
    color: #00ff00;
}

input:focus, textarea:focus, select:focus {
    outline: none;
    box-shadow: 0 0 5px #00ff00;
}

================
File: views/character-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (character.id) { %>
            <input type="hidden" name="id" value="<%= character.id %>">
        <% } %>
        <div>
            <label for="char_name">Name:</label>
            <input type="text" id="char_name" name="char_name" value="<%= character.char_name || '' %>" required>
        </div>
        <div>
            <label for="char_description">Description:</label>
            <textarea id="char_description" name="char_description" required><%= character.char_description || '' %></textarea>
        </div>
        <div>
            <label for="character_image">Character Image:</label>
            <input type="file" id="character_image" name="character_image" accept="image/*">
            <% if (character.image) { %>
                <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 200px;">
            <% } %>
        </div>
        <div>
            <label>Parts:</label>
            <div id="parts-container">
                <div id="available-parts">
                    <h4>Available Parts:</h4>
                    <select id="available-parts-select" multiple>
                        <% parts.forEach(function(part) { %>
                            <option value="<%= part.id %>" <%= character.parts && character.parts.includes(part.id) ? 'disabled' : '' %>>
                                <%= part.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addPart()">Add &gt;</button>
                    <button type="button" onclick="removePart()">&lt; Remove</button>
                </div>
                <div id="selected-parts">
                    <h4>Selected Parts:</h4>
                    <select id="selected-parts-select" name="parts" multiple>
                        <% if (character.parts) { %>
                            <% character.parts.forEach(function(partId) { %>
                                <% const part = parts.find(p => p.id === partId); %>
                                <% if (part) { %>
                                    <option value="<%= part.id %>"><%= part.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <div>
            <label>Sounds:</label>
            <div id="sounds-container">
                <div id="available-sounds">
                    <h4>Available Sounds:</h4>
                    <select id="available-sounds-select" multiple>
                        <% sounds.forEach(function(sound) { %>
                            <option value="<%= sound.id %>" <%= character.sounds && character.sounds.includes(sound.id) ? 'disabled' : '' %>>
                                <%= sound.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addSound()">Add &gt;</button>
                    <button type="button" onclick="removeSound()">&lt; Remove</button>
                </div>
                <div id="selected-sounds">
                    <h4>Selected Sounds:</h4>
                    <select id="selected-sounds-select" name="sounds" multiple>
                        <% if (character.sounds) { %>
                            <% character.sounds.forEach(function(soundId) { %>
                                <% const sound = sounds.find(s => s.id === soundId); %>
                                <% if (sound) { %>
                                    <option value="<%= sound.id %>"><%= sound.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit">Save Character</button>
    </form>
    <a href="/characters" class="button">Back to Characters</a>

    <script>
        function addPart() {
            moveOptions('available-parts-select', 'selected-parts-select');
        }

        function removePart() {
            moveOptions('selected-parts-select', 'available-parts-select');
        }

        function addSound() {
            moveOptions('available-sounds-select', 'selected-sounds-select');
        }

        function removeSound() {
            moveOptions('selected-sounds-select', 'available-sounds-select');
        }

        function moveOptions(fromId, toId) {
            const fromSelect = document.getElementById(fromId);
            const toSelect = document.getElementById(toId);
            
            for (let option of Array.from(fromSelect.selectedOptions)) {
                toSelect.add(option);
                option.selected = false;
            }
            updateAvailableOptions();
        }

        function updateAvailableOptions() {
            const availableParts = document.getElementById('available-parts-select');
            const selectedParts = document.getElementById('selected-parts-select');
            const availableSounds = document.getElementById('available-sounds-select');
            const selectedSounds = document.getElementById('selected-sounds-select');

            for (let option of availableParts.options) {
                option.disabled = Array.from(selectedParts.options).some(o => o.value === option.value);
            }

            for (let option of availableSounds.options) {
                option.disabled = Array.from(selectedSounds.options).some(o => o.value === option.value);
            }
        }

        // Ensure all options are selected before form submission
        document.querySelector('form').onsubmit = function() {
            const selectedParts = document.getElementById('selected-parts-select');
            const selectedSounds = document.getElementById('selected-sounds-select');
            
            for (let option of selectedParts.options) {
                option.selected = true;
            }
            
            for (let option of selectedSounds.options) {
                option.selected = true;
            }
            
            return true;
        };

        // Initialize available options
        updateAvailableOptions();
    </script>
</body>
</html>

================
File: views/characters.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <a href="/characters/new" class="button">Add New Character</a>
    <table>
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Parts</th>
                <th>Sounds</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% characters.forEach(function(character) { %>
                <tr>
                    <td>
                        <% if (character.image) { %>
                            <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 100px;">
                        <% } else { %>
                            No Image
                        <% } %>
                    </td>
                    <td><%= character.char_name %></td>
                    <td><%= character.char_description %></td>
                    <td>
                        <% character.parts.forEach(function(partId) { %>
                            <% const part = parts.find(p => p.id === partId); %>
                            <% if (part) { %>
                                <%= part.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <% character.sounds.forEach(function(soundId) { %>
                            <% const sound = sounds.find(s => s.id === soundId); %>
                            <% if (sound) { %>
                                <%= sound.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <a href="/characters/<%= character.id %>/edit" class="button">Edit</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>
</body>
</html>

================
File: views/index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <nav>
        <ul>
            <li><a href="/characters">Manage Characters</a></li>
            <li><a href="/scenes">Manage Scenes</a></li>
            <li><a href="/parts">Manage Parts</a></li>
            <li><a href="/sounds">Manage Sounds</a></li>
        </ul>
    </nav>
</body>
</html>

================
File: views/part-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part.name || '' %>" required>
        </div>
        <div>
            <label for="type">Type:</label>
            <select id="type" name="type" required>
                <option value="motor" <%= part.type === 'motor' ? 'selected' : '' %>>Motor</option>
                <option value="servo" <%= part.type === 'servo' ? 'selected' : '' %>>Servo</option>
                <option value="light" <%= part.type === 'light' ? 'selected' : '' %>>Light</option>
            </select>
        </div>
        <div>
            <label for="pin">GPIO Pin:</label>
            <input type="number" id="pin" name="pin" value="<%= part.pin || '' %>" required min="0" max="40">
        </div>
        <button type="submit">Save Part</button>
    </form>
    <a href="/parts" class="button">Back to Parts</a>
</body>
</html>

================
File: views/parts.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <a href="/parts/new" class="button">Add New Part</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Pin</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% parts.forEach(function(part) { %>
                <tr>
                    <td><%= part.name %></td>
                    <td><%= part.type %></td>
                    <td><%= part.pin %></td>
                    <td>
                        <a href="/parts/<%= part.id %>/edit" class="button">Edit</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>
</body>
</html>

================
File: views/scene-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (scene.id) { %>
            <input type="hidden" name="id" value="<%= scene.id %>">
        <% } %>
        <div>
            <label for="scene_name">Scene Name:</label>
            <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
        </div>
        <div>
            <label for="character_id">Character:</label>
            <select id="character_id" name="character_id" required onchange="updateCharacterParts()">
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div id="steps">
            <h3>Steps</h3>
            <button type="button" onclick="addStep()">Add Step</button>
            <div id="step-list" class="sortable"></div>
        </div>
        <input type="hidden" id="steps_json" name="steps" value="<%= JSON.stringify(scene.steps || []) %>">
        <button type="submit">Save Scene</button>
    </form>
    <a href="/scenes" class="button">Back to Scenes</a>

    <script>
        let stepCount = 0;
        const characterParts = {};
        const characterSounds = {};

        <% characters.forEach(function(character) { %>
            characterParts[<%= character.id %>] = [
                <% character.parts.forEach(function(partId) { %>
                    <% const part = parts.find(p => p.id === partId); %>
                    <% if (part) { %>
                        { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                    <% } %>
                <% }); %>
            ];
            characterSounds[<%= character.id %>] = [
                <% character.sounds.forEach(function(soundId) { %>
                    <% const sound = sounds.find(s => s.id === soundId); %>
                    <% if (sound) { %>
                        { id: <%= sound.id %>, name: "<%= sound.name %>" },
                    <% } %>
                <% }); %>
            ];
        <% }); %>

        function addStep() {
            const stepList = document.getElementById('step-list');
            const stepDiv = document.createElement('div');
            stepDiv.className = 'step';
            stepDiv.innerHTML = `
                <h4>Step ${++stepCount}</h4>
                <input type="text" class="step-name" placeholder="Step Name" onchange="updateStepsJson()">
                <label>
                    Concurrent:
                    <input type="checkbox" class="concurrent" onchange="updateStepsJson()">
                </label>
                <select class="action-type" onchange="updateActionFields(this)">
                    <option value="">Select Action</option>
                    <option value="sound">Play Sound</option>
                    <option value="motor">Move Motor</option>
                    <option value="servo">Move Servo</option>
                    <option value="light">Control Light</option>
                </select>
                <div class="action-fields"></div>
                <button type="button" onclick="removeStep(this)">Remove Step</button>
            `;
            stepList.appendChild(stepDiv);
            updateStepsJson();
        }

        function removeStep(button) {
            button.closest('.step').remove();
            updateStepsJson();
        }

        function updateActionFields(select) {
            const actionFields = select.nextElementSibling;
            const characterId = document.getElementById('character_id').value;
            const actionType = select.value;

            actionFields.innerHTML = '';

            if (actionType === 'sound') {
                const sounds = characterSounds[characterId];
                actionFields.innerHTML += `
                    <select class="sound-id" onchange="updateStepsJson()">
                        ${sounds.map(sound => `<option value="${sound.id}">${sound.name}</option>`).join('')}
                    </select>
                `;
            } else if (['motor', 'servo', 'light'].includes(actionType)) {
                const parts = characterParts[characterId].filter(part => part.type === actionType);
                actionFields.innerHTML += `
                    <select class="part-id" onchange="updateStepsJson()">
                        ${parts.map(part => `<option value="${part.id}">${part.name}</option>`).join('')}
                    </select>
                `;

                if (actionType === 'motor') {
                    actionFields.innerHTML += `
                        <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                        <select class="direction" onchange="updateStepsJson()">
                            <option value="F">Forward</option>
                            <option value="R">Reverse</option>
                        </select>
                        <input type="number" class="speed" placeholder="Speed (0-100)" min="0" max="100" onchange="updateStepsJson()">
                    `;
                } else if (actionType === 'servo') {
                    actionFields.innerHTML += `
                        <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                        <input type="number" class="angle" placeholder="Angle (0-180)" min="0" max="180" onchange="updateStepsJson()">
                    `;
                } else if (actionType === 'light') {
                    actionFields.innerHTML += `
                        <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                        <select class="state" onchange="updateStepsJson()">
                            <option value="On">On</option>
                            <option value="Off">Off</option>
                        </select>
                        <input type="number" class="level" placeholder="Level (0-100)" min="0" max="100" onchange="updateStepsJson()">
                    `;
                }
            }

            updateStepsJson();
        }

        function updateStepsJson() {
            const steps = [];
            document.querySelectorAll('.step').forEach((stepDiv, index) => {
                const step = {
                    name: stepDiv.querySelector('.step-name').value,
                    concurrent: stepDiv.querySelector('.concurrent').checked,
                    type: stepDiv.querySelector('.action-type').value
                };

                if (step.type === 'sound') {
                    step.sound_id = stepDiv.querySelector('.sound-id').value;
                } else if (['motor', 'servo', 'light'].includes(step.type)) {
                    step.part_id = parseInt(stepDiv.querySelector('.part-id').value);
                    step.duration = parseInt(stepDiv.querySelector('.duration').value);

                    if (step.type === 'motor') {
                        step.direction = stepDiv.querySelector('.direction').value;
                        step.speed = parseInt(stepDiv.querySelector('.speed').value);
                    } else if (step.type === 'servo') {
                        step.angle = parseInt(stepDiv.querySelector('.angle').value);
                    } else if (step.type === 'light') {
                        step.state = stepDiv.querySelector('.state').value;
                        step.level = parseInt(stepDiv.querySelector('.level').value);
                    }
                }

                steps.push(step);
            });

            document.getElementById('steps_json').value = JSON.stringify(steps);
        }

        function updateCharacterParts() {
            const characterId = document.getElementById('character_id').value;
            document.querySelectorAll('.step').forEach(stepDiv => {
                const actionType = stepDiv.querySelector('.action-type').value;
                if (actionType) {
                    updateActionFields(stepDiv.querySelector('.action-type'));
                }
            });
        }

        // Load existing steps if editing a scene
        const existingSteps = <%= JSON.stringify(scene.steps || []) %>;
        existingSteps.forEach(step => {
            addStep();
            const stepDiv = document.querySelector('.step:last-of-type');
            stepDiv.querySelector('.step-name').value = step.name || '';
            stepDiv.querySelector('.concurrent').checked = step.concurrent;
            stepDiv.querySelector('.action-type').value = step.type;
            updateActionFields(stepDiv.querySelector('.action-type'));
            
            if (step.type === 'sound') {
                stepDiv.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                stepDiv.querySelector('.part-id').value = step.part_id;
                stepDiv.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    stepDiv.querySelector('.direction').value = step.direction;
                    stepDiv.querySelector('.speed').value = step.speed;
                } else if (step.type === 'servo') {
                    stepDiv.querySelector('.angle').value = step.angle;
                } else if (step.type === 'light') {
                    stepDiv.querySelector('.state').value = step.state;
                    stepDiv.querySelector('.level').value = step.level;
                }
            }
        });

        updateStepsJson();

        // Make steps sortable
        $(function() {
            $("#step-list").sortable({
                update: function(event, ui) {
                    updateStepsJson();
                }
            });
        });
    </script>
</body>
</html>

================
File: views/scenes.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <a href="/scenes/new" class="button">Add New Scene</a>
    <table>
        <thead>
            <tr>
                <th>Scene Name</th>
                <th>Character</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% scenes.forEach(function(scene) { %>
                <tr>
                    <td><%= scene.scene_name %></td>
                    <td>
                        <% const character = characters.find(c => c.id === scene.character_id); %>
                        <%= character ? character.char_name : 'Unknown' %>
                    </td>
                    <td>
                        <a href="/scenes/<%= scene.id %>/edit" class="button">Edit</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>
</body>
</html>

================
File: views/sound-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (sound.id) { %>
            <input type="hidden" name="id" value="<%= sound.id %>">
        <% } %>
        <div>
            <label for="name">Sound Name:</label>
            <input type="text" id="name" name="name" value="<%= sound.name || '' %>" required>
        </div>
        <div>
            <label for="sound_file">Sound File (MP3):</label>
            <input type="file" id="sound_file" name="sound_file" accept=".mp3" <%= sound.id ? '' : 'required' %>>
        </div>
        <% if (sound.id && sound.filename) { %>
            <div>
                <p>Current file: <%= sound.filename %></p>
                <audio controls>
                    <source src="/sounds/<%= sound.filename %>" type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
            </div>
        <% } %>
        <button type="submit">Save Sound</button>
    </form>
    <a href="/sounds" class="button">Back to Sounds</a>
</body>
</html>

================
File: views/sounds.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sounds/new" class="button">Add New Sound</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Filename</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sounds.forEach(function(sound) { %>
                <tr>
                    <td><%= sound.name %></td>
                    <td><%= sound.filename %></td>
                    <td>
                        <a href="/sounds/<%= sound.id %>/edit" class="button">Edit</a>
                        <audio controls>
                            <source src="/sounds/<%= sound.filename %>" type="audio/mpeg">
                            Your browser does not support the audio element.
                        </audio>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>
</body>
</html>

================
File: app.js
================
const express = require('express');
const dataManager = require('./dataManager');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const app = express();
const port = 3000;

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        if (file.fieldname === "sound_file") {
            cb(null, 'public/sounds/');
        } else if (file.fieldname === "character_image") {
            cb(null, 'public/images/characters/');
        }
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

// Basic Express setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Main menu route
app.get('/', (req, res) => {
    res.render('index', { title: 'MonsterBox Control Panel' });
});

// Characters routes
app.get('/characters', async (req, res) => {
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    res.render('characters', { title: 'Characters', characters, parts, sounds });
});

app.get('/characters/new', async (req, res) => {
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    res.render('character-form', { title: 'Add New Character', action: '/characters', character: {}, parts, sounds });
});

app.get('/characters/:id/edit', async (req, res) => {
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    const character = characters.find(c => c.id === parseInt(req.params.id));
    if (character) {
        res.render('character-form', { title: 'Edit Character', action: '/characters/' + character.id, character, parts, sounds });
    } else {
        res.status(404).send('Character not found');
    }
});

app.post('/characters', upload.single('character_image'), async (req, res) => {
    const characters = await dataManager.getCharacters();
    const newCharacter = {
        id: dataManager.getNextId(characters),
        char_name: req.body.char_name,
        char_description: req.body.char_description,
        parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : [],
        sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : [],
        image: req.file ? req.file.filename : null
    };
    characters.push(newCharacter);
    await dataManager.saveCharacters(characters);
    res.redirect('/characters');
});

app.post('/characters/:id', upload.single('character_image'), async (req, res) => {
    const id = parseInt(req.params.id);
    const characters = await dataManager.getCharacters();
    const index = characters.findIndex(c => c.id === id);
    if (index !== -1) {
        const oldImage = characters[index].image;
        characters[index] = {
            id: id,
            char_name: req.body.char_name,
            char_description: req.body.char_description,
            parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : [],
            sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : [],
            image: req.file ? req.file.filename : oldImage
        };
        if (req.file && oldImage) {
            try {
                await fs.unlink(path.join('public', 'images', 'characters', oldImage));
            } catch (error) {
                console.error('Error deleting old image:', error);
            }
        }
        await dataManager.saveCharacters(characters);
        res.redirect('/characters');
    } else {
        res.status(404).send('Character not found');
    }
});

// Scenes routes
app.get('/scenes', async (req, res) => {
    const scenes = await dataManager.getScenes();
    const characters = await dataManager.getCharacters();
    res.render('scenes', { title: 'Scenes', scenes, characters });
});

app.get('/scenes/new', async (req, res) => {
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    res.render('scene-form', { title: 'Add New Scene', action: '/scenes', scene: {}, characters, parts, sounds });
});

app.get('/scenes/:id/edit', async (req, res) => {
    const scenes = await dataManager.getScenes();
    const characters = await dataManager.getCharacters();
    const parts = await dataManager.getParts();
    const sounds = await dataManager.getSounds();
    const scene = scenes.find(s => s.id === parseInt(req.params.id));
    if (scene) {
        res.render('scene-form', { title: 'Edit Scene', action: '/scenes/' + scene.id, scene, characters, parts, sounds });
    } else {
        res.status(404).send('Scene not found');
    }
});

app.post('/scenes', async (req, res) => {
    const scenes = await dataManager.getScenes();
    const newScene = {
        id: dataManager.getNextId(scenes),
        scene_name: req.body.scene_name,
        character_id: parseInt(req.body.character_id),
        steps: JSON.parse(req.body.steps)
    };
    scenes.push(newScene);
    await dataManager.saveScenes(scenes);
    res.redirect('/scenes');
});

app.post('/scenes/:id', async (req, res) => {
    const id = parseInt(req.params.id);
    const scenes = await dataManager.getScenes();
    const index = scenes.findIndex(s => s.id === id);
    if (index !== -1) {
        scenes[index] = {
            id: id,
            scene_name: req.body.scene_name,
            character_id: parseInt(req.body.character_id),
            steps: JSON.parse(req.body.steps)
        };
        await dataManager.saveScenes(scenes);
        res.redirect('/scenes');
    } else {
        res.status(404).send('Scene not found');
    }
});

// Parts routes
app.get('/parts', async (req, res) => {
    const parts = await dataManager.getParts();
    res.render('parts', { title: 'Parts', parts });
});

app.get('/parts/new', (req, res) => {
    res.render('part-form', { title: 'Add New Part', action: '/parts', part: {} });
});

app.get('/parts/:id/edit', async (req, res) => {
    const parts = await dataManager.getParts();
    const part = parts.find(p => p.id === parseInt(req.params.id));
    if (part) {
        res.render('part-form', { title: 'Edit Part', action: '/parts/' + part.id, part });
    } else {
        res.status(404).send('Part not found');
    }
});

app.post('/parts', async (req, res) => {
    const parts = await dataManager.getParts();
    const newPart = {
        id: dataManager.getNextId(parts),
        name: req.body.name,
        type: req.body.type,
        pin: parseInt(req.body.pin)
    };
    parts.push(newPart);
    await dataManager.saveParts(parts);
    res.redirect('/parts');
});

app.post('/parts/:id', async (req, res) => {
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts[index] = {
            id: id,
            name: req.body.name,
            type: req.body.type,
            pin: parseInt(req.body.pin)
        };
        await dataManager.saveParts(parts);
        res.redirect('/parts');
    } else {
        res.status(404).send('Part not found');
    }
});

// Sounds routes
app.get('/sounds', async (req, res) => {
    const sounds = await dataManager.getSounds();
    res.render('sounds', { title: 'Sounds', sounds });
});

app.get('/sounds/new', (req, res) => {
    res.render('sound-form', { title: 'Add New Sound', action: '/sounds', sound: {} });
});

app.get('/sounds/:id/edit', async (req, res) => {
    const sounds = await dataManager.getSounds();
    const sound = sounds.find(s => s.id === parseInt(req.params.id));
    if (sound) {
        res.render('sound-form', { title: 'Edit Sound', action: '/sounds/' + sound.id, sound });
    } else {
        res.status(404).send('Sound not found');
    }
});

app.post('/sounds', upload.single('sound_file'), async (req, res) => {
    const sounds = await dataManager.getSounds();
    const newSound = {
        id: dataManager.getNextId(sounds),
        name: req.body.name,
        filename: req.file.filename
    };
    sounds.push(newSound);
    await dataManager.saveSounds(sounds);
    res.redirect('/sounds');
});

app.post('/sounds/:id', upload.single('sound_file'), async (req, res) => {
    const id = parseInt(req.params.id);
    const sounds = await dataManager.getSounds();
    const index = sounds.findIndex(s => s.id === id);
    if (index !== -1) {
        const oldFilename = sounds[index].filename;
        sounds[index] = {
            id: id,
            name: req.body.name,
            filename: req.file ? req.file.filename : oldFilename
        };
        if (req.file) {
            try {
                await fs.unlink(path.join('public', 'sounds', oldFilename));
            } catch (error) {
                console.error('Error deleting old sound file:', error);
            }
        }
        await dataManager.saveSounds(sounds);
        res.redirect('/sounds');
    } else {
        res.status(404).send('Sound not found');
    }
});

// Start the server
app.listen(port, () => {
    console.log(`MonsterBox server running at http://localhost:${port}`);
});

================
File: dataManager.js
================
const fs = require('fs').promises;
const path = require('path');

const dataDir = path.join(__dirname, 'data');

const readData = async (filename) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            // File doesn't exist, return an empty array
            return [];
        }
        throw error;
    }
};

const writeData = async (filename, data) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
};

const getNextId = (items) => {
    return items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1;
};

module.exports = {
    getCharacters: () => readData('characters'),
    getScenes: () => readData('scenes'),
    getParts: () => readData('parts'),
    getSounds: () => readData('sounds'),
    saveCharacters: (data) => writeData('characters', data),
    saveScenes: (data) => writeData('scenes', data),
    saveParts: (data) => writeData('parts', data),
    saveSounds: (data) => writeData('sounds', data),
    getNextId
};

================
File: package.json
================
{
  "dependencies": {
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "gpio": "^0.2.10",
    "multer": "^1.4.5-lts.1"
  }
}

================
File: README.md
================
# MonsterBox
