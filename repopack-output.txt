================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-21T23:14:23.973Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    node.js.yml
controllers/
  sceneController.js
data/
  armedSensors.json
  characters.json
  motor_settings.json
  parts.json
  scenes.json
  sensors.json
  sounds.json
public/
  css/
    style.css
routes/
  activeModeRoutes.js
  characterRoutes.js
  motorRoutes.js
  partRoutes.js
  sceneRoutes.js
  sensorRoutes.js
  soundRoutes.js
scripts/
  active_mode_monitor.py
  list_audio_devices.py
  motor_control.py
  play_sound.py
  sensor_control.py
  sound_detection.py
  test_sensor.py
  test_sound_sensor.py
services/
  sceneService.js
test/
  sceneService.test.js
views/
  partials/
    character-selection.ejs
    step-form.ejs
    step-list.ejs
  active-mode.ejs
  character-form.ejs
  characters.ejs
  index.ejs
  motor-index.ejs
  part-form.ejs
  parts.ejs
  scene-form.ejs
  scenes.ejs
  sensor-form.ejs
  sensor-test.ejs
  sensors.ejs
  sound-form.ejs
  sounds.ejs
.gitignore
app.js
dataManager.js
motor_control.py
motor_settings.json
package.json
README.md
sensor_control.py
server.js

================================================================
Repository Files
================================================================

================
File: .github/workflows/node.js.yml
================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

================
File: controllers/sceneController.js
================
const {
    getAllScenes,
    getScene,
    saveScene,
    removeScene,
    addStepToScene,
    updateStepInScene,
    removeStepFromScene,
    getAllCharacters,
    getAllParts,
    getAllSounds
} = require('../services/sceneService');

exports.getScenes = async (req, res) => {
    try {
        const scenes = await getAllScenes();
        const characters = await getAllCharacters();
        res.render('scenes', { 
            title: 'Scenes',
            scenes,
            characters
        });
    } catch (error) {
        console.error('Error fetching scenes:', error);
        res.status(500).send('Something broke!');
    }
};

exports.getSceneById = async (req, res) => {
    try {
        const scene = await getScene(req.params.id);
        const characters = await getAllCharacters();
        const parts = await getAllParts();
        const sounds = await getAllSounds();
        if (scene) {
            res.render('scene-form', { 
                title: 'Edit Scene',
                scene, 
                action: `/scenes/${scene.id}`, 
                characters, 
                parts, 
                sounds 
            });
        } else {
            res.status(404).send('Scene not found');
        }
    } catch (error) {
        console.error('Error fetching scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.newScene = async (req, res) => {
    try {
        const characters = await getAllCharacters();
        const parts = await getAllParts();
        const sounds = await getAllSounds();
        res.render('scene-form', { 
            title: 'New Scene',
            scene: {},
            action: '/scenes',
            characters, 
            parts, 
            sounds 
        });
    } catch (error) {
        console.error('Error rendering new scene form:', error);
        res.status(500).send('Something broke!');
    }
};

exports.createScene = async (req, res) => {
    try {
        const scene = await saveScene(req.body);
        res.redirect('/scenes');
    } catch (error) {
        console.error('Error creating scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.updateScene = async (req, res) => {
    try {
        const scene = await saveScene(req.body, req.params.id);
        res.redirect('/scenes');
    } catch (error) {
        console.error('Error updating scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.deleteScene = async (req, res) => {
    try {
        await removeScene(req.params.id);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error deleting scene:', error);
        res.status(500).send('Something broke!');
    }
};

exports.addStep = async (req, res) => {
    try {
        const scene = await addStepToScene(req.params.id, req.body);
        res.json(scene);
    } catch (error) {
        console.error('Error adding step:', error);
        res.status(500).send('Something broke!');
    }
};

exports.updateStep = async (req, res) => {
    try {
        const scene = await updateStepInScene(req.params.sceneId, req.params.stepIndex, req.body);
        res.json(scene);
    } catch (error) {
        console.error('Error updating step:', error);
        res.status(500).send('Something broke!');
    }
};

exports.deleteStep = async (req, res) => {
    try {
        const scene = await removeStepFromScene(req.params.sceneId, req.params.stepIndex);
        res.json(scene);
    } catch (error) {
        console.error('Error deleting step:', error);
        res.status(500).send('Something broke!');
    }
};

================
File: data/armedSensors.json
================
[
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 2,
    "sceneId": 2
  },
  {
    "sensorId": 2,
    "sceneId": 2
  },
  {
    "sensorId": 2,
    "sceneId": 2
  },
  {
    "sensorId": 2,
    "sceneId": 2
  }
]

================
File: data/characters.json
================
[
  {
    "id": 1,
    "char_name": "Satan Himself",
    "char_description": "Baphomet Findel Version - Sunday",
    "parts": [
      1
    ],
    "sounds": [
      4
    ],
    "image": "1724021922597.jpg"
  }
]

================
File: data/motor_settings.json
================
{
  "dirPin": 18,
  "pwmPin": 24
}

================
File: data/parts.json
================
[
  {
    "id": 1,
    "name": "Right Arm",
    "type": "motor",
    "characterId": 1,
    "directionPin": 18,
    "pwmPin": 24
  },
  {
    "id": 2,
    "name": "Left Arm",
    "type": "sensor",
    "characterId": 1,
    "sensorType": "motion",
    "gpioPin": 16
  }
]

================
File: data/scenes.json
================
[
  {
    "scene_name": "Baphomet Arises",
    "character_id": 1,
    "steps": [
      {
        "name": "Arm Up",
        "type": "motor",
        "part_id": 1,
        "duration": 2000,
        "direction": "forward",
        "speed": 25
      },
      {
        "name": "Say Hello!",
        "type": "sound",
        "sound_id": 4,
        "concurrent": true
      },
      {
        "name": "Arm Down Faster",
        "type": "motor",
        "part_id": 1,
        "duration": 500,
        "direction": "backward",
        "speed": 100
      }
    ],
    "id": 1
  }
]

================
File: data/sensors.json
================
[]

================
File: data/sounds.json
================
[
  {
    "id": 4,
    "name": "Igor Intro",
    "filename": "1723850096055.mp3"
  },
  {
    "id": 5,
    "name": "Chains",
    "filename": "1723924039676.mp3"
  }
]

================
File: public/css/style.css
================
body {
    font-family: 'Courier New', Courier, monospace;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #000000;
    color: #00ff00;
}

h1, h2, h3, h4, h5, h6 {
    color: #00ff00;
    text-shadow: 0 0 5px #00ff00;
}

a {
    color: #00ffff;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
    text-shadow: 0 0 5px #00ffff;
}

.button {
    display: inline-block;
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    margin: 10px 0;
}

.button:hover {
    background-color: #004400;
    text-decoration: none;
    box-shadow: 0 0 10px #00ff00;
}

form {
    background-color: #001100;
    padding: 20px;
    border-radius: 5px;
    border: 1px solid #00ff00;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"],
input[type="number"],
textarea,
select {
    width: 100%;
    padding: 8px;
    border: 1px solid #00ff00;
    border-radius: 4px;
    background-color: #000000;
    color: #00ff00;
    box-sizing: border-box;
}

button {
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #004400;
    box-shadow: 0 0 10px #00ff00;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #001100;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

table, th, td {
    border: 1px solid #00ff00;
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #002200;
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #001800;
}

#parts-container, #sounds-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

#available-parts, #selected-parts, #available-sounds, #selected-sounds {
    width: 40%;
}

#available-parts select, #selected-parts select, #available-sounds select, #selected-sounds select {
    width: 100%;
    height: 200px;
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
}

#parts-container > div:nth-child(2), #sounds-container > div:nth-child(2) {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#parts-container button, #sounds-container button {
    margin: 5px;
}

input[type="file"] {
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 5px;
    border-radius: 4px;
}

option {
    background-color: #001100;
    color: #00ff00;
}

input:focus, textarea:focus, select:focus {
    outline: none;
    box-shadow: 0 0 5px #00ff00;
}

================
File: routes/activeModeRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { spawn } = require('child_process');
const path = require('path');

let activeModeProcess = null;

router.get('/', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const sensors = await dataManager.getSensors();
        const scenes = await dataManager.getScenes();
        const armedSensors = await dataManager.getArmedSensors();
        res.render('active-mode', { title: 'Active Mode', characters, sensors, scenes, armedSensors });
    } catch (error) {
        console.error('Error in GET /active-mode route:', error);
        res.status(500).send('An error occurred while loading the active mode page: ' + error.message);
    }
});

router.post('/toggle-sensor', async (req, res) => {
    try {
        const { sensorId, active } = req.body;
        const sensors = await dataManager.getSensors();
        const sensorIndex = sensors.findIndex(s => s.id === parseInt(sensorId));
        if (sensorIndex !== -1) {
            sensors[sensorIndex].active = active;
            await dataManager.saveSensors(sensors);
            res.sendStatus(200);
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error in POST /active-mode/toggle-sensor route:', error);
        res.status(500).send('An error occurred while toggling the sensor: ' + error.message);
    }
});

router.post('/arm-sensor', async (req, res) => {
    try {
        const { sensorId, sceneId } = req.body;
        const armedSensors = await dataManager.getArmedSensors();
        const newArmedSensor = { sensorId: parseInt(sensorId), sceneId: parseInt(sceneId) };
        armedSensors.push(newArmedSensor);
        await dataManager.saveArmedSensors(armedSensors);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error in POST /active-mode/arm-sensor route:', error);
        res.status(500).send('An error occurred while arming the sensor: ' + error.message);
    }
});

router.get('/armed-sensors', async (req, res) => {
    try {
        const armedSensors = await dataManager.getArmedSensors();
        res.json(armedSensors);
    } catch (error) {
        console.error('Error in GET /active-mode/armed-sensors route:', error);
        res.status(500).send('An error occurred while fetching armed sensors: ' + error.message);
    }
});

router.post('/start', (req, res) => {
    if (activeModeProcess) {
        return res.status(400).send('Active Mode is already running');
    }

    const scriptPath = path.join('/home/remote/monsterbox/MonsterBox/scripts', 'active_mode_monitor.py');
    activeModeProcess = spawn('python3', [scriptPath]);

    let errorOutput = '';
    let startupTimeout = setTimeout(() => {
        if (activeModeProcess) {
            activeModeProcess.kill();
            activeModeProcess = null;
            res.status(500).send('Active Mode failed to start: ' + errorOutput);
        }
    }, 5000);

    activeModeProcess.stdout.on('data', (data) => {
        console.log(`Active Mode Monitor: ${data}`);
        if (data.toString().includes("Starting Active Mode Monitor")) {
            clearTimeout(startupTimeout);
            res.sendStatus(200);
        }
    });

    activeModeProcess.stderr.on('data', (data) => {
        console.error(`Active Mode Monitor Error: ${data}`);
        errorOutput += data.toString();
    });

    activeModeProcess.on('close', (code) => {
        console.log(`Active Mode Monitor process exited with code ${code}`);
        activeModeProcess = null;
        clearTimeout(startupTimeout);
        if (!res.headersSent) {
            res.status(500).send('Active Mode failed to start: ' + errorOutput);
        }
    });
});

router.post('/stop', (req, res) => {
    if (!activeModeProcess) {
        return res.status(400).send('Active Mode is not running');
    }

    activeModeProcess.kill();
    activeModeProcess = null;
    res.sendStatus(200);
});

module.exports = router;

================
File: routes/characterRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const fs = require('fs').promises;
const path = require('path');
const multer = require('multer');

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/images/characters/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

router.get('/', async (req, res) => {
    try {
        console.log('GET /characters route hit');
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        console.log('Preparing to render characters page...');
        res.render('characters', { 
            title: 'Characters', 
            characters, 
            parts, 
            sounds
        });
    } catch (error) {
        console.error('Error in GET /characters route:', error);
        res.status(500).send('An error occurred while loading the characters page: ' + error.message);
    }
});

router.get('/new', async (req, res) => {
    try {
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        res.render('character-form', { 
            title: 'Add New Character', 
            action: '/characters', 
            character: {}, 
            parts, 
            sounds 
        });
    } catch (error) {
        console.error('Error in GET /characters/new route:', error);
        res.status(500).send('An error occurred while loading the new character form: ' + error.message);
    }
});

router.get('/:id/edit', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        const character = characters.find(c => c.id === parseInt(req.params.id));
        if (character) {
            res.render('character-form', { 
                title: 'Edit Character', 
                action: '/characters/' + character.id, 
                character, 
                parts, 
                sounds 
            });
        } else {
            res.status(404).send('Character not found');
        }
    } catch (error) {
        console.error('Error in GET /characters/:id/edit route:', error);
        res.status(500).send('An error occurred while loading the edit character form: ' + error.message);
    }
});

router.post('/', upload.single('character_image'), async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const newCharacter = {
            id: dataManager.getNextId(characters),
            char_name: req.body.char_name,
            char_description: req.body.char_description,
            parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : req.body.parts ? [Number(req.body.parts)] : [],
            sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : req.body.sounds ? [Number(req.body.sounds)] : [],
            image: req.file ? req.file.filename : null
        };
        characters.push(newCharacter);
        await dataManager.saveCharacters(characters);
        res.redirect('/characters');
    } catch (error) {
        console.error('Error in POST /characters route:', error);
        res.status(500).send('An error occurred while creating the character: ' + error.message);
    }
});

router.post('/:id', upload.single('character_image'), async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const characters = await dataManager.getCharacters();
        const index = characters.findIndex(c => c.id === id);
        if (index !== -1) {
            const oldImage = characters[index].image;
            characters[index] = {
                id: id,
                char_name: req.body.char_name,
                char_description: req.body.char_description,
                parts: Array.isArray(req.body.parts) ? req.body.parts.map(Number) : req.body.parts ? [Number(req.body.parts)] : [],
                sounds: Array.isArray(req.body.sounds) ? req.body.sounds.map(Number) : req.body.sounds ? [Number(req.body.sounds)] : [],
                image: req.file ? req.file.filename : oldImage
            };
            if (req.file && oldImage) {
                try {
                    await fs.unlink(path.join('public', 'images', 'characters', oldImage));
                } catch (error) {
                    console.error('Error deleting old image:', error);
                }
            }
            await dataManager.saveCharacters(characters);
            res.redirect('/characters');
        } else {
            res.status(404).send('Character not found');
        }
    } catch (error) {
        console.error('Error in POST /characters/:id route:', error);
        res.status(500).send('An error occurred while updating the character: ' + error.message);
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        console.log('DELETE /characters/:id route hit. ID:', req.params.id);
        const id = parseInt(req.params.id);
        const characters = await dataManager.getCharacters();
        const index = characters.findIndex(c => c.id === id);
        if (index !== -1) {
            const character = characters[index];
            if (character.image) {
                try {
                    await fs.unlink(path.join('public', 'images', 'characters', character.image));
                } catch (error) {
                    console.error('Error deleting character image:', error);
                }
            }
            characters.splice(index, 1);
            await dataManager.saveCharacters(characters);
            res.sendStatus(200);
        } else {
            res.status(404).send('Character not found');
        }
    } catch (error) {
        console.error('Error in POST /characters/:id/delete route:', error);
        res.status(500).send('An error occurred while deleting the character: ' + error.message);
    }
});

module.exports = router;

================
File: routes/motorRoutes.js
================
const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

const settingsFile = path.join(__dirname, '..', 'motor_settings.json');

async function getSettings() {
    try {
        const data = await fs.readFile(settingsFile, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            const defaultSettings = { dirPin: 18, pwmPin: 24 };
            await saveSettings(defaultSettings);
            return defaultSettings;
        }
        throw error;
    }
}

async function saveSettings(settings) {
    await fs.writeFile(settingsFile, JSON.stringify(settings, null, 2));
}

function controlMotor(direction, speed, duration, dirPin, pwmPin) {
    return new Promise((resolve, reject) => {
        const pythonScript = path.join(__dirname, '..', 'motor_control.py');
        const command = `sudo python3 ${pythonScript} ${direction} ${speed} ${duration} ${dirPin} ${pwmPin}`;

        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error: ${error.message}`);
                return reject(error);
            }
            if (stderr) {
                console.error(`stderr: ${stderr}`);
                return reject(new Error(stderr));
            }
            console.log(`stdout: ${stdout}`);
            resolve();
        });
    });
}

router.get('/', async (req, res) => {
    const settings = await getSettings();
    res.render('motor-index', { title: 'Motor Control Panel', settings });
});

router.post('/save-settings', async (req, res) => {
    const { dirPin, pwmPin } = req.body;
    await saveSettings({ dirPin: parseInt(dirPin), pwmPin: parseInt(pwmPin) });
    res.redirect('/motor');
});

router.post('/control-motor', async (req, res) => {
    const { direction, speed, duration, directionPin, pwmPin } = req.body;
    try {
        await controlMotor(direction, parseInt(speed), parseInt(duration), parseInt(directionPin), parseInt(pwmPin));
        res.sendStatus(200);
    } catch (error) {
        res.status(500).send(`Error controlling motor: ${error.message}`);
    }
});

module.exports = router;

================
File: routes/partRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { exec } = require('child_process');
const path = require('path');

router.get('/', async (req, res) => {
    const parts = await dataManager.getParts();
    const characters = await dataManager.getCharacters();
    res.render('parts', { title: 'Parts', parts, characters });
});

router.get('/new', async (req, res) => {
    const characters = await dataManager.getCharacters();
    res.render('part-form', { title: 'Add New Part', action: '/parts', part: {}, characters });
});

router.get('/:id/edit', async (req, res) => {
    const parts = await dataManager.getParts();
    const characters = await dataManager.getCharacters();
    const part = parts.find(p => p.id === parseInt(req.params.id));
    if (part) {
        res.render('part-form', { title: 'Edit Part', action: '/parts/' + part.id, part, characters });
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/', async (req, res) => {
    const parts = await dataManager.getParts();
    const newPart = {
        id: dataManager.getNextId(parts),
        name: req.body.name,
        type: req.body.type,
        characterId: parseInt(req.body.characterId)
    };

    if (req.body.type === 'motor') {
        newPart.directionPin = parseInt(req.body.directionPin);
        newPart.pwmPin = parseInt(req.body.pwmPin);
    } else if (req.body.type === 'sensor') {
        newPart.sensorType = req.body.sensorType;
        newPart.gpioPin = parseInt(req.body.gpioPin);
    } else {
        newPart.pin = parseInt(req.body.pin);
    }

    parts.push(newPart);
    await dataManager.saveParts(parts);
    res.redirect('/parts');
});

router.post('/:id', async (req, res) => {
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts[index] = {
            id: id,
            name: req.body.name,
            type: req.body.type,
            characterId: parseInt(req.body.characterId)
        };

        if (req.body.type === 'motor') {
            parts[index].directionPin = parseInt(req.body.directionPin);
            parts[index].pwmPin = parseInt(req.body.pwmPin);
        } else if (req.body.type === 'sensor') {
            parts[index].sensorType = req.body.sensorType;
            parts[index].gpioPin = parseInt(req.body.gpioPin);
        } else {
            parts[index].pin = parseInt(req.body.pin);
        }

        await dataManager.saveParts(parts);
        res.redirect('/parts');
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/:id/delete', async (req, res) => {
    console.log('DELETE /parts/:id route hit. ID:', req.params.id);
    const id = parseInt(req.params.id);
    const parts = await dataManager.getParts();
    const index = parts.findIndex(p => p.id === id);
    if (index !== -1) {
        parts.splice(index, 1);
        await dataManager.saveParts(parts);
        res.sendStatus(200);
    } else {
        res.status(404).send('Part not found');
    }
});

router.post('/test-sensor', (req, res) => {
    console.log('Test sensor route hit');
    console.log('Request body:', req.body);
    
    const { gpioPin } = req.body;
    const scriptPath = path.join(__dirname, '..', 'scripts', 'test_sensor.py');
    const command = `sudo python3 ${scriptPath} ${gpioPin}`;
    
    console.log('Command to be executed:', command);

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Exec error: ${error.message}`);
            return res.status(500).send(`Error executing command: ${error.message}`);
        }
        if (stderr) {
            console.error(`stderr: ${stderr}`);
            return res.status(500).send(`Error from Python script: ${stderr}`);
        }
        console.log(`stdout: ${stdout}`);
        res.status(200).send('Sensor test successful');
    });
});

module.exports = router;

================
File: routes/sceneRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');

router.get('/', async (req, res) => {
    try {
        const scenes = await dataManager.getScenes();
        const characters = await dataManager.getCharacters();
        res.render('scenes', { title: 'Scenes', scenes, characters });
    } catch (error) {
        console.error('Error fetching scenes:', error);
        res.status(500).send('Something broke!');
    }
});

router.get('/new', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        res.render('scene-form', { 
            title: 'New Scene',
            scene: { steps: [] },
            action: '/scenes',
            characters, 
            parts, 
            sounds 
        });
    } catch (error) {
        console.error('Error rendering new scene form:', error);
        res.status(500).send('Something broke!');
    }
});

router.get('/:id/edit', async (req, res) => {
    try {
        const scene = await dataManager.getScene(req.params.id);
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        const sounds = await dataManager.getSounds();
        if (scene) {
            res.render('scene-form', { 
                title: 'Edit Scene',
                scene, 
                action: `/scenes/${scene.id}`, 
                characters, 
                parts, 
                sounds 
            });
        } else {
            res.status(404).send('Scene not found');
        }
    } catch (error) {
        console.error('Error fetching scene:', error);
        res.status(500).send('Something broke!');
    }
});

router.post('/', async (req, res) => {
    try {
        const sceneData = {
            scene_name: req.body.scene_name,
            character_id: parseInt(req.body.character_id),
            steps: parseSteps(req.body.steps)
        };
        await dataManager.saveScene(sceneData);
        res.redirect('/scenes');
    } catch (error) {
        console.error('Error creating scene:', error);
        res.status(500).send('Something broke!');
    }
});

router.post('/:id', async (req, res) => {
    try {
        const sceneData = {
            id: parseInt(req.params.id),
            scene_name: req.body.scene_name,
            character_id: parseInt(req.body.character_id),
            steps: parseSteps(req.body.steps)
        };
        await dataManager.saveScene(sceneData);
        res.redirect('/scenes');
    } catch (error) {
        console.error('Error updating scene:', error);
        res.status(500).send('Something broke!');
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        await dataManager.removeScene(req.params.id);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error deleting scene:', error);
        res.status(500).send('Something broke!');
    }
});

function parseSteps(steps) {
    if (!Array.isArray(steps)) {
        steps = [steps];
    }
    return steps.map(step => ({
        name: step.name,
        type: step.type,
        ...(step.type === 'sound' ? {
            sound_id: parseInt(step.sound_id),
            concurrent: step.concurrent === 'on'
        } : {
            part_id: parseInt(step.part_id),
            duration: parseInt(step.duration),
            ...(step.type === 'motor' ? {
                direction: step.direction,
                speed: parseInt(step.speed)
            } : {})
        })
    }));
}

module.exports = router;

================
File: routes/sensorRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { spawn } = require('child_process');
const path = require('path');

router.get('/', async (req, res) => {
    try {
        const sensors = await dataManager.getSensors();
        const characters = await dataManager.getCharacters();
        res.render('sensors', { title: 'Sensors', sensors, characters });
    } catch (error) {
        console.error('Error fetching sensors:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/new', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        res.render('sensor-form', { title: 'Add New Sensor', action: '/sensors', sensor: {}, characters });
    } catch (error) {
        console.error('Error rendering new sensor form:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/:id/edit', async (req, res) => {
    try {
        const sensors = await dataManager.getSensors();
        const characters = await dataManager.getCharacters();
        const sensor = sensors.find(s => s.id === parseInt(req.params.id));
        if (sensor) {
            res.render('sensor-form', { title: 'Edit Sensor', action: '/sensors/' + sensor.id, sensor, characters });
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error fetching sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/', async (req, res) => {
    try {
        const sensors = await dataManager.getSensors();
        const newSensor = {
            id: dataManager.getNextId(sensors),
            name: req.body.name,
            type: req.body.type,
            characterId: parseInt(req.body.characterId),
            active: req.body.active === 'on',
            gpioPin: parseInt(req.body.gpioPin)
        };

        sensors.push(newSensor);
        await dataManager.saveSensors(sensors);
        res.redirect('/sensors');
    } catch (error) {
        console.error('Error creating sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sensors = await dataManager.getSensors();
        const index = sensors.findIndex(s => s.id === id);
        if (index !== -1) {
            sensors[index] = {
                id: id,
                name: req.body.name,
                type: req.body.type,
                characterId: parseInt(req.body.characterId),
                active: req.body.active === 'on',
                gpioPin: parseInt(req.body.gpioPin)
            };

            await dataManager.saveSensors(sensors);
            res.redirect('/sensors');
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error updating sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sensors = await dataManager.getSensors();
        const index = sensors.findIndex(s => s.id === id);
        if (index !== -1) {
            sensors.splice(index, 1);
            await dataManager.saveSensors(sensors);
            res.sendStatus(200);
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error deleting sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/:id/test', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sensors = await dataManager.getSensors();
        const sensor = sensors.find(s => s.id === id);
        
        if (!sensor) {
            return res.status(404).send('Sensor not found');
        }

        res.render('sensor-test', { title: 'Test Sensor', sensor });
    } catch (error) {
        console.error('Error rendering sensor test page:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/test', async (req, res) => {
    try {
        const sensorId = parseInt(req.query.id);
        const sensors = await dataManager.getSensors();
        const sensor = sensors.find(s => s.id === sensorId);

        if (!sensor) {
            return res.status(404).json({ error: 'Sensor not found' });
        }

        // Update sensor with new GPIO pin if provided
        if (req.query.gpioPin) {
            sensor.gpioPin = parseInt(req.query.gpioPin);
            await dataManager.saveSensors(sensors);
        }

        const scriptPath = path.join(__dirname, '..', 'scripts', 'test_sensor.py');
        
        res.writeHead(200, {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });

        const python = spawn('sudo', ['python3', scriptPath, sensor.gpioPin.toString()]);

        python.stdout.on('data', (data) => {
            res.write(`data: ${data}\n\n`);
        });

        python.stderr.on('data', (data) => {
            console.error(`Python script error: ${data}`);
            res.write(`data: ${JSON.stringify({ error: data.toString() })}\n\n`);
        });

        python.on('close', (code) => {
            console.log(`Python script exited with code ${code}`);
            res.write(`data: ${JSON.stringify({ done: true })}\n\n`);
            res.end();
        });

        req.on('close', () => {
            python.kill();
        });
    } catch (error) {
        console.error('Error testing sensor:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

module.exports = router;

================
File: routes/soundRoutes.js
================
const express = require('express');
const path = require('path');
const { exec } = require('child_process');
const dataManager = require('../dataManager');
const multer = require('multer');
const fs = require('fs').promises;
const router = express.Router();

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/sounds/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

router.get('/', async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        res.render('sounds', { title: 'Sounds', sounds });
    } catch (error) {
        console.error('Error fetching sounds:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/new', (req, res) => {
    res.render('sound-form', { title: 'Add New Sound', action: '/sounds' });
});

router.post('/', upload.single('sound_file'), async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        const newSound = {
            id: dataManager.getNextId(sounds),
            name: req.body.name,
            filename: req.file.filename
        };
        sounds.push(newSound);
        await dataManager.saveSounds(sounds);
        res.redirect('/sounds');
    } catch (error) {
        console.error('Error adding sound:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/play', async (req, res) => {
    try {
        const { soundId } = req.body;
        const sounds = await dataManager.getSounds();
        const sound = sounds.find(s => s.id === parseInt(soundId));

        if (sound) {
            const filePath = path.join(__dirname, '../public/sounds', sound.filename);
            const pythonScriptPath = path.join(__dirname, '../scripts/play_sound.py');

            console.log(`Attempting to play sound: ${filePath}`);

            // Call the Python script to play the sound
            exec(`python3 ${pythonScriptPath} "${filePath}"`, (error, stdout, stderr) => {
                if (error) {
                    console.error(`Error executing Python script: ${error.message}`);
                    console.error(`stderr: ${stderr}`);
                    return res.status(500).send(`Error playing sound: ${error.message}`);
                }
                if (stderr) {
                    console.error(`Error from Python script: ${stderr}`);
                    return res.status(500).send(`Error playing sound: ${stderr}`);
                }
                console.log(`Python script output: ${stdout}`);
                res.status(200).send('Playing sound on character');
            });
        } else {
            res.status(404).send('Sound not found');
        }
    } catch (error) {
        console.error('Error in /play route:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sounds = await dataManager.getSounds();
        const soundIndex = sounds.findIndex(s => s.id === id);
        
        if (soundIndex === -1) {
            return res.status(404).send('Sound not found');
        }

        const soundToDelete = sounds[soundIndex];
        const filePath = path.join(__dirname, '../public/sounds', soundToDelete.filename);

        // Delete the file
        try {
            await fs.unlink(filePath);
        } catch (error) {
            console.error('Error deleting sound file:', error);
            // If file doesn't exist, continue with deleting from the data
            if (error.code !== 'ENOENT') {
                return res.status(500).send('Error deleting sound file');
            }
        }

        // Remove the sound from the data array
        sounds.splice(soundIndex, 1);
        await dataManager.saveSounds(sounds);

        res.sendStatus(200);
    } catch (error) {
        console.error('Error deleting sound:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/stop', (req, res) => {
    exec('sudo killall -9 python3', (error, stdout, stderr) => {
        if (error) {
            console.error(`Error stopping sounds: ${error.message}`);
            return res.status(500).send('Error stopping sounds');
        }
        if (stderr) {
            console.error(`Error from killall: ${stderr}`);
            return res.status(500).send('Error stopping sounds');
        }
        res.status(200).send('All sounds stopped');
    });
});

module.exports = router;

================
File: scripts/active_mode_monitor.py
================
import RPi.GPIO as GPIO
import time
import json
import requests
from gpiozero import MotionSensor

# Load sensor and armed sensor data
try:
    with open('/home/remote/monsterbox/MonsterBox/data/sensors.json', 'r') as f:
        sensors = json.load(f)
except FileNotFoundError:
    print("sensors.json not found. Please make sure it exists and contains sensor data.")
    sensors = []

try:
    with open('/home/remote/monsterbox/MonsterBox/data/armedSensors.json', 'r') as f:
        armed_sensors = json.load(f)
except FileNotFoundError:
    print("armedSensors.json not found. Creating an empty file.")
    armed_sensors = []
    with open('/home/remote/monsterbox/MonsterBox/data/armedSensors.json', 'w') as f:
        json.dump(armed_sensors, f)

# Initialize GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Set up motion sensors
motion_sensors = {}
for sensor in sensors:
    if sensor['type'] == 'motion' and sensor.get('active', False):
        try:
            pin = sensor['gpioPin']
            GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
            motion_sensors[sensor['id']] = pin
            print(f"Set up motion sensor {sensor['id']} on GPIO pin {pin}")
        except Exception as e:
            print(f"Error setting up sensor {sensor['id']}: {str(e)}")

def trigger_scene(sensor_id, scene_id):
    print(f"Triggering scene {scene_id} for sensor {sensor_id}")
    try:
        requests.post('http://localhost:3000/scenes/trigger', json={'sensorId': sensor_id, 'sceneId': scene_id})
    except requests.exceptions.RequestException as e:
        print(f"Error triggering scene: {str(e)}")

try:
    print("Starting Active Mode Monitor")
    while True:
        for armed_sensor in armed_sensors:
            sensor_id = armed_sensor['sensorId']
            scene_id = armed_sensor['sceneId']
            if sensor_id in motion_sensors:
                if GPIO.input(motion_sensors[sensor_id]):
                    trigger_scene(sensor_id, scene_id)
                    time.sleep(1)  # Debounce
        time.sleep(0.1)  # Small delay to prevent CPU overuse

except KeyboardInterrupt:
    print("Stopping Active Mode Monitor")

finally:
    GPIO.cleanup()

================
File: scripts/list_audio_devices.py
================
import pyaudio
import json

def list_audio_devices():
    p = pyaudio.PyAudio()
    devices = []

    for i in range(p.get_device_count()):
        device_info = p.get_device_info_by_index(i)
        if device_info['maxInputChannels'] > 0:
            devices.append({
                'index': i,
                'name': device_info['name'],
                'channels': device_info['maxInputChannels']
            })

    p.terminate()
    print(json.dumps(devices))

if __name__ == "__main__":
    list_audio_devices()

================
File: scripts/motor_control.py
================
import RPi.GPIO as GPIO
import sys
import time
import logging
import json
import os

# Set up logging
logging.basicConfig(filename='motor_control.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Define the path to the motor settings file
settings_file_path = os.path.join(os.path.dirname(__file__), '../data/motor_settings.json')

def load_motor_settings():
    try:
        with open(settings_file_path, 'r') as file:
            settings = json.load(file)
        logging.info(f"Motor settings loaded successfully: {settings}")
        return settings
    except Exception as e:
        logging.error(f"Error loading motor settings: {str(e)}")
        raise

def control_motor(direction, speed, duration, dir_pin, pwm_pin):
    logging.info(f"Controlling motor: direction={direction}, speed={speed}, duration={duration}, dir_pin={dir_pin}, pwm_pin={pwm_pin}")
    
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(dir_pin, GPIO.OUT)
    GPIO.setup(pwm_pin, GPIO.OUT)

    pwm = GPIO.PWM(pwm_pin, 100)  # Use a default frequency of 100 Hz
    pwm.start(0)

    try:
        GPIO.output(dir_pin, GPIO.HIGH if direction == 'forward' else GPIO.LOW)
        pwm.ChangeDutyCycle(int(speed))
        time.sleep(int(duration) / 1000)  # Convert duration to seconds
        pwm.ChangeDutyCycle(0)
    except Exception as e:
        logging.error(f"Error controlling motor: {str(e)}")
        raise
    finally:
        pwm.stop()
        GPIO.cleanup([dir_pin, pwm_pin])

if __name__ == "__main__":
    try:
        # Load motor settings
        settings = load_motor_settings()
        
        if len(sys.argv) != 2:
            logging.error("Incorrect number of arguments")
            print("Usage: python motor_control.py <action>")
            sys.exit(1)
        
        action = sys.argv[1]

        # Extract motor parameters based on the action from settings
        direction = settings[action]['direction']
        speed = settings[action]['speed']
        duration = settings[action]['duration']
        dir_pin = settings[action]['dir_pin']
        pwm_pin = settings[action]['pwm_pin']

        # Control the motor using the parameters from the settings
        control_motor(direction, speed, duration, dir_pin, pwm_pin)
        print("Motor control successful")
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        print(f"Error: {str(e)}")
    finally:
        # Only clean up if GPIO was set up
        if GPIO.getmode() is not None:
            GPIO.cleanup()
            logging.info("GPIO cleanup completed")

================
File: scripts/play_sound.py
================
import sys
import pygame

def play_sound(file_path):
    try:
        pygame.mixer.init()  # Initialize the mixer with the default audio device
        print(f"Playing sound from file: {file_path}")
        pygame.mixer.music.load(file_path)
        pygame.mixer.music.play()

        while pygame.mixer.music.get_busy():  # Wait until the sound has finished playing
            pygame.time.Clock().tick(10)

        print("Sound playback finished.")
    except Exception as e:
        print(f"Error during sound playback: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python play_sound.py <file_path>")
        sys.exit(1)

    file_path = sys.argv[1]
    play_sound(file_path)

================
File: scripts/sensor_control.py
================
import RPi.GPIO as GPIO
import time
import json
import requests
import os
import sys

# Get the directory of the current script
script_dir = os.path.dirname(os.path.abspath(__file__))

# Load sensor settings
sensors_file = os.path.join(script_dir, '..', 'data', 'sensors.json')
with open(sensors_file, 'r') as f:
    sensors = json.load(f)

# Initialize GPIO
GPIO.setmode(GPIO.BCM)

# Set up motion sensors
for sensor in sensors:
    if sensor['type'] == 'motion' and sensor['active']:
        GPIO.setup(sensor['digitalOutPin'], GPIO.IN)

# Function to check if a scene is currently playing
def is_scene_playing():
    # This function should check if a scene is currently being played
    # You'll need to implement this based on your scene playback system
    return False

# Function to trigger a scene
def trigger_scene(sensor_id):
    # This function should trigger the appropriate scene for the given sensor
    # You'll need to implement this based on your scene playback system
    print(f"Triggering scene for sensor {sensor_id}")
    requests.post('http://localhost:3000/scenes/trigger', json={'sensorId': sensor_id})

# Function to detect sound (placeholder)
def detect_sound(sensor):
    # This is a placeholder function. Actual sound detection should be implemented
    # in a separate script that's only run when needed.
    print(f"Sound detection for sensor {sensor['id']} is not implemented in this script.")
    return False

try:
    while True:
        if not is_scene_playing():
            for sensor in sensors:
                if sensor['active']:
                    if sensor['type'] == 'motion':
                        if GPIO.input(sensor['digitalOutPin']):
                            trigger_scene(sensor['id'])
                            time.sleep(1)  # Debounce
                    elif sensor['type'] == 'sound':
                        # Sound detection is not implemented in this main loop
                        # It should be handled separately to avoid audio system issues
                        pass
        time.sleep(0.1)  # Small delay to prevent CPU overuse

except KeyboardInterrupt:
    print("Stopping sensor monitoring")

finally:
    GPIO.cleanup()

================
File: scripts/sound_detection.py
================
import pyaudio
import numpy as np
import sys
import json

def detect_sound(sensitivity):
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
    
    try:
        data = np.frombuffer(stream.read(1024), dtype=np.int16)
        sound_level = np.abs(data).mean()
        is_active = sound_level > sensitivity
    except Exception as e:
        print(f"Error detecting sound: {str(e)}", file=sys.stderr)
        is_active = False
    finally:
        stream.stop_stream()
        stream.close()
        p.terminate()
    
    return is_active

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python sound_detection.py <sensitivity>", file=sys.stderr)
        sys.exit(1)
    
    sensitivity = int(sys.argv[1])
    result = detect_sound(sensitivity)
    print(json.dumps({"isActive": result}))

================
File: scripts/test_sensor.py
================
from gpiozero import MotionSensor
import json
import sys
import time

def test_motion_sensor(pin, duration=30):
    pir = MotionSensor(pin)
    end_time = time.time() + duration

    while time.time() < end_time:
        if pir.motion_detected:
            print(json.dumps({"status": "Motion Detected"}), flush=True)
        else:
            print(json.dumps({"status": "No Motion"}), flush=True)
        time.sleep(0.5)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(json.dumps({"error": "Usage: python test_sensor.py <pin>"}), file=sys.stderr)
        sys.exit(1)
    
    try:
        pin = int(sys.argv[1])
        test_motion_sensor(pin)
    except ValueError:
        print(json.dumps({"error": "Invalid GPIO pin number"}), file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(json.dumps({"error": str(e)}), file=sys.stderr)
        sys.exit(1)

================
File: scripts/test_sound_sensor.py
================
import pyaudio
import numpy as np
import curses
import sys
import json

def select_input_device(stdscr, p):
    devices = []
    for i in range(p.get_device_count()):
        device_info = p.get_device_info_by_index(i)
        if device_info['maxInputChannels'] > 0:
            devices.append(device_info)
    
    stdscr.clear()
    stdscr.addstr("Available audio input devices:\n")
    for i, device in enumerate(devices):
        stdscr.addstr(f"{i}: {device['name']}\n")

    stdscr.addstr("\nEnter the device index for the microphone input: ")
    stdscr.refresh()

    curses.echo()
    device_index = int(stdscr.getstr().decode())
    curses.noecho()

    return devices[device_index]['index']

def print_sound(stdscr, in_data, frame_count, time_info, status):
    audio_data = np.frombuffer(in_data, dtype=np.float32)
    volume_norm = np.linalg.norm(audio_data) * 10
    bar = "|" * int(volume_norm)
    stdscr.addstr(0, 0, f"Sound level: {bar:<50}")
    stdscr.refresh()
    return (in_data, pyaudio.paContinue)

def test_sound_sensor(stdscr, device_index, threshold):
    p = pyaudio.PyAudio()

    if device_index is None:
        device_index = select_input_device(stdscr, p)

    stdscr.clear()
    stdscr.addstr(0, 0, "Initializing sound sensor...")
    stdscr.refresh()

    def callback(in_data, frame_count, time_info, status):
        print_sound(stdscr, in_data, frame_count, time_info, status)
        audio_data = np.frombuffer(in_data, dtype=np.float32)
        volume_norm = np.linalg.norm(audio_data) * 10
        if volume_norm > threshold:
            stdscr.addstr(1, 0, "Sound Detected!")
        else:
            stdscr.addstr(1, 0, "             ")
        stdscr.refresh()
        return (in_data, pyaudio.paContinue)

    stream = p.open(format=pyaudio.paFloat32,
                    channels=1,
                    rate=44100,
                    input=True,
                    input_device_index=device_index,
                    stream_callback=callback)

    stream.start_stream()

    stdscr.addstr(2, 0, "Listening... Press 'q' to stop.")
    stdscr.refresh()

    while True:
        key = stdscr.getch()
        if key == ord('q'):
            break

    stream.stop_stream()
    stream.close()
    p.terminate()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python test_sound_sensor.py <device_index> <threshold>")
        sys.exit(1)

    device_index = int(sys.argv[1]) if sys.argv[1] != "null" else None
    threshold = float(sys.argv[2])

    curses.wrapper(lambda stdscr: test_sound_sensor(stdscr, device_index, threshold))

================
File: services/sceneService.js
================
const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '../data/scenes.json');
const charactersPath = path.join(__dirname, '../data/characters.json');
const partsPath = path.join(__dirname, '../data/parts.json');
const soundsPath = path.join(__dirname, '../data/sounds.json');

const readJsonFile = async (filePath) => {
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        throw error;
    }
};

const writeJsonFile = async (filePath, data) => {
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
};

const getAllScenes = async () => {
    return readJsonFile(dataPath);
};

const getAllCharacters = async () => {
    return readJsonFile(charactersPath);
};

const getAllParts = async () => {
    return readJsonFile(partsPath);
};

const getAllSounds = async () => {
    return readJsonFile(soundsPath);
};

const getScene = async (id) => {
    const scenes = await getAllScenes();
    return scenes.find(scene => scene.id === parseInt(id));
};

const saveScene = async (sceneData, id = null) => {
    let scenes = await getAllScenes();
    if (id) {
        const index = scenes.findIndex(scene => scene.id === parseInt(id));
        if (index !== -1) {
            scenes[index] = { ...scenes[index], ...sceneData, id: parseInt(id) };
        } else {
            throw new Error('Scene not found');
        }
    } else {
        const newId = Math.max(...scenes.map(s => s.id), 0) + 1;
        scenes.push({ ...sceneData, id: newId });
    }
    await writeJsonFile(dataPath, scenes);
    return id ? scenes.find(scene => scene.id === parseInt(id)) : scenes[scenes.length - 1];
};

const removeScene = async (id) => {
    let scenes = await getAllScenes();
    scenes = scenes.filter(scene => scene.id !== parseInt(id));
    await writeJsonFile(dataPath, scenes);
};

const addStepToScene = async (sceneId, stepData) => {
    const scene = await getScene(sceneId);
    if (!scene) {
        throw new Error('Scene not found');
    }
    scene.steps = scene.steps || [];
    scene.steps.push(stepData);
    return saveScene(scene, sceneId);
};

const updateStepInScene = async (sceneId, stepIndex, stepData) => {
    const scene = await getScene(sceneId);
    if (!scene || !scene.steps || stepIndex >= scene.steps.length) {
        throw new Error('Scene or step not found');
    }
    scene.steps[stepIndex] = { ...scene.steps[stepIndex], ...stepData };
    return saveScene(scene, sceneId);
};

const removeStepFromScene = async (sceneId, stepIndex) => {
    const scene = await getScene(sceneId);
    if (!scene || !scene.steps || stepIndex >= scene.steps.length) {
        throw new Error('Scene or step not found');
    }
    scene.steps.splice(stepIndex, 1);
    return saveScene(scene, sceneId);
};

module.exports = {
    getAllScenes,
    getAllCharacters,
    getAllParts,
    getAllSounds,
    getScene,
    saveScene,
    removeScene,
    addStepToScene,
    updateStepInScene,
    removeStepFromScene
};

================
File: test/sceneService.test.js
================
// test/sceneService.test.js
const { expect } = require('chai');
const {
    getAllScenes,
    getScene,
    saveScene,
    removeScene
} = require('../services/sceneService');

describe('Scene Service', () => {
    it('should return all scenes', async () => {
        const scenes = await getAllScenes();
        expect(scenes).to.be.an('array');
    });

    it('should return a specific scene by id', async () => {
        const scene = await getScene(1);
        expect(scene).to.be.an('object');
        expect(scene).to.have.property('id');
    });

    // Add more tests for create, update, and delete
});

================
File: views/partials/character-selection.ejs
================
<div>
    <label for="scene_name">Scene Name:</label>
    <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
</div>
<div>
    <label for="character_id">Character:</label>
    <select id="character_id" name="character_id" required onchange="updateCharacterParts()">
        <% characters.forEach(function(character) { %>
            <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                <%= character.char_name %>
            </option>
        <% }); %>
    </select>
</div>

================
File: views/partials/step-form.ejs
================
<div class="stepForm" data-scene-id="<%= step.scene_id %>">
    <label>Step Type:</label>
    <select name="type">
        <option value="motor" <%= step.type === 'motor' ? 'selected' : '' %>>Motor</option>
        <option value="light" <%= step.type === 'light' ? 'selected' : '' %>>Light</option>
        <option value="sound" <%= step.type === 'sound' ? 'selected' : '' %>>Sound</option>
    </select>

    <% if (step.type === 'motor') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
        <label>Direction:</label>
        <input type="text" name="direction" value="<%= step.direction %>">
        <label>Speed:</label>
        <input type="number" name="speed" value="<%= step.speed %>">
    <% } else if (step.type === 'light') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
    <% } else if (step.type === 'sound') { %>
        <label>Sound ID:</label>
        <input type="text" name="sound_id" value="<%= step.sound_id %>">
    <% } %>

    <button type="button" class="saveStepButton">Save Step</button>
</div>

================
File: views/partials/step-list.ejs
================
<div id="steps">
    <h3>Steps</h3>
    <div id="step-list" class="sortable">
        <!-- Existing steps will be loaded here -->
    </div>
    <button type="button" id="add-step-button" onclick="addStep()">Add Step</button>
</div>

<script>
    const characterParts = {};
    const characterSounds = {};

    <% characters.forEach(function(character) { %>
        characterParts[<%= character.id %>] = [
            <% character.parts.forEach(function(partId) { %>
                <% const part = parts.find(p => p.id === partId); %>
                <% if (part) { %>
                    { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                <% } %>
            <% }); %>
        ];
        characterSounds[<%= character.id %>] = [
            <% character.sounds.forEach(function(soundId) { %>
                <% const sound = sounds.find(s => s.id === soundId); %>
                <% if (sound) { %>
                    { id: <%= sound.id %>, name: "<%= sound.name %>" },
                <% } %>
            <% }); %>
        ];
    <% }); %>

    function loadExistingSteps(steps) {
        steps.forEach((step, index) => {
            addStep();
            const stepDiv = document.querySelector('.step:last-of-type');
            stepDiv.querySelector('.step-name').value = step.name || '';
            stepDiv.querySelector('.concurrent').checked = step.concurrent;
            stepDiv.querySelector('.action-type').value = step.type;
            updateActionFields(stepDiv.querySelector('.action-type'), step);

            if (step.type === 'sound') {
                stepDiv.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                stepDiv.querySelector('.part-id').value = step.part_id;
                stepDiv.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    stepDiv.querySelector('.direction').value = step.direction;
                    stepDiv.querySelector('.speed').value = step.speed;
                }
            }
        });
    }

    function addStep() {
        const stepList = document.getElementById('step-list');
        const currentStepCount = stepList.children.length;
        const stepDiv = document.createElement('div');
        stepDiv.className = 'step';
        stepDiv.innerHTML = `
            <h4>Step ${currentStepCount + 1}</h4>
            <input type="text" class="step-name" placeholder="Step Name" onchange="updateStepsJson()">
            <label>
                Concurrent:
                <input type="checkbox" class="concurrent" onchange="updateStepsJson()">
            </label>
            <select class="action-type" onchange="updateActionFields(this)">
                <option value="">Select Action</option>
                <option value="sound">Play Sound</option>
                <option value="motor">Move Motor</option>
                <option value="servo">Move Servo</option>
                <option value="light">Control Light</option>
            </select>
            <div class="action-fields"></div>
            <button type="button" onclick="removeStep(this)">Remove Step</button>
        `;
        stepList.appendChild(stepDiv);
        updateStepNumbers();
        updateStepsJson();
    }

    function removeStep(button) {
        button.closest('.step').remove();
        updateStepNumbers();
        updateStepsJson();
    }

    function updateStepNumbers() {
        const steps = document.querySelectorAll('.step');
        steps.forEach((step, index) => {
            const stepHeader = step.querySelector('h4');
            if (stepHeader) {
                stepHeader.textContent = `Step ${index + 1}`;
            }
        });
    }

    function updateActionFields(select, step = null) {
        const actionFields = select.nextElementSibling;
        const characterId = document.getElementById('character_id').value;
        const actionType = select.value;

        actionFields.innerHTML = '';

        if (actionType === 'sound') {
            const sounds = characterSounds[characterId];
            actionFields.innerHTML += `
                <select class="sound-id" onchange="updateStepsJson()">
                    ${sounds.map(sound => `<option value="${sound.id}">${sound.name}</option>`).join('')}
                </select>
            `;
        } else if (actionType === 'motor') {
            const parts = characterParts[characterId].filter(part => part.type === actionType);
            actionFields.innerHTML += `
                <select class="part-id" onchange="updateStepsJson()">
                    ${parts.map(part => `<option value="${part.id}">${part.name}</option>`).join('')}
                </select>
                <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                <select class="direction" onchange="updateStepsJson()">
                    <option value="F">Forward</option>
                    <option value="R">Reverse</option>
                </select>
                <input type="number" class="speed" placeholder="Speed (0-100)" min="0" max="100" onchange="updateStepsJson()">
                <button type="button" class="test-motor-button" onclick="testMotor(this)">Test Motor</button>
            `;
        }

        if (step) {
            if (step.type === 'sound') {
                actionFields.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                actionFields.querySelector('.part-id').value = step.part_id;
                actionFields.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    actionFields.querySelector('.direction').value = step.direction;
                    actionFields.querySelector('.speed').value = step.speed;
                }
            }
        }

        updateStepsJson();
    }

    function updateStepsJson() {
        const steps = [];
        document.querySelectorAll('.step').forEach((stepDiv) => {
            const step = {
                name: stepDiv.querySelector('.step-name').value,
                concurrent: stepDiv.querySelector('.concurrent').checked,
                type: stepDiv.querySelector('.action-type').value
            };

            if (step.type === 'sound') {
                step.sound_id = stepDiv.querySelector('.sound-id').value;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                step.part_id = parseInt(stepDiv.querySelector('.part-id').value);
                step.duration = parseInt(stepDiv.querySelector('.duration').value);

                if (step.type === 'motor') {
                    step.direction = stepDiv.querySelector('.direction').value;
                    step.speed = parseInt(stepDiv.querySelector('.speed').value);
                }
            }

            steps.push(step);
        });

        document.getElementById('steps_json').value = JSON.stringify(steps);
    }

    function testMotor(button) {
        const stepDiv = button.closest('.step');
        const direction = stepDiv.querySelector('.direction').value;
        const speed = stepDiv.querySelector('.speed').value;
        const duration = stepDiv.querySelector('.duration').value;
        const partId = stepDiv.querySelector('.part-id').value;

        // Replace with actual logic to retrieve pins for the selected part
        const directionPin = 18; // Example value
        const pwmPin = 24; // Example value

        axios.post('/motor/control-motor', {
            direction: direction,
            speed: parseInt(speed),
            duration: parseInt(duration),
            directionPin: directionPin,
            pwmPin: pwmPin
        })
        .then(function (response) {
            alert('Motor test successful!');
        })
        .catch(function (error) {
            alert('Error testing motor: ' + (error.response ? error.response.data : error.message));
        });
    }

    function updateCharacterParts() {
        const characterId = document.getElementById('character_id').value;
        document.querySelectorAll('.step').forEach(stepDiv => {
            const actionType = stepDiv.querySelector('.action-type').value;
            if (actionType) {
                updateActionFields(stepDiv.querySelector('.action-type'));
            }
        });
    }

    // Load existing steps if editing a scene
    const existingSteps = <%= JSON.stringify(scene.steps || []) %>;
    loadExistingSteps(existingSteps);

    updateStepsJson();

    // Make steps sortable
    $(function() {
        $("#step-list").sortable({
            update: function(event, ui) {
                updateStepNumbers();
                updateStepsJson();
            }
        });
    });

    document.getElementById('sceneForm').onsubmit = function() {
        updateStepsJson();
        return true;
    };
</script>

================
File: views/active-mode.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        .sensor-indicator {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .sensor-indicator.inactive {
            background-color: red;
        }
        .sensor-indicator.active {
            background-color: green;
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    
    <div id="character-selection">
        <label for="character-select">Select Character:</label>
        <select id="character-select">
            <option value="">Select a character</option>
            <% characters.forEach(function(character) { %>
                <option value="<%= character.id %>"><%= character.char_name %></option>
            <% }); %>
        </select>
    </div>

    <div id="sensor-list" style="display: none;">
        <h2>Available Sensors</h2>
        <table>
            <thead>
                <tr>
                    <th>Sensor Name</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Sensors will be populated here -->
            </tbody>
        </table>
    </div>

    <div id="scene-selection" style="display: none;">
        <h2>Pair Sensor with Scene</h2>
        <select id="sensor-select">
            <!-- Sensors will be populated here -->
        </select>
        <select id="scene-select">
            <!-- Scenes will be populated here -->
        </select>
        <button id="pair-button">Pair Sensor with Scene</button>
    </div>

    <div id="armed-sensors">
        <h2>Armed Sensors</h2>
        <ul id="armed-sensors-list">
            <!-- Armed sensors will be populated here -->
        </ul>
    </div>

    <button id="start-active-mode">Start Active Mode</button>
    <button id="stop-active-mode" disabled>Stop Active Mode</button>

    <a href="/" class="button">Back to Main Menu</a>

    <script>
        $(document).ready(function() {
            let selectedCharacterId = null;
            let activeModeRunning = false;

            $('#character-select').change(function() {
                selectedCharacterId = $(this).val();
                if (selectedCharacterId) {
                    loadSensors(selectedCharacterId);
                    loadScenes(selectedCharacterId);
                    $('#sensor-list, #scene-selection').show();
                } else {
                    $('#sensor-list, #scene-selection').hide();
                }
            });

            function loadSensors(characterId) {
                const sensorTableBody = $('#sensor-list tbody');
                const sensorSelect = $('#sensor-select');
                sensorTableBody.empty();
                sensorSelect.empty();

                <% sensors.forEach(function(sensor) { %>
                    if (<%= sensor.characterId %> == characterId) {
                        sensorTableBody.append(`
                            <tr>
                                <td><%= sensor.name %></td>
                                <td><%= sensor.type %></td>
                                <td>
                                    <input type="radio" name="sensor-<%= sensor.id %>" value="active" ${<%= sensor.active %> ? 'checked' : ''} class="sensor-status"> Active
                                    <input type="radio" name="sensor-<%= sensor.id %>" value="inactive" ${!<%= sensor.active %> ? 'checked' : ''} class="sensor-status"> Inactive
                                </td>
                                <td>
                                    <div class="sensor-indicator ${<%= sensor.active %> ? 'active' : 'inactive'}" data-sensor-id="<%= sensor.id %>"></div>
                                </td>
                            </tr>
                        `);
                        sensorSelect.append(`<option value="<%= sensor.id %>"><%= sensor.name %></option>`);
                    }
                <% }); %>

                $('.sensor-status').change(function() {
                    const sensorId = $(this).attr('name').split('-')[1];
                    const active = $(this).val() === 'active';
                    toggleSensor(sensorId, active);
                });
            }

            function loadScenes(characterId) {
                const sceneSelect = $('#scene-select');
                sceneSelect.empty();

                <% scenes.forEach(function(scene) { %>
                    if (<%= scene.character_id %> == characterId) {
                        sceneSelect.append(`<option value="<%= scene.id %>"><%= scene.scene_name %></option>`);
                    }
                <% }); %>
            }

            function toggleSensor(sensorId, active) {
                $.post('/active-mode/toggle-sensor', { sensorId, active })
                    .done(function() {
                        const indicator = $(`.sensor-indicator[data-sensor-id="${sensorId}"]`);
                        indicator.toggleClass('active', active).toggleClass('inactive', !active);
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error toggling sensor:', error);
                        alert('Error toggling sensor: ' + xhr.responseText);
                    });
            }

            $('#pair-button').click(function() {
                const sensorId = $('#sensor-select').val();
                const sceneId = $('#scene-select').val();
                if (sensorId && sceneId) {
                    $.post('/active-mode/arm-sensor', { sensorId, sceneId })
                        .done(function() {
                            updateArmedSensors();
                        })
                        .fail(function(xhr, status, error) {
                            console.error('Error arming sensor:', error);
                            alert('Error arming sensor: ' + xhr.responseText);
                        });
                } else {
                    alert('Please select both a sensor and a scene.');
                }
            });

            function updateArmedSensors() {
                $.get('/active-mode/armed-sensors')
                    .done(function(armedSensors) {
                        const armedSensorsList = $('#armed-sensors-list');
                        armedSensorsList.empty();
                        armedSensors.forEach(function(armedSensor) {
                            const sensorName = $(`#sensor-select option[value="${armedSensor.sensorId}"]`).text();
                            const sceneName = $(`#scene-select option[value="${armedSensor.sceneId}"]`).text();
                            armedSensorsList.append(`
                                <li>
                                    <div class="sensor-indicator inactive" data-sensor-id="${armedSensor.sensorId}"></div>
                                    ${sensorName} - ${sceneName}
                                </li>
                            `);
                        });
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error updating armed sensors:', error);
                    });
            }

            $('#start-active-mode').click(function() {
                $.post('/active-mode/start')
                    .done(function() {
                        activeModeRunning = true;
                        $('#start-active-mode').prop('disabled', true);
                        $('#stop-active-mode').prop('disabled', false);
                        alert('Active Mode started');
                        startSensorSimulation();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error starting Active Mode:', error);
                        alert('Error starting Active Mode: ' + xhr.responseText);
                    });
            });

            $('#stop-active-mode').click(function() {
                $.post('/active-mode/stop')
                    .done(function() {
                        activeModeRunning = false;
                        $('#start-active-mode').prop('disabled', false);
                        $('#stop-active-mode').prop('disabled', true);
                        alert('Active Mode stopped');
                        stopSensorSimulation();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error stopping Active Mode:', error);
                        alert('Error stopping Active Mode: ' + xhr.responseText);
                    });
            });

            function startSensorSimulation() {
                sensorSimulationInterval = setInterval(function() {
                    $('.sensor-indicator').each(function() {
                        const shouldActivate = Math.random() < 0.3; // 30% chance of activation
                        $(this).toggleClass('active', shouldActivate).toggleClass('inactive', !shouldActivate);
                        
                        if (shouldActivate) {
                            const sensorId = $(this).data('sensor-id');
                            const sensorName = $(`#sensor-select option[value="${sensorId}"]`).text();
                            const sceneName = $('#armed-sensors-list').find(`[data-sensor-id="${sensorId}"]`).closest('li').text().split('-')[1].trim();
                            alert(`Sensor "${sensorName}" activated! Triggering scene "${sceneName}"`);
                        }
                    });
                }, 5000);
            }

            function stopSensorSimulation() {
                clearInterval(sensorSimulationInterval);
                $('.sensor-indicator').removeClass('active').addClass('inactive');
            }

            // Initial update of armed sensors
            updateArmedSensors();
        });
    </script>
</body>
</html>

================
File: views/character-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (character.id) { %>
            <input type="hidden" name="id" value="<%= character.id %>">
        <% } %>
        <div>
            <label for="char_name">Name:</label>
            <input type="text" id="char_name" name="char_name" value="<%= character.char_name || '' %>" required>
        </div>
        <div>
            <label for="char_description">Description:</label>
            <textarea id="char_description" name="char_description" required><%= character.char_description || '' %></textarea>
        </div>
        <div>
            <label for="character_image">Character Image:</label>
            <input type="file" id="character_image" name="character_image" accept="image/*">
            <% if (character.image) { %>
                <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 200px;">
            <% } %>
        </div>
        <div>
            <label>Parts:</label>
            <div id="parts-container">
                <div id="available-parts">
                    <h4>Available Parts:</h4>
                    <select id="available-parts-select" multiple>
                        <% parts.filter(part => part.characterId === character.id).forEach(function(part) { %>
                            <option value="<%= part.id %>" <%= character.parts && character.parts.includes(part.id) ? 'disabled' : '' %>>
                                <%= part.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addPart()">Add &gt;</button>
                    <button type="button" onclick="removePart()">&lt; Remove</button>
                </div>
                <div id="selected-parts">
                    <h4>Selected Parts:</h4>
                    <select id="selected-parts-select" name="parts" multiple>
                        <% if (character.parts) { %>
                            <% character.parts.forEach(function(partId) { %>
                                <% const part = parts.find(p => p.id === partId && p.characterId === character.id); %>
                                <% if (part) { %>
                                    <option value="<%= part.id %>"><%= part.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <div>
            <label>Sounds:</label>
            <div id="sounds-container">
                <div id="available-sounds">
                    <h4>Available Sounds:</h4>
                    <select id="available-sounds-select" multiple>
                        <% sounds.forEach(function(sound) { %>
                            <option value="<%= sound.id %>" <%= character.sounds && character.sounds.includes(sound.id) ? 'disabled' : '' %>>
                                <%= sound.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addSound()">Add &gt;</button>
                    <button type="button" onclick="removeSound()">&lt; Remove</button>
                </div>
                <div id="selected-sounds">
                    <h4>Selected Sounds:</h4>
                    <select id="selected-sounds-select" name="sounds" multiple>
                        <% if (character.sounds) { %>
                            <% character.sounds.forEach(function(soundId) { %>
                                <% const sound = sounds.find(s => s.id === soundId); %>
                                <% if (sound) { %>
                                    <option value="<%= sound.id %>"><%= sound.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit">Save Character</button>
    </form>
    <a href="/characters" class="button">Back to Characters</a>

    <script>
        function addPart() {
            moveOptions('available-parts-select', 'selected-parts-select');
        }

        function removePart() {
            moveOptions('selected-parts-select', 'available-parts-select');
        }

        function addSound() {
            moveOptions('available-sounds-select', 'selected-sounds-select');
        }

        function removeSound() {
            moveOptions('selected-sounds-select', 'available-sounds-select');
        }

        function moveOptions(fromId, toId) {
            const fromSelect = document.getElementById(fromId);
            const toSelect = document.getElementById(toId);
            
            for (let option of Array.from(fromSelect.selectedOptions)) {
                toSelect.add(option);
                option.selected = false;
            }
            updateAvailableOptions();
        }

        function updateAvailableOptions() {
            const availableParts = document.getElementById('available-parts-select');
            const selectedParts = document.getElementById('selected-parts-select');
            const availableSounds = document.getElementById('available-sounds-select');
            const selectedSounds = document.getElementById('selected-sounds-select');

            for (let option of availableParts.options) {
                option.disabled = Array.from(selectedParts.options).some(o => o.value === option.value);
            }

            for (let option of availableSounds.options) {
                option.disabled = Array.from(selectedSounds.options).some(o => o.value === option.value);
            }
        }

        // Ensure all options are selected before form submission
        document.querySelector('form').onsubmit = function() {
            const selectedParts = document.getElementById('selected-parts-select');
            const selectedSounds = document.getElementById('selected-sounds-select');
            
            for (let option of selectedParts.options) {
                option.selected = true;
            }
            
            for (let option of selectedSounds.options) {
                option.selected = true;
            }
            
            return true;
        };

        // Initialize available options
        updateAvailableOptions();
    </script>
</body>
</html>

================
File: views/characters.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/characters/new" class="button">Add New Character</a>
    <table>
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Parts</th>
                <th>Sounds</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% characters.forEach(function(character) { %>
                <tr>
                    <td>
                        <% if (character.image) { %>
                            <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 100px;">
                        <% } else { %>
                            No Image
                        <% } %>
                    </td>
                    <td><%= character.char_name %></td>
                    <td><%= character.char_description %></td>
                    <td>
                        <% character.parts.forEach(function(partId) { %>
                            <% const part = parts.find(p => p.id === partId); %>
                            <% if (part) { %>
                                <%= part.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <% character.sounds.forEach(function(soundId) { %>
                            <% const sound = sounds.find(s => s.id === soundId); %>
                            <% if (sound) { %>
                                <%= sound.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <a href="/characters/<%= character.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteCharacter(<%= character.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteCharacter(id) {
            if (confirm('Are you sure you want to delete this character?')) {
                $.post('/characters/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting character: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MonsterBox Control Panel</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Creepster&display=swap">
</head>
<body>
    <header>
        <h1>MonsterBox(tm)</h1>
    </header>
    <main>
        <h2>Welcome to the MonsterBox Control Panel</h2>
        <p>Choose an option from the menu to get started.</p>
    </main>

    <nav>
        <ul>
            <li><a href="/scenes">Scenes</a></li>
            <li><a href="/characters">Characters</a></li>
            <li><a href="/parts">Parts</a></li>
            <li><a href="/sounds">Sounds</a></li>
            <li><a href="/sensors">Sensors</a></li>
            <li><a href="/motor">Motor Control</a></li>
            <li><a href="/active-mode">Active Mode</a></li>
        </ul>
    </nav>
    <p>An animatronic automation package by ARW 8.15.2024.</p>
</body>
</html>

================
File: views/motor-index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    
    <h2>Motor Settings</h2>
    <form id="settingsForm" action="/motor/save-settings" method="POST">
        <label for="dirPin">Direction Pin:</label>
        <input type="number" id="dirPin" name="dirPin" value="<%= settings.dirPin %>" required>
        
        <label for="pwmPin">PWM Pin:</label>
        <input type="number" id="pwmPin" name="pwmPin" value="<%= settings.pwmPin %>" required>
        
        <button type="submit">Save Settings</button>
    </form>

    <h2>Motor Control</h2>
    <div id="controlPanel">
        <div class="direction-control">
            <label>Direction:</label>
            <div class="radio-group">
                <input type="radio" id="forward" name="direction" value="forward" checked>
                <label for="forward">Forward</label>
                <input type="radio" id="backward" name="direction" value="backward">
                <label for="backward">Backward</label>
            </div>
        </div>
        
        <label for="speed">Speed:</label>
        <input type="range" id="speed" min="0" max="100" value="50">
        <span id="speedValue">50</span>
        
        <label for="duration">Duration (ms):</label>
        <input type="range" id="duration" min="100" max="5000" value="1000">
        <span id="durationValue">1000</span>
        
        <button id="runMotor">Run Motor</button>
    </div>

    <a href="/" class="button">Back to Main Menu</a>

    <script>
        const speedSlider = document.getElementById('speed');
        const speedValue = document.getElementById('speedValue');
        const durationSlider = document.getElementById('duration');
        const durationValue = document.getElementById('durationValue');
        const runMotorButton = document.getElementById('runMotor');

        speedSlider.oninput = function() {
            speedValue.textContent = this.value;
        }

        durationSlider.oninput = function() {
            durationValue.textContent = this.value;
        }

        runMotorButton.onclick = function() {
            const direction = document.querySelector('input[name="direction"]:checked').value;
            const speed = speedSlider.value;
            const duration = durationSlider.value;
            const directionPin = document.getElementById('dirPin').value;
            const pwmPin = document.getElementById('pwmPin').value;

            axios.post('/motor/control-motor', {
                direction: direction,
                speed: speed,
                duration: duration,
                directionPin: directionPin,
                pwmPin: pwmPin
            })
            .then(function (response) {
                console.log('Motor controlled successfully');
                alert('Motor control successful!');
            })
            .catch(function (error) {
                console.error('Error controlling motor:', error);
                alert('Error controlling motor: ' + (error.response ? error.response.data : error.message));
            });
        }
    </script>
</body>
</html>

================
File: views/part-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" id="partForm">
        <% if (part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part.name || '' %>" required>
        </div>
        <div>
            <label for="type">Type:</label>
            <select id="type" name="type" required onchange="toggleInputs()">
                <option value="motor" <%= part.type === 'motor' ? 'selected' : '' %>>Motor</option>
                <option value="sensor" <%= part.type === 'sensor' ? 'selected' : '' %>>Sensor</option>
                <option value="light" <%= part.type === 'light' ? 'selected' : '' %>>Light</option>
            </select>
        </div>
        <div>
            <label for="characterId">Character:</label>
            <select id="characterId" name="characterId" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (part.characterId === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div id="motorInputs" style="display: none;">
            <div>
                <label for="directionPin">Direction Pin:</label>
                <input type="number" id="directionPin" name="directionPin" value="<%= part.directionPin || '' %>" min="0" max="40">
            </div>
            <div>
                <label for="pwmPin">PWM Pin:</label>
                <input type="number" id="pwmPin" name="pwmPin" value="<%= part.pwmPin || '' %>" min="0" max="40">
            </div>
        </div>
        <div id="sensorInputs" style="display: none;">
            <div>
                <label for="sensorType">Sensor Type:</label>
                <select id="sensorType" name="sensorType">
                    <option value="motion" <%= part.sensorType === 'motion' ? 'selected' : '' %>>Motion</option>
                    <option value="sound" <%= part.sensorType === 'sound' ? 'selected' : '' %>>Sound</option>
                </select>
            </div>
            <div>
                <label for="gpioPin">GPIO Pin:</label>
                <input type="number" id="gpioPin" name="gpioPin" value="<%= part.gpioPin || '' %>" min="0" max="40">
            </div>
        </div>
        <div id="lightInputs" style="display: none;">
            <div>
                <label for="pin">GPIO Pin:</label>
                <input type="number" id="pin" name="pin" value="<%= part.pin || '' %>" min="0" max="40">
            </div>
        </div>
        <button type="submit">Save Part</button>
    </form>
    <div id="testArea" style="display: none;">
        <h2>Test Sensor</h2>
        <p id="sensorStatus">Sensor status: Not testing</p>
        <button id="startTest">Start Test</button>
        <button id="stopTest" disabled>Stop Test</button>
    </div>
    <a href="/parts" class="button">Back to Parts</a>

    <script>
        function toggleInputs() {
            const type = document.getElementById('type').value;
            document.getElementById('motorInputs').style.display = type === 'motor' ? 'block' : 'none';
            document.getElementById('sensorInputs').style.display = type === 'sensor' ? 'block' : 'none';
            document.getElementById('lightInputs').style.display = type === 'light' ? 'block' : 'none';
            document.getElementById('testArea').style.display = type === 'sensor' ? 'block' : 'none';
        }

        // Call toggleInputs on page load to set initial state
        toggleInputs();

        let testInterval;

        function startTest() {
            const gpioPin = document.getElementById('gpioPin').value;
            if (!gpioPin) {
                alert('Please enter a GPIO pin number before testing.');
                return;
            }

            document.getElementById('startTest').disabled = true;
            document.getElementById('stopTest').disabled = false;

            testInterval = setInterval(() => {
                axios.post('/parts/test-sensor', { gpioPin })
                    .then(response => {
                        document.getElementById('sensorStatus').textContent = 'Sensor status: ' + response.data;
                    })
                    .catch(error => {
                        console.error('Error testing sensor:', error);
                        document.getElementById('sensorStatus').textContent = 'Sensor status: Error';
                        stopTest();
                    });
            }, 1000);
        }

        function stopTest() {
            clearInterval(testInterval);
            document.getElementById('startTest').disabled = false;
            document.getElementById('stopTest').disabled = true;
            document.getElementById('sensorStatus').textContent = 'Sensor status: Not testing';
        }

        document.getElementById('startTest').addEventListener('click', startTest);
        document.getElementById('stopTest').addEventListener('click', stopTest);
    </script>
</body>
</html>

================
File: views/parts.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/parts/new" class="button">Add New Part</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Character</th>
                <th>Pin Details</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% parts.forEach(function(part) { %>
                <tr>
                    <td><%= part.name %></td>
                    <td><%= part.type %></td>
                    <td><%= characters.find(c => c.id === part.characterId)?.char_name || 'N/A' %></td>
                    <td>
                        <% if (part.type === 'motor') { %>
                            Dir Pin: <%= part.directionPin %><br>
                            PWM Pin: <%= part.pwmPin %>
                        <% } else { %>
                            Pin: <%= part.pin %>
                        <% } %>
                    </td>
                    <td>
                        <a href="/parts/<%= part.id %>/edit" class="button">Edit</a>
                        <button onclick="deletePart(<%= part.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deletePart(id) {
            if (confirm('Are you sure you want to delete this part?')) {
                $.post('/parts/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting part: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/scene-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form id="sceneForm" action="<%= action %>" method="POST">
        <input type="hidden" name="id" value="<%= scene.id %>">
        <div>
            <label for="scene_name">Scene Name:</label>
            <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
        </div>
        <div>
            <label for="character_id">Character:</label>
            <select id="character_id" name="character_id" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>

        <h2>Steps</h2>
        <div id="steps">
            <div id="step-list">
                <% (scene.steps || []).forEach(function(step, index) { %>
                    <div class="step" data-step-id="<%= index %>">
                        <h3>Step <%= index + 1 %></h3>
                        <input type="text" name="steps[<%= index %>][name]" value="<%= step.name %>" placeholder="Step Name" required>
                        <% if (step.type === 'sound') { %>
                            <select name="steps[<%= index %>][sound_id]" required>
                                <% sounds.forEach(function(sound) { %>
                                    <option value="<%= sound.id %>" <%= (step.sound_id === sound.id) ? 'selected' : '' %>><%= sound.name %></option>
                                <% }); %>
                            </select>
                            <label>
                                <input type="checkbox" name="steps[<%= index %>][concurrent]" <%= step.concurrent ? 'checked' : '' %>>
                                Play concurrently
                            </label>
                        <% } else { %>
                            <select name="steps[<%= index %>][type]" required>
                                <option value="motor" <%= step.type === 'motor' ? 'selected' : '' %>>Move Motor</option>
                                <option value="light" <%= step.type === 'light' ? 'selected' : '' %>>Control Light</option>
                            </select>
                            <select name="steps[<%= index %>][part_id]" required>
                                <% parts.forEach(function(part) { %>
                                    <option value="<%= part.id %>" <%= (step.part_id === part.id) ? 'selected' : '' %>><%= part.name %></option>
                                <% }); %>
                            </select>
                            <input type="number" name="steps[<%= index %>][duration]" value="<%= step.duration || '' %>" placeholder="Duration (ms)" required>
                            <% if (step.type === 'motor') { %>
                                <select name="steps[<%= index %>][direction]" required>
                                    <option value="forward" <%= step.direction === 'forward' ? 'selected' : '' %>>Forward</option>
                                    <option value="backward" <%= step.direction === 'backward' ? 'selected' : '' %>>Backward</option>
                                </select>
                                <input type="number" name="steps[<%= index %>][speed]" value="<%= step.speed || '' %>" placeholder="Speed (0-100)" min="0" max="100" required>
                            <% } %>
                        <% } %>
                        <button type="button" onclick="removeStep(this)">Remove Step</button>
                    </div>
                <% }); %>
            </div>
            <button type="button" onclick="addStep()">Add Step</button>
            <button type="button" onclick="addSound()">Add Sound</button>
        </div>

        <button type="submit">Save Scene</button>
    </form>
    <a href="/scenes" class="button">Back to Scenes</a>

    <script>
        function addStep() {
            const stepList = document.getElementById('step-list');
            const stepCount = stepList.children.length;
            const newStep = document.createElement('div');
            newStep.className = 'step';
            newStep.innerHTML = `
                <h3>Step ${stepCount + 1}</h3>
                <input type="text" name="steps[${stepCount}][name]" placeholder="Step Name" required>
                <select name="steps[${stepCount}][type]" required>
                    <option value="motor">Move Motor</option>
                    <option value="light">Control Light</option>
                </select>
                <select name="steps[${stepCount}][part_id]" required>
                    <% parts.forEach(function(part) { %>
                        <option value="<%= part.id %>"><%= part.name %></option>
                    <% }); %>
                </select>
                <input type="number" name="steps[${stepCount}][duration]" placeholder="Duration (ms)" required>
                <select name="steps[${stepCount}][direction]" required>
                    <option value="forward">Forward</option>
                    <option value="backward">Backward</option>
                </select>
                <input type="number" name="steps[${stepCount}][speed]" placeholder="Speed (0-100)" min="0" max="100" required>
                <button type="button" onclick="removeStep(this)">Remove Step</button>
            `;
            stepList.appendChild(newStep);
        }

        function addSound() {
            const stepList = document.getElementById('step-list');
            const stepCount = stepList.children.length;
            const newStep = document.createElement('div');
            newStep.className = 'step';
            newStep.innerHTML = `
                <h3>Step ${stepCount + 1} (Sound)</h3>
                <input type="text" name="steps[${stepCount}][name]" placeholder="Sound Name" required>
                <input type="hidden" name="steps[${stepCount}][type]" value="sound">
                <select name="steps[${stepCount}][sound_id]" required>
                    <% sounds.forEach(function(sound) { %>
                        <option value="<%= sound.id %>"><%= sound.name %></option>
                    <% }); %>
                </select>
                <label>
                    <input type="checkbox" name="steps[${stepCount}][concurrent]">
                    Play concurrently
                </label>
                <button type="button" onclick="removeStep(this)">Remove Step</button>
            `;
            stepList.appendChild(newStep);
        }

        function removeStep(button) {
            button.closest('.step').remove();
            updateStepNumbers();
        }

        function updateStepNumbers() {
            const steps = document.querySelectorAll('.step');
            steps.forEach((step, index) => {
                step.querySelector('h3').textContent = `Step ${index + 1}${step.querySelector('input[type="hidden"][value="sound"]') ? ' (Sound)' : ''}`;
            });
        }
    </script>
</body>
</html>

================
File: views/scenes.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/scenes/new" class="button">Add New Scene</a>
    <table>
        <thead>
            <tr>
                <th>Scene Name</th>
                <th>Character</th>
                <th>Number of Steps</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% scenes.forEach(function(scene) { %>
                <tr>
                    <td><%= scene.scene_name %></td>
                    <td><%= characters.find(c => c.id === scene.character_id)?.char_name || 'N/A' %></td>
                    <td><%= scene.steps ? scene.steps.length : 0 %></td>
                    <td>
                        <a href="/scenes/<%= scene.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteScene(<%= scene.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteScene(id) {
            if (confirm('Are you sure you want to delete this scene?')) {
                $.post('/scenes/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting scene: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/sensor-form.ejs
================
<script>
        const characterParts = {
            <% characters.forEach(function(character) { %>
                <%= character.id %>: [
                    <% parts.filter(part => part.characterId === character.id).forEach(function(part) { %>
                        { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                    <% }); %>
                ],
            <% }); %>
        };

        function updateAvailableParts() {
            const characterId = document.getElementById('character_id').value;
            const availableParts = characterParts[characterId] || [];
            
            document.querySelectorAll('.part-select').forEach(select => {
                const currentValue = select.value;
                select.innerHTML = '';
                availableParts.forEach(part => {
                    const option = document.createElement('option');
                    option.value = part.id;
                    option.textContent = part.name;
                    select.appendChild(option);
                });
                select.value = currentValue;
            });
        }

        function addStep() {
            const stepList = document.getElementById('step-list');
            const stepCount = stepList.children.length;
            const newStep = document.createElement('div');
            newStep.className = 'step';
            newStep.dataset.stepId = stepCount;
            newStep.innerHTML = `
                <h3>Step ${stepCount + 1}</h3>
                <input type="text" name="steps[${stepCount}][name]" placeholder="Step Name" required>
                <select name="steps[${stepCount}][type]" class="step-type" required onchange="toggleStepOptions(this)">
                    <option value="sound">Play Sound</option>
                    <option value="motor">Move Motor</option>
                    <option value="light">Control Light</option>
                </select>
                <div class="step-options sound-options" style="display: none;">
                    <select name="steps[${stepCount}][sound_id]" required>
                        <% sounds.forEach(function(sound) { %>
                            <option value="<%= sound.id %>"><%= sound.name %></option>
                        <% }); %>
                    </select>
                    <label>
                        <input type="checkbox" name="steps[${stepCount}][concurrent]">
                        Play concurrently with next step
                    </label>
                </div>
                <div class="step-options part-options" style="display: none;">
                    <select name="steps[${stepCount}][part_id]" required class="part-select">
                        <!-- Parts will be populated dynamically -->
                    </select>
                    <input type="number" name="steps[${stepCount}][duration]" placeholder="Duration (ms)" required>
                    <select name="steps[${stepCount}][direction]" required>
                        <option value="forward">Forward</option>
                        <option value="backward">Backward</option>
                    </select>
                    <input type="number" name="steps[${stepCount}][speed]" placeholder="Speed (0-100)" min="0" max="100" required>
                </div>
                <button type="button" onclick="removeStep(this)">Remove Step</button>
            `;
            stepList.appendChild(newStep);
            updateAvailableParts();
        }

        function removeStep(button) {
            button.closest('.step').remove();
            updateStepNumbers();
        }

        function updateStepNumbers() {
            const steps = document.querySelectorAll('.step');
            steps.forEach((step, index) => {
                step.querySelector('h3').textContent = `Step ${index + 1}`;
                step.dataset.stepId = index;
                step.querySelectorAll('input, select').forEach(input => {
                    input.name = input.name.replace(/\d+/, index);
                });
            });
        }

        function toggleStepOptions(select) {
            const stepDiv = select.closest('.step');
            const soundOptions = stepDiv.querySelector('.sound-options');
            const partOptions = stepDiv.querySelector('.part-options');
            
            if (select.value === 'sound') {
                soundOptions.style.display = 'block';
                partOptions.style.display = 'none';
            } else {
                soundOptions.style.display = 'none';
                partOptions.style.display = 'block';
            }
        }

        function updateStepsJson() {
            const steps = [];
            document.querySelectorAll('.step').forEach((stepElement) => {
                const step = {
                    name: stepElement.querySelector('input[name$="[name]"]').value,
                    type: stepElement.querySelector('select[name$="[type]"]').value
                };

                if (step.type === 'sound') {
                    step.sound_id = parseInt(stepElement.querySelector('select[name$="[sound_id]"]').value);
                    step.concurrent = stepElement.querySelector('input[name$="[concurrent]"]').checked;
                } else {
                    step.part_id = parseInt(stepElement.querySelector('select[name$="[part_id]"]').value);
                    step.duration = parseInt(stepElement.querySelector('input[name$="[duration]"]').value);
                    if (step.type === 'motor') {
                        step.direction = stepElement.querySelector('select[name$="[direction]"]').value;
                        step.speed = parseInt(stepElement.querySelector('input[name$="[speed]"]').value);
                    }
                }

                steps.push(step);
            });

            document.getElementById('steps_json').value = JSON.stringify(steps);
        }

        $(function() {
            $("#step-list").sortable({
                update: function(event, ui) {
                    updateStepNumbers();
                    updateStepsJson();
                }
            });

            // Initialize step options visibility and available parts
            $('.step-type').each(function() {
                toggleStepOptions(this);
            });
            updateAvailableParts();

            // Update steps_json before form submission
            $('#sceneForm').submit(function() {
                updateStepsJson();
                return true;
            });
        });

        // Call updateStepsJson whenever a form field changes
        $('#sceneForm').on('change', 'input, select', updateStepsJson);

        // Initial call to updateStepsJson
        updateStepsJson();
    </script>
</body>
</html>

================
File: views/sensor-test.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Creepster&display=swap');

        .motion-detected {
            color: red;
            font-family: 'Creepster', cursive;
            font-size: 1.2em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    <h2>Testing <%= sensor.name %> (<%= sensor.type %> sensor)</h2>
    
    <p id="statusText">Sensor status: Not testing</p>
    
    <form id="testForm">
        <input type="hidden" name="id" value="<%= sensor.id %>">
        
        <div>
            <label for="gpioPin">GPIO Pin:</label>
            <input type="number" id="gpioPin" name="gpioPin" value="<%= sensor.gpioPin %>" required>
        </div>
        
        <button type="button" id="startTest">Start Test</button>
        <button type="button" id="stopTest" disabled>Stop Test</button>
    </form>
    
    <a href="/sensors" class="button">Back to Sensors</a>

    <script>
        let eventSource;
        
        function updateSensorStatus(status) {
            const statusText = $('#statusText');
            statusText.text('Sensor status: ' + status);
            
            if (status === 'Motion Detected') {
                statusText.addClass('motion-detected');
            } else {
                statusText.removeClass('motion-detected');
            }
        }
        
        function startTest() {
            const formData = new FormData($('#testForm')[0]);
            const queryString = new URLSearchParams(formData).toString();
            eventSource = new EventSource('/sensors/test?' + queryString);

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);
                if (data.status) {
                    updateSensorStatus(data.status);
                } else if (data.error) {
                    console.error('Error:', data.error);
                    updateSensorStatus('Error: ' + data.error);
                    stopTest();
                } else if (data.done) {
                    stopTest();
                }
            };

            eventSource.onerror = function(event) {
                console.error('EventSource failed:', event);
                stopTest();
            };

            $('#startTest').prop('disabled', true);
            $('#stopTest').prop('disabled', false);
        }
        
        function stopTest() {
            if (eventSource) {
                eventSource.close();
            }
            $('#startTest').prop('disabled', false);
            $('#stopTest').prop('disabled', true);
            updateSensorStatus('Not testing');
        }
        
        $('#startTest').click(startTest);
        $('#stopTest').click(stopTest);
    </script>
</body>
</html>

================
File: views/sensors.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sensors/new" class="button">Add New Sensor</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Character</th>
                <th>GPIO Pin</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sensors.forEach(function(sensor) { %>
                <tr>
                    <td><%= sensor.name %></td>
                    <td><%= sensor.type %></td>
                    <td><%= characters.find(c => c.id === sensor.characterId)?.char_name || 'N/A' %></td>
                    <td><%= sensor.gpioPin %></td>
                    <td><%= sensor.active ? 'Yes' : 'No' %></td>
                    <td>
                        <a href="/sensors/<%= sensor.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteSensor(<%= sensor.id %>)" class="button">Delete</button>
                        <a href="/sensors/<%= sensor.id %>/test" class="button">Test</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteSensor(id) {
            if (confirm('Are you sure you want to delete this sensor?')) {
                $.post('/sensors/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting sensor: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/sound-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (sensor.id) { %>
            <input type="hidden" name="id" value="<%= sensor.id %>">
        <% } %>
        <div>
            <label for="name">Sensor Name:</label>
            <input type="text" id="name" name="name" value="<%= sensor.name || '' %>" required>
        </div>
        <div>
            <label for="type">Sensor Type:</label>
            <select id="type" name="type" required>
                <option value="motion" <%= sensor.type === 'motion' ? 'selected' : '' %>>Motion</option>
                <option value="sound" <%= sensor.type === 'sound' ? 'selected' : '' %>>Sound</option>
            </select>
        </div>
        <div id="motionSettings" style="display: <%= sensor.type === 'motion' ? 'block' : 'none' %>;">
            <label for="gpioPin">GPIO Pin:</label>
            <input type="number" id="gpioPin" name="gpioPin" value="<%= sensor.gpioPin || '' %>">
        </div>
        <div id="soundSettings" style="display: <%= sensor.type === 'sound' ? 'block' : 'none' %>;">
            <label for="audioDeviceIndex">Audio Device:</label>
            <select id="audioDeviceIndex" name="audioDeviceIndex">
                <% audioDevices.forEach(function(device) { %>
                    <option value="<%= device.index %>" <%= sensor.audioDeviceIndex === device.index ? 'selected' : '' %>><%= device.name %></option>
                <% }); %>
            </select>
            <label for="threshold">Threshold:</label>
            <input type="number" id="threshold" name="threshold" value="<%= sensor.threshold || 50 %>">
            <label for="sensitivity">Sensitivity:</label>
            <input type="number" id="sensitivity" name="sensitivity" value="<%= sensor.sensitivity || 50 %>">
        </div>
        <button type="submit">Save Sensor</button>
    </form>
    <a href="/sensors" class="button">Back to Sensors</a>

    <script>
        const typeSelect = document.getElementById('type');
        const motionSettings = document.getElementById('motionSettings');
        const soundSettings = document.getElementById('soundSettings');

        typeSelect.addEventListener('change', function() {
            if (this.value === 'motion') {
                motionSettings.style.display = 'block';
                soundSettings.style.display = 'none';
            } else if (this.value === 'sound') {
                motionSettings.style.display = 'none';
                soundSettings.style.display = 'block';
            }
        });
    </script>
</body>
</html>

================
File: views/sounds.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sounds/new" class="button">Add New Sound</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Filename</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sounds.forEach(function(sound) { %>
                <tr>
                    <td><%= sound.name %></td>
                    <td><%= sound.filename %></td>
                    <td>
                        <button onclick="playOnCharacter(<%= sound.id %>)">Play (on Character)</button>
                        <button onclick="playLocal('<%= sound.filename %>')">Play (local)</button>
                        <button onclick="deleteSound(<%= sound.id %>)">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <button onclick="stopSounds()">Stop All Sounds</button>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function playLocal(filename) {
            const audio = new Audio(`/sounds/${filename}`);
            audio.play().catch(error => {
                console.error('Error playing sound locally:', error);
                alert('Error playing sound locally');
            });
        }

        function playOnCharacter(soundId) {
            fetch('/sounds/play', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ soundId }),
            }).then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(text);
                    });
                }
                return response.text();
            }).then(text => {
                console.log(text);
            }).catch(error => {
                console.error('Error playing sound on character:', error);
                alert('Error playing sound on character: ' + error.message);
            });
        }

        function stopSounds() {
            fetch('/sounds/stop', {
                method: 'POST',
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Failed to stop sounds');
                }
                return response.text();
            }).then(text => {
                console.log(text);
            }).catch(error => {
                console.error('Error stopping sounds:', error);
                alert('Error stopping sounds: ' + error.message);
            });
        }

        function deleteSound(id) {
            if (confirm('Are you sure you want to delete this sound?')) {
                $.post('/sounds/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting sound: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: .gitignore
================
.codiumai

================
File: app.js
================
const express = require('express');
const dataManager = require('./dataManager');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const app = express();
const port = 3000;

// Import routes
const motorRoutes = require('./routes/motorRoutes');
const sceneRoutes = require('./routes/sceneRoutes');
const characterRoutes = require('./routes/characterRoutes');
const partRoutes = require('./routes/partRoutes');
const soundRoutes = require('./routes/soundRoutes');
const sensorRoutes = require('./routes/sensorRoutes');
const activeModeRoutes = require('./routes/activeModeRoutes');

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        if (file.fieldname === "sound_file") {
            cb(null, 'public/sounds/');
        } else if (file.fieldname === "character_image") {
            cb(null, 'public/images/characters/');
        }
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

// Basic Express setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Routes
app.use('/motor', motorRoutes);
app.use('/scenes', sceneRoutes);
app.use('/characters', characterRoutes);
app.use('/parts', partRoutes);
app.use('/sounds', soundRoutes);
app.use('/sensors', sensorRoutes);
app.use('/active-mode', activeModeRoutes);

// Main menu route
app.get('/', (req, res) => {
    res.render('index', { title: 'MonsterBox Control Panel' });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start the server
app.listen(port, () => {
    console.log(`MonsterBox server running at http://localhost:${port}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('Shutting down gracefully...');
    process.exit();
});

================
File: dataManager.js
================
const fs = require('fs').promises;
const path = require('path');

const dataDir = '/home/remote/monsterbox/MonsterBox/data';

const ensureDataDirExists = async () => {
    try {
        await fs.access(dataDir);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.mkdir(dataDir, { recursive: true });
        } else {
            throw error;
        }
    }
};

const readData = async (filename) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        await ensureDataDirExists();
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log(`File ${filename}.json not found. Returning empty array.`);
            return [];
        }
        console.error(`Error reading ${filename}:`, error);
        throw error;
    }
};

const writeData = async (filename, data) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        await ensureDataDirExists();
        await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    } catch (error) {
        console.error(`Error writing ${filename}:`, error);
        throw error;
    }
};

const getNextId = (items) => {
    return items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1;
};

const getScene = async (id) => {
    const scenes = await readData('scenes');
    return scenes.find(scene => scene.id === parseInt(id));
};

const saveScene = async (sceneData) => {
    const scenes = await readData('scenes');
    let scene;
    if (sceneData.id) {
        const index = scenes.findIndex(s => s.id === sceneData.id);
        if (index !== -1) {
            scenes[index] = { ...scenes[index], ...sceneData };
            scene = scenes[index];
        } else {
            throw new Error('Scene not found');
        }
    } else {
        scene = { ...sceneData, id: getNextId(scenes) };
        scenes.push(scene);
    }
    await writeData('scenes', scenes);
    return scene;
};

const removeScene = async (id) => {
    const scenes = await readData('scenes');
    const updatedScenes = scenes.filter(scene => scene.id !== parseInt(id));
    await writeData('scenes', updatedScenes);
};

module.exports = {
    getCharacters: () => readData('characters'),
    getScenes: () => readData('scenes'),
    getParts: () => readData('parts'),
    getSounds: () => readData('sounds'),
    getSensors: () => readData('sensors'),
    getArmedSensors: () => readData('armedSensors'),
    saveCharacters: (data) => writeData('characters', data),
    saveScenes: (data) => writeData('scenes', data),
    saveParts: (data) => writeData('parts', data),
    saveSounds: (data) => writeData('sounds', data),
    saveSensors: (data) => writeData('sensors', data),
    saveArmedSensors: (data) => writeData('armedSensors', data),
    getNextId,
    getScene,
    saveScene,
    removeScene
};

================
File: motor_control.py
================
import RPi.GPIO as GPIO
import sys
import time
import logging

# Set up logging
logging.basicConfig(filename='motor_control.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def control_motor(direction, speed, duration, dir_pin, pwm_pin):
    logging.info(f"Controlling motor: direction={direction}, speed={speed}, duration={duration}, dir_pin={dir_pin}, pwm_pin={pwm_pin}")
    
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(dir_pin, GPIO.OUT)
    GPIO.setup(pwm_pin, GPIO.OUT)

    pwm = GPIO.PWM(pwm_pin, 100)  # Use a default frequency of 100 Hz
    pwm.start(0)

    try:
        GPIO.output(dir_pin, GPIO.HIGH if direction == 'forward' else GPIO.LOW)
        pwm.ChangeDutyCycle(int(speed))
        time.sleep(int(duration) / 1000)  # Convert duration to seconds
        pwm.ChangeDutyCycle(0)
    except Exception as e:
        logging.error(f"Error controlling motor: {str(e)}")
        raise
    finally:
        pwm.stop()
        GPIO.cleanup([dir_pin, pwm_pin])

if __name__ == "__main__":
    if len(sys.argv) != 6:
        logging.error("Incorrect number of arguments")
        print("Usage: python motor_control.py <direction> <speed> <duration> <dir_pin> <pwm_pin>")
        sys.exit(1)

    direction = sys.argv[1]
    speed = sys.argv[2]
    duration = sys.argv[3]
    dir_pin = int(sys.argv[4])
    pwm_pin = int(sys.argv[5])

    try:
        control_motor(direction, speed, duration, dir_pin, pwm_pin)
        print("Motor control successful")
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        print(f"Error: {str(e)}")
    finally:
        # Only clean up if GPIO was set up
        if GPIO.getmode() is not None:
            GPIO.cleanup()
            logging.info("GPIO cleanup completed")

================
File: motor_settings.json
================
{
  "dirPin": 18,
  "pwmPin": 24
}

================
File: package.json
================
{
  "name": "scene-builder-app",
  "version": "1.0.0",
  "description": "A refactored scene builder application for managing scenes and steps.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "test": "mocha --recursive"
  },
  "dependencies": {
    "body-parser": "^1.19.0",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "multer": "^1.4.5-lts.1",
    "node-aplay": "^1.0.3",
    "node-mpg123": "^1.0.2-0023",
    "play-sound": "^1.1.6",
    "replit-auth": "^5.0.3"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.1.3",
    "supertest": "^6.1.6"
  },
  "engines": {
    "node": ">=12.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-repo/scene-builder-app.git"
  },
  "keywords": [
    "scene",
    "builder",
    "express",
    "ejs",
    "nodejs"
  ],
  "author": "Your Name",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/your-repo/scene-builder-app/issues"
  },
  "homepage": "https://github.com/your-repo/scene-builder-app#readme"
}

================
File: README.md
================
# MonsterBox

================
File: sensor_control.py
================
import RPi.GPIO as GPIO
import time
import json
import pyaudio
import numpy as np
import requests

# Load sensor settings
with open('data/sensors.json', 'r') as f:
    sensors = json.load(f)

# Initialize GPIO
GPIO.setmode(GPIO.BCM)

# Initialize PyAudio for sound detection
p = pyaudio.PyAudio()

# Set up motion sensors
for sensor in sensors:
    if sensor['type'] == 'motion' and sensor['active']:
        GPIO.setup(sensor['digitalOutPin'], GPIO.IN)

# Function to check if a scene is currently playing
def is_scene_playing():
    # This function should check if a scene is currently being played
    # You'll need to implement this based on your scene playback system
    return False

# Function to trigger a scene
def trigger_scene(sensor_id):
    # This function should trigger the appropriate scene for the given sensor
    # You'll need to implement this based on your scene playback system
    print(f"Triggering scene for sensor {sensor_id}")
    requests.post('http://localhost:3000/scenes/trigger', json={'sensorId': sensor_id})

# Function to detect sound
def detect_sound(sensor):
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
    data = np.frombuffer(stream.read(1024), dtype=np.int16)
    stream.stop_stream()
    stream.close()
    
    # Calculate the sound level
    sound_level = np.abs(data).mean()
    return sound_level > sensor['sensitivity']

try:
    while True:
        if not is_scene_playing():
            for sensor in sensors:
                if sensor['active']:
                    if sensor['type'] == 'motion':
                        if GPIO.input(sensor['digitalOutPin']):
                            trigger_scene(sensor['id'])
                            time.sleep(1)  # Debounce
                    elif sensor['type'] == 'sound':
                        if detect_sound(sensor):
                            trigger_scene(sensor['id'])
                            time.sleep(1)  # Debounce
        time.sleep(0.1)  # Small delay to prevent CPU overuse

except KeyboardInterrupt:
    print("Stopping sensor monitoring")

finally:
    GPIO.cleanup()
    p.terminate()

================
File: server.js
================
const express = require('express');
const bodyParser = require('body-parser');
const sceneRoutes = require('./routes/sceneRoutes');

const app = express();

app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));
app.use('/scenes', sceneRoutes);

app.set('view engine', 'ejs');

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
