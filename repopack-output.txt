================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-25T18:45:11.477Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    node.js.yml
controllers/
  sceneController.js
data/
  armedSensors.json
  characters.json
  motor_settings.json
  parts.json
  scenes.json
  sensors.json
  sounds.json
devTools/
  auto_commit.sh
  auto_pull.sh
  run_every_30s.sh
public/
  css/
    style.css
routes/
  activeModeRoutes.js
  characterRoutes.js
  motorRoutes.js
  partRoutes.js
  sceneRoutes.js
  sensorRoutes.js
  soundRoutes.js
scripts/
  active_mode_monitor.py
  led_control.py
  light_control.py
  list_audio_devices.py
  motor_control.py
  play_sound.py
  sensor_control.py
  servo_control.py
  sound_detection.py
  test_led.py
  test_sensor.py
  test_sound_sensor.py
services/
  characterService.js
  debug-scene-service.js
  partService.js
  sceneService.js
  soundService.js
test/
  sceneService.test.js
views/
  partials/
    character-selection.ejs
    step-form.ejs
    step-list.ejs
  step-forms/
    led-step.ejs
    light-step.ejs
    motor-step.ejs
    pause-step.ejs
    sound-step.ejs
  active-mode.ejs
  character-form.ejs
  characters.ejs
  index.ejs
  motor-index.ejs
  part-form.ejs
  parts.ejs
  scene-form.ejs
  scene-player.ejs
  scenes.ejs
  sensor-form.ejs
  sensor-test.ejs
  sensors.ejs
  sound-form.ejs
  sounds.ejs
.gitignore
app.js
dataManager.js
motor_control.py
motor_settings.json
package.json
README.md
sensor_control.py
server.js
update.sh

================================================================
Repository Files
================================================================

================
File: .github/workflows/node.js.yml
================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

================
File: controllers/sceneController.js
================
const sceneService = require('../services/sceneService');
const characterService = require('../services/characterService');
const partService = require('../services/partService');
const soundService = require('../services/soundService');
const { spawn } = require('child_process');
const path = require('path');

const sceneController = {
    getAllScenes: async (req, res) => {
        try {
            const scenes = await sceneService.getAllScenes();
            const characters = await characterService.getAllCharacters();
            res.render('scenes', { title: 'Scenes', scenes, characters });
        } catch (error) {
            console.error('Error fetching scenes:', error);
            res.status(500).send('An error occurred while fetching scenes');
        }
    },

    newScene: async (req, res) => {
        try {
            const characters = await characterService.getAllCharacters();
            const parts = await partService.getAllParts();
            const sounds = await soundService.getAllSounds();
            res.render('scene-form', { 
                title: 'New Scene', 
                scene: { steps: [] }, 
                action: '/scenes',
                characters,
                parts,
                sounds
            });
        } catch (error) {
            console.error('Error rendering new scene form:', error);
            res.status(500).send('An error occurred while loading the new scene form');
        }
    },

    getSceneById: async (req, res) => {
        try {
            const scene = await sceneService.getSceneById(req.params.id);
            if (scene) {
                const characters = await characterService.getAllCharacters();
                const parts = await partService.getAllParts();
                const sounds = await soundService.getAllSounds();
                res.render('scene-form', { 
                    title: 'Edit Scene', 
                    scene, 
                    action: `/scenes/${scene.id}`,
                    characters,
                    parts,
                    sounds
                });
            } else {
                res.status(404).send('Scene not found');
            }
        } catch (error) {
            console.error('Error fetching scene:', error);
            res.status(500).send('An error occurred while fetching the scene');
        }
    },

    createScene: async (req, res) => {
        try {
            const sceneData = {
                character_id: parseInt(req.body.character_id),
                scene_name: req.body.scene_name,
                steps: req.body.steps || []
            };
            const newScene = await sceneService.createScene(sceneData);
            res.redirect('/scenes');
        } catch (error) {
            console.error('Error creating scene:', error);
            res.status(500).send('An error occurred while creating the scene');
        }
    },

    updateScene: async (req, res) => {
        try {
            const sceneData = {
                character_id: parseInt(req.body.character_id),
                scene_name: req.body.scene_name,
                steps: req.body.steps || []
            };
            await sceneService.updateScene(req.params.id, sceneData);
            res.redirect('/scenes');
        } catch (error) {
            console.error('Error updating scene:', error);
            res.status(500).send('An error occurred while updating the scene');
        }
    },

    deleteScene: async (req, res) => {
        try {
            await sceneService.deleteScene(req.params.id);
            res.sendStatus(200);
        } catch (error) {
            console.error('Error deleting scene:', error);
            res.status(500).send('An error occurred while deleting the scene');
        }
    },

    playScene: async (req, res) => {
        try {
            const scene = await sceneService.getSceneById(req.params.id);
            if (scene) {
                res.render('scene-player', { title: 'Scene Player', scene });
            } else {
                res.status(404).send('Scene not found');
            }
        } catch (error) {
            console.error('Error loading scene player:', error);
            res.status(500).send('An error occurred while loading the scene player');
        }
    },

    executeStep: async (req, res) => {
        try {
            const step = req.body;
            console.log('Executing step:', step);

            let scriptPath;
            let args = [];

            switch(step.type) {
                case 'motor':
                    scriptPath = path.join(__dirname, '..', 'scripts', 'motor_control.py');
                    args = [
                        step.direction || 'forward',
                        step.speed ? step.speed.toString() : '50',
                        step.duration ? step.duration.toString() : '1000',
                        step.directionPin ? step.directionPin.toString() : '18',
                        step.pwmPin ? step.pwmPin.toString() : '24'
                    ];
                    break;
                case 'light':
                case 'led':
                    scriptPath = path.join(__dirname, '..', 'scripts', 'light_control.py');
                    const lightPart = await partService.getPartById(step.part_id);
                    if (!lightPart) {
                        throw new Error('Light/LED part not found');
                    }
                    args = [
                        lightPart.gpioPin ? lightPart.gpioPin.toString() : '0',
                        step.state || 'on',
                        step.duration ? step.duration.toString() : '1000'
                    ];
                    if (step.type === 'led') {
                        args.push(step.brightness ? step.brightness.toString() : '100');
                    }
                    break;
                case 'sound':
                    scriptPath = path.join(__dirname, '..', 'scripts', 'play_sound.py');
                    const sound = await soundService.getSoundById(step.sound_id);
                    if (!sound) {
                        throw new Error('Sound not found');
                    }
                    args = [path.join(__dirname, '..', 'public', 'sounds', sound.filename)];
                    break;
                case 'sensor':
                    scriptPath = path.join(__dirname, '..', 'scripts', 'sensor_control.py');
                    args = [step.timeout ? step.timeout.toString() : '30'];
                    break;
                default:
                    throw new Error('Unknown step type');
            }

            console.log('Spawning process:', 'python3', scriptPath, ...args);
            const process = spawn('python3', [scriptPath, ...args]);

            let stdout = '';
            let stderr = '';

            process.stdout.on('data', (data) => {
                stdout += data.toString();
                console.log(`stdout: ${data}`);
            });

            process.stderr.on('data', (data) => {
                stderr += data.toString();
                console.error(`stderr: ${data}`);
            });

            process.on('close', (code) => {
                console.log(`child process exited with code ${code}`);
                res.json({ 
                    success: code === 0, 
                    message: code === 0 ? 'Step executed successfully' : 'Step execution failed',
                    stdout: stdout,
                    stderr: stderr
                });
            });

        } catch (error) {
            console.error('Error executing step:', error);
            res.status(500).json({ success: false, error: error.message });
        }
    },

    executeScene: async (req, res) => {
        try {
            const sceneId = req.params.id;
            const scene = await sceneService.getSceneById(sceneId);
            if (!scene) {
                return res.status(404).json({ error: 'Scene not found' });
            }

            const executeStepPromise = (step) => {
                return new Promise((resolve, reject) => {
                    this.executeStep({ body: step }, {
                        json: (result) => {
                            if (result.success) {
                                resolve(result);
                            } else {
                                reject(new Error(result.message));
                            }
                        },
                        status: (code) => ({
                            json: (result) => reject(new Error(`Step failed with status ${code}: ${result.error}`))
                        })
                    });
                });
            };

            let currentIndex = 0;
            const executeNextStep = async () => {
                if (currentIndex >= scene.steps.length) {
                    return res.json({ success: true, message: 'Scene execution completed' });
                }

                const step = scene.steps[currentIndex];
                try {
                    await executeStepPromise(step);
                    currentIndex++;
                    if (step.concurrent && currentIndex < scene.steps.length) {
                        executeNextStep(); // Start next step without waiting
                    } else {
                        setTimeout(executeNextStep, 0); // Schedule next step execution
                    }
                } catch (error) {
                    res.status(500).json({ success: false, error: `Error executing step ${currentIndex + 1}: ${error.message}` });
                }
            };

            executeNextStep();

        } catch (error) {
            console.error('Error executing scene:', error);
            res.status(500).json({ success: false, error: error.message });
        }
    }
};

module.exports = sceneController;

================
File: data/armedSensors.json
================
[
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 1,
    "sceneId": 1
  },
  {
    "sensorId": 2,
    "sceneId": 2
  },
  {
    "sensorId": 2,
    "sceneId": 2
  },
  {
    "sensorId": 2,
    "sceneId": 2
  },
  {
    "sensorId": 2,
    "sceneId": 2
  }
]

================
File: data/characters.json
================
[
  {
    "id": 1,
    "char_name": "Satan Himself",
    "char_description": "Baphomet Findel Version - Sunday",
    "parts": [
      1,
      3,
      2,
      4,
      5
    ],
    "sounds": [
      2,
      1,
      3
    ],
    "image": "1724021922597.jpg"
  },
  {
    "id": 2,
    "char_name": "test dummy",
    "char_description": "nothing here",
    "parts": [
      4,
      5,
      3
    ],
    "sounds": [
      2
    ],
    "image": "1724545854596.jpg"
  }
]

================
File: data/motor_settings.json
================
{
  "dirPin": 18,
  "pwmPin": 24
}

================
File: data/parts.json
================
[
  {
    "id": 2,
    "name": "Right Arm",
    "type": "motor",
    "characterId": 1,
    "directionPin": 18,
    "pwmPin": 13
  },
  {
    "id": 3,
    "name": "Left Arm",
    "type": "motor",
    "characterId": 1,
    "directionPin": 23,
    "pwmPin": 12
  },
  {
    "id": 4,
    "name": "Sight of Baphomet Sensor",
    "type": "sensor",
    "characterId": 1,
    "sensorType": "motion",
    "gpioPin": null
  },
  {
    "id": 5,
    "name": "Eye of Baphomet",
    "type": "led",
    "characterId": 1,
    "gpioPin": null
  },
  {
    "id": 6,
    "name": "Hand of Azura",
    "type": "light",
    "characterId": 1,
    "gpioPin": null
  }
]

================
File: data/scenes.json
================
[
  {
    "id": 1,
    "character_id": 1,
    "scene_name": "Bear Attack",
    "steps": [
      {
        "type": "motor",
        "name": "Roar!!!",
        "part_id": "2",
        "duration": "1000",
        "direction": "forward",
        "speed": "100"
      },
      {
        "type": "sound",
        "name": "Hey Asshole!",
        "sound_id": "1"
      },
      {
        "type": "light",
        "name": "Light the Light",
        "part_id": "1",
        "duration": "1000",
        "state": "on"
      },
      {
        "type": "sensor",
        "name": "detect",
        "part_id": "3",
        "timeout": "30"
      }
    ]
  }
]

================
File: data/sensors.json
================
[
  {
    "id": 1,
    "name": "Satans Eye Sensor",
    "type": "motion",
    "characterId": 1,
    "active": true,
    "gpioPin": 16
  }
]

================
File: data/sounds.json
================
[
  {
    "id": 1,
    "name": "Dogs of Hell",
    "filename": "1724450345223.mp3"
  },
  {
    "id": 2,
    "name": "Santos Dominus ",
    "filename": "1724450355315.mp3"
  },
  {
    "id": 3,
    "name": "Ghostly Musac",
    "filename": "1724544077285.mp3"
  }
]

================
File: devTools/auto_commit.sh
================
#!/bin/bash
cd /home/remote/monsterbox/MonsterBox
git add .
git commit -m "Auto-commit: $(date)"
git push origin master

================
File: devTools/auto_pull.sh
================
#!/bin/bash
cd /home/remote/monsterbox/MonsterBox
git pull origin master

================
File: devTools/run_every_30s.sh
================
#!/bin/bash
while true; do
  /home/remote/monsterbox/MonsterBox/devTools/auto_commit.sh
  sleep 30
done

================
File: public/css/style.css
================
body {
    font-family: 'Courier New', Courier, monospace;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #000000;
    color: #00ff00;
}

h1, h2, h3, h4, h5, h6 {
    color: #00ff00;
    text-shadow: 0 0 5px #00ff00;
}

a {
    color: #00ffff;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
    text-shadow: 0 0 5px #00ffff;
}

.button {
    display: inline-block;
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    margin: 10px 0;
}

.button:hover {
    background-color: #004400;
    text-decoration: none;
    box-shadow: 0 0 10px #00ff00;
}

form {
    background-color: #001100;
    padding: 20px;
    border-radius: 5px;
    border: 1px solid #00ff00;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"],
input[type="number"],
textarea,
select {
    width: 100%;
    padding: 8px;
    border: 1px solid #00ff00;
    border-radius: 4px;
    background-color: #000000;
    color: #00ff00;
    box-sizing: border-box;
}

button {
    background-color: #003300;
    color: #00ff00;
    padding: 10px 15px;
    border: 1px solid #00ff00;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #004400;
    box-shadow: 0 0 10px #00ff00;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #001100;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.1);
}

table, th, td {
    border: 1px solid #00ff00;
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #002200;
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #001800;
}

#parts-container, #sounds-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

#available-parts, #selected-parts, #available-sounds, #selected-sounds {
    width: 40%;
}

#available-parts select, #selected-parts select, #available-sounds select, #selected-sounds select {
    width: 100%;
    height: 200px;
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
}

#parts-container > div:nth-child(2), #sounds-container > div:nth-child(2) {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#parts-container button, #sounds-container button {
    margin: 5px;
}

input[type="file"] {
    background-color: #001100;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 5px;
    border-radius: 4px;
}

option {
    background-color: #001100;
    color: #00ff00;
}

input:focus, textarea:focus, select:focus {
    outline: none;
    box-shadow: 0 0 5px #00ff00;
}

================
File: routes/activeModeRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { spawn } = require('child_process');
const path = require('path');

let activeModeProcess = null;

router.get('/', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const sensors = await dataManager.getSensors();
        const scenes = await dataManager.getScenes();
        const armedSensors = await dataManager.getArmedSensors();
        res.render('active-mode', { title: 'Active Mode', characters, sensors, scenes, armedSensors });
    } catch (error) {
        console.error('Error in GET /active-mode route:', error);
        res.status(500).send('An error occurred while loading the active mode page: ' + error.message);
    }
});

router.post('/toggle-sensor', async (req, res) => {
    try {
        const { sensorId, active } = req.body;
        const sensors = await dataManager.getSensors();
        const sensorIndex = sensors.findIndex(s => s.id === parseInt(sensorId));
        if (sensorIndex !== -1) {
            sensors[sensorIndex].active = active;
            await dataManager.saveSensors(sensors);
            res.sendStatus(200);
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error in POST /active-mode/toggle-sensor route:', error);
        res.status(500).send('An error occurred while toggling the sensor: ' + error.message);
    }
});

router.post('/arm-sensor', async (req, res) => {
    try {
        const { sensorId, sceneId } = req.body;
        const armedSensors = await dataManager.getArmedSensors();
        const newArmedSensor = { sensorId: parseInt(sensorId), sceneId: parseInt(sceneId) };
        armedSensors.push(newArmedSensor);
        await dataManager.saveArmedSensors(armedSensors);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error in POST /active-mode/arm-sensor route:', error);
        res.status(500).send('An error occurred while arming the sensor: ' + error.message);
    }
});

router.get('/armed-sensors', async (req, res) => {
    try {
        const armedSensors = await dataManager.getArmedSensors();
        res.json(armedSensors);
    } catch (error) {
        console.error('Error in GET /active-mode/armed-sensors route:', error);
        res.status(500).send('An error occurred while fetching armed sensors: ' + error.message);
    }
});

router.post('/start', (req, res) => {
    if (activeModeProcess) {
        return res.status(400).send('Active Mode is already running');
    }

    const scriptPath = path.join('/home/remote/monsterbox/MonsterBox/scripts', 'active_mode_monitor.py');
    activeModeProcess = spawn('python3', [scriptPath]);

    let errorOutput = '';
    let startupTimeout = setTimeout(() => {
        if (activeModeProcess) {
            activeModeProcess.kill();
            activeModeProcess = null;
            res.status(500).send('Active Mode failed to start: ' + errorOutput);
        }
    }, 5000);

    activeModeProcess.stdout.on('data', (data) => {
        console.log(`Active Mode Monitor: ${data}`);
        if (data.toString().includes("Starting Active Mode Monitor")) {
            clearTimeout(startupTimeout);
            res.sendStatus(200);
        }
    });

    activeModeProcess.stderr.on('data', (data) => {
        console.error(`Active Mode Monitor Error: ${data}`);
        errorOutput += data.toString();
    });

    activeModeProcess.on('close', (code) => {
        console.log(`Active Mode Monitor process exited with code ${code}`);
        activeModeProcess = null;
        clearTimeout(startupTimeout);
        if (!res.headersSent) {
            res.status(500).send('Active Mode failed to start: ' + errorOutput);
        }
    });
});

router.post('/stop', (req, res) => {
    if (!activeModeProcess) {
        return res.status(400).send('Active Mode is not running');
    }

    activeModeProcess.kill();
    activeModeProcess = null;
    res.sendStatus(200);
});

module.exports = router;

================
File: routes/characterRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const fs = require('fs').promises;
const path = require('path');
const multer = require('multer');

// ... (keep the existing code)

// New route for fetching parts associated with a character
router.get('/:id/parts', async (req, res) => {
    try {
        const characterId = parseInt(req.params.id);
        const characters = await dataManager.getCharacters();
        const character = characters.find(c => c.id === characterId);
        
        if (!character) {
            return res.status(404).json({ error: 'Character not found' });
        }

        const allParts = await dataManager.getParts();
        const characterParts = allParts.filter(part => character.parts.includes(part.id));

        res.json(characterParts);
    } catch (error) {
        console.error('Error in GET /characters/:id/parts route:', error);
        res.status(500).json({ error: 'An error occurred while fetching character parts' });
    }
});

module.exports = router;

================
File: routes/motorRoutes.js
================
const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

const settingsFile = path.join(__dirname, '..', 'motor_settings.json');

async function getSettings() {
    try {
        const data = await fs.readFile(settingsFile, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            const defaultSettings = { dirPin: 18, pwmPin: 24 };
            await saveSettings(defaultSettings);
            return defaultSettings;
        }
        throw error;
    }
}

async function saveSettings(settings) {
    await fs.writeFile(settingsFile, JSON.stringify(settings, null, 2));
}

function controlMotor(direction, speed, duration, dirPin, pwmPin) {
    return new Promise((resolve, reject) => {
        const pythonScript = path.join(__dirname, '..', 'motor_control.py');
        const command = `sudo python3 ${pythonScript} ${direction} ${speed} ${duration} ${dirPin} ${pwmPin}`;

        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error: ${error.message}`);
                return reject(error);
            }
            if (stderr) {
                console.error(`stderr: ${stderr}`);
                return reject(new Error(stderr));
            }
            console.log(`stdout: ${stdout}`);
            resolve();
        });
    });
}

router.get('/', async (req, res) => {
    const settings = await getSettings();
    res.render('motor-index', { title: 'Motor Control Panel', settings });
});

router.post('/save-settings', async (req, res) => {
    const { dirPin, pwmPin } = req.body;
    await saveSettings({ dirPin: parseInt(dirPin), pwmPin: parseInt(pwmPin) });
    res.redirect('/motor');
});

router.post('/control-motor', async (req, res) => {
    const { direction, speed, duration, directionPin, pwmPin } = req.body;
    try {
        await controlMotor(direction, parseInt(speed), parseInt(duration), parseInt(directionPin), parseInt(pwmPin));
        res.sendStatus(200);
    } catch (error) {
        res.status(500).send(`Error controlling motor: ${error.message}`);
    }
});

module.exports = router;

================
File: routes/partRoutes.js
================
const express = require('express');
const router = express.Router();
const partService = require('../services/partService');
const characterService = require('../services/characterService');

router.get('/', async (req, res) => {
    try {
        const parts = await partService.getAllParts();
        const characters = await characterService.getAllCharacters();
        res.render('parts', { title: 'Parts', parts, characters });
    } catch (error) {
        console.error('Error fetching parts:', error);
        res.status(500).send('An error occurred while fetching parts');
    }
});

router.get('/new', async (req, res) => {
    try {
        const characters = await characterService.getAllCharacters();
        res.render('part-form', { title: 'Add New Part', action: '/parts', part: {}, characters });
    } catch (error) {
        console.error('Error rendering new part form:', error);
        res.status(500).send('An error occurred while loading the new part form');
    }
});

router.get('/:id/edit', async (req, res) => {
    try {
        const part = await partService.getPartById(req.params.id);
        const characters = await characterService.getAllCharacters();
        res.render('part-form', { title: 'Edit Part', action: `/parts/${part.id}`, part, characters });
    } catch (error) {
        console.error('Error fetching part:', error);
        res.status(500).send('An error occurred while fetching the part');
    }
});

router.post('/', async (req, res) => {
    try {
        const newPart = {
            name: req.body.name,
            type: req.body.type,
            characterId: parseInt(req.body.characterId)
        };

        switch (req.body.type) {
            case 'motor':
                newPart.directionPin = req.body.directionPin ? parseInt(req.body.directionPin) : null;
                newPart.pwmPin = req.body.pwmPin ? parseInt(req.body.pwmPin) : null;
                break;
            case 'sensor':
                newPart.sensorType = req.body.sensorType;
                newPart.gpioPin = req.body.gpioPin ? parseInt(req.body.gpioPin) : null;
                break;
            case 'led':
            case 'light':
                newPart.gpioPin = req.body.gpioPin ? parseInt(req.body.gpioPin) : null;
                break;
        }

        await partService.createPart(newPart);
        res.redirect('/parts');
    } catch (error) {
        console.error('Error creating part:', error);
        res.status(500).send('An error occurred while creating the part: ' + error.message);
    }
});

router.post('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        if (isNaN(id)) {
            throw new Error('Invalid part ID');
        }

        const updatedPart = {
            id: id,
            name: req.body.name,
            type: req.body.type,
            characterId: parseInt(req.body.characterId)
        };

        switch (req.body.type) {
            case 'motor':
                updatedPart.directionPin = req.body.directionPin ? parseInt(req.body.directionPin) : null;
                updatedPart.pwmPin = req.body.pwmPin ? parseInt(req.body.pwmPin) : null;
                break;
            case 'sensor':
                updatedPart.sensorType = req.body.sensorType;
                updatedPart.gpioPin = req.body.gpioPin ? parseInt(req.body.gpioPin) : null;
                break;
            case 'led':
            case 'light':
                updatedPart.gpioPin = req.body.gpioPin ? parseInt(req.body.gpioPin) : null;
                break;
        }

        await partService.updatePart(id, updatedPart);
        res.redirect('/parts');
    } catch (error) {
        console.error('Error updating part:', error);
        res.status(500).send('An error occurred while updating the part: ' + error.message);
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        await partService.deletePart(req.params.id);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error deleting part:', error);
        res.status(500).send('An error occurred while deleting the part');
    }
});

router.post('/test', async (req, res) => {
    try {
        const { part_id, type, ...testParams } = req.body;
        let result;

        switch (type) {
            case 'motor':
                result = await partService.testMotor(
                    parseInt(part_id),
                    testParams.direction,
                    parseInt(testParams.speed),
                    parseInt(testParams.duration)
                );
                break;
            case 'light':
            case 'led':
                result = await partService.testLight(
                    parseInt(part_id),
                    testParams.state,
                    parseInt(testParams.duration)
                );
                break;
            case 'sensor':
                result = await partService.testSensor(
                    parseInt(part_id),
                    parseInt(testParams.timeout)
                );
                break;
            default:
                throw new Error('Invalid part type');
        }

        res.json({ success: true, message: 'Part tested successfully', result });
    } catch (error) {
        console.error('Error testing part:', error);
        res.status(500).json({ success: false, message: 'An error occurred while testing the part', error: error.message });
    }
});

module.exports = router;

================
File: routes/sceneRoutes.js
================
const express = require('express');
const router = express.Router();
const sceneController = require('../controllers/sceneController');

router.get('/', sceneController.getAllScenes);
router.get('/new', sceneController.newScene);
router.get('/:id', sceneController.getSceneById);
router.post('/', sceneController.createScene);
router.post('/:id', sceneController.updateScene);
router.delete('/:id', sceneController.deleteScene);
router.get('/:id/play', sceneController.playScene);
router.post('/:id/execute-step', sceneController.executeStep);
router.post('/:id/execute', sceneController.executeScene);

module.exports = router;

================
File: routes/sensorRoutes.js
================
const express = require('express');
const router = express.Router();
const dataManager = require('../dataManager');
const { spawn } = require('child_process');
const path = require('path');

router.get('/', async (req, res) => {
    try {
        const sensors = await dataManager.getSensors();
        const characters = await dataManager.getCharacters();
        res.render('sensors', { title: 'Sensors', sensors, characters });
    } catch (error) {
        console.error('Error fetching sensors:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/new', async (req, res) => {
    try {
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        res.render('sensor-form', { title: 'Add New Sensor', action: '/sensors', sensor: {}, characters, parts });
    } catch (error) {
        console.error('Error rendering new sensor form:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/:id/edit', async (req, res) => {
    try {
        const sensors = await dataManager.getSensors();
        const characters = await dataManager.getCharacters();
        const parts = await dataManager.getParts();
        const sensor = sensors.find(s => s.id === parseInt(req.params.id));
        if (sensor) {
            res.render('sensor-form', { title: 'Edit Sensor', action: '/sensors/' + sensor.id, sensor, characters, parts });
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error fetching sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/', async (req, res) => {
    try {
        const sensors = await dataManager.getSensors();
        const newSensor = {
            id: dataManager.getNextId(sensors),
            name: req.body.name,
            type: req.body.type,
            characterId: parseInt(req.body.characterId),
            active: req.body.active === 'on',
            gpioPin: parseInt(req.body.gpioPin)
        };

        sensors.push(newSensor);
        await dataManager.saveSensors(sensors);
        res.redirect('/sensors');
    } catch (error) {
        console.error('Error creating sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sensors = await dataManager.getSensors();
        const index = sensors.findIndex(s => s.id === id);
        if (index !== -1) {
            sensors[index] = {
                id: id,
                name: req.body.name,
                type: req.body.type,
                characterId: parseInt(req.body.characterId),
                active: req.body.active === 'on',
                gpioPin: parseInt(req.body.gpioPin)
            };

            await dataManager.saveSensors(sensors);
            res.redirect('/sensors');
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error updating sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sensors = await dataManager.getSensors();
        const index = sensors.findIndex(s => s.id === id);
        if (index !== -1) {
            sensors.splice(index, 1);
            await dataManager.saveSensors(sensors);
            res.sendStatus(200);
        } else {
            res.status(404).send('Sensor not found');
        }
    } catch (error) {
        console.error('Error deleting sensor:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/:id/test', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sensors = await dataManager.getSensors();
        const sensor = sensors.find(s => s.id === id);
        
        if (!sensor) {
            return res.status(404).send('Sensor not found');
        }

        res.render('sensor-test', { title: 'Test Sensor', sensor });
    } catch (error) {
        console.error('Error rendering sensor test page:', error);
        res.status(500).send('Internal Server Error');
    }
});

router.get('/test', async (req, res) => {
    try {
        const sensorId = parseInt(req.query.id);
        const sensors = await dataManager.getSensors();
        const sensor = sensors.find(s => s.id === sensorId);

        if (!sensor) {
            return res.status(404).json({ error: 'Sensor not found' });
        }

        // Update sensor with new GPIO pin if provided
        if (req.query.gpioPin) {
            sensor.gpioPin = parseInt(req.query.gpioPin);
            await dataManager.saveSensors(sensors);
        }

        const scriptPath = path.join(__dirname, '..', 'scripts', 'test_sensor.py');
        
        res.writeHead(200, {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });

        const python = spawn('sudo', ['python3', scriptPath, sensor.gpioPin.toString()]);

        python.stdout.on('data', (data) => {
            res.write(`data: ${data}\n\n`);
        });

        python.stderr.on('data', (data) => {
            console.error(`Python script error: ${data}`);
            res.write(`data: ${JSON.stringify({ error: data.toString() })}\n\n`);
        });

        python.on('close', (code) => {
            console.log(`Python script exited with code ${code}`);
            res.write(`data: ${JSON.stringify({ done: true })}\n\n`);
            res.end();
        });

        req.on('close', () => {
            python.kill();
        });
    } catch (error) {
        console.error('Error testing sensor:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

module.exports = router;

================
File: routes/soundRoutes.js
================
const express = require('express');
const path = require('path');
const { spawn } = require('child_process');
const dataManager = require('../dataManager');
const multer = require('multer');
const fs = require('fs').promises;
const router = express.Router();

// Multer setup for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/sounds/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

router.get('/', async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        res.render('sounds', { title: 'Sounds', sounds });
    } catch (error) {
        console.error('Error fetching sounds:', error);
        res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

router.get('/new', (req, res) => {
    res.render('sound-form', { title: 'Add New Sound', action: '/sounds', sound: null });
});

router.get('/:id/edit', async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        const sound = sounds.find(s => s.id === parseInt(req.params.id));
        if (sound) {
            res.render('sound-form', { title: 'Edit Sound', action: `/sounds/${sound.id}`, sound });
        } else {
            res.status(404).json({ error: 'Sound not found', details: `No sound with id ${req.params.id}` });
        }
    } catch (error) {
        console.error('Error fetching sound:', error);
        res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

router.post('/', upload.single('sound_file'), async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        const newSound = {
            id: dataManager.getNextId(sounds),
            name: req.body.name,
            filename: req.file.filename
        };
        sounds.push(newSound);
        await dataManager.saveSounds(sounds);
        res.redirect('/sounds');
    } catch (error) {
        console.error('Error adding sound:', error);
        res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

router.post('/:id', upload.single('sound_file'), async (req, res) => {
    try {
        const sounds = await dataManager.getSounds();
        const soundIndex = sounds.findIndex(s => s.id === parseInt(req.params.id));
        
        if (soundIndex === -1) {
            return res.status(404).json({ error: 'Sound not found', details: `No sound with id ${req.params.id}` });
        }

        const updatedSound = sounds[soundIndex];
        updatedSound.name = req.body.name;

        if (req.file) {
            if (updatedSound.filename) {
                const oldFilePath = path.join(__dirname, '../public/sounds', updatedSound.filename);
                await fs.unlink(oldFilePath).catch(console.error);
            }
            updatedSound.filename = req.file.filename;
        }

        await dataManager.saveSounds(sounds);
        res.redirect('/sounds');
    } catch (error) {
        console.error('Error updating sound:', error);
        res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

router.post('/:id/play', async (req, res) => {
    try {
        const soundId = parseInt(req.params.id);
        console.log('Received request to play sound with ID:', soundId);

        const sounds = await dataManager.getSounds();
        const sound = sounds.find(s => s.id === soundId);
        
        if (!sound) {
            console.error('Sound not found for ID:', soundId);
            return res.status(404).json({ error: 'Sound not found', details: `No sound with id ${soundId}`, soundId });
        }

        console.log('Found sound:', sound);

        const filePath = path.resolve(__dirname, '..', 'public', 'sounds', sound.filename);
        console.log('Absolute file path:', filePath);

        try {
            await fs.access(filePath, fs.constants.R_OK);
            console.log('File exists and is readable:', filePath);
        } catch (error) {
            console.error('File access error:', error);
            return res.status(404).json({ error: 'Sound file not accessible', details: error.message, filePath });
        }

        const pythonScriptPath = path.resolve(__dirname, '..', 'scripts', 'play_sound.py');
        console.log('Python script path:', pythonScriptPath);

        const command = `python3 "${pythonScriptPath}" "${filePath}"`;
        console.log('Executing command:', command);

        const childProcess = spawn(command, { shell: true });

        let pythonOutput = '';
        let pythonError = '';

        childProcess.stdout.on('data', (data) => {
            pythonOutput += data.toString();
            console.log(`Python script output: ${data}`);
        });

        childProcess.stderr.on('data', (data) => {
            pythonError += data.toString();
            console.error(`Python script error: ${data}`);
        });

        childProcess.on('close', (code) => {
            console.log(`Python script exited with code ${code}`);
            if (code !== 0) {
                return res.status(500).json({ 
                    error: 'Error playing sound', 
                    details: `Python script exited with code ${code}`,
                    output: pythonOutput,
                    errorOutput: pythonError,
                    command: command
                });
            }
            res.status(200).json({ 
                message: 'Playing sound on character',
                pythonOutput,
                command: command
            });
        });

    } catch (error) {
        console.error('Error in /play route:', error);
        res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

router.post('/:id/delete', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const sounds = await dataManager.getSounds();
        const soundIndex = sounds.findIndex(s => s.id === id);
        
        if (soundIndex === -1) {
            return res.status(404).json({ error: 'Sound not found', details: `No sound with id ${id}` });
        }

        const soundToDelete = sounds[soundIndex];
        const filePath = path.join(__dirname, '../public/sounds', soundToDelete.filename);

        try {
            await fs.unlink(filePath);
        } catch (error) {
            console.error('Error deleting sound file:', error);
            if (error.code !== 'ENOENT') {
                return res.status(500).json({ error: 'Error deleting sound file', details: error.message });
            }
        }

        sounds.splice(soundIndex, 1);
        await dataManager.saveSounds(sounds);

        res.status(200).json({ message: 'Sound deleted successfully' });
    } catch (error) {
        console.error('Error deleting sound:', error);
        res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

module.exports = router;

================
File: scripts/active_mode_monitor.py
================
import RPi.GPIO as GPIO
import time
import json
import requests
from gpiozero import MotionSensor

# Load sensor and armed sensor data
try:
    with open('/home/remote/monsterbox/MonsterBox/data/sensors.json', 'r') as f:
        sensors = json.load(f)
except FileNotFoundError:
    print("sensors.json not found. Please make sure it exists and contains sensor data.")
    sensors = []

try:
    with open('/home/remote/monsterbox/MonsterBox/data/armedSensors.json', 'r') as f:
        armed_sensors = json.load(f)
except FileNotFoundError:
    print("armedSensors.json not found. Creating an empty file.")
    armed_sensors = []
    with open('/home/remote/monsterbox/MonsterBox/data/armedSensors.json', 'w') as f:
        json.dump(armed_sensors, f)

# Initialize GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Set up motion sensors
motion_sensors = {}
for sensor in sensors:
    if sensor['type'] == 'motion' and sensor.get('active', False):
        try:
            pin = sensor['gpioPin']
            GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
            motion_sensors[sensor['id']] = pin
            print(f"Set up motion sensor {sensor['id']} on GPIO pin {pin}")
        except Exception as e:
            print(f"Error setting up sensor {sensor['id']}: {str(e)}")

def trigger_scene(sensor_id, scene_id):
    print(f"Triggering scene {scene_id} for sensor {sensor_id}")
    try:
        requests.post('http://localhost:3000/scenes/trigger', json={'sensorId': sensor_id, 'sceneId': scene_id})
    except requests.exceptions.RequestException as e:
        print(f"Error triggering scene: {str(e)}")

try:
    print("Starting Active Mode Monitor")
    while True:
        for armed_sensor in armed_sensors:
            sensor_id = armed_sensor['sensorId']
            scene_id = armed_sensor['sceneId']
            if sensor_id in motion_sensors:
                if GPIO.input(motion_sensors[sensor_id]):
                    trigger_scene(sensor_id, scene_id)
                    time.sleep(1)  # Debounce
        time.sleep(0.1)  # Small delay to prevent CPU overuse

except KeyboardInterrupt:
    print("Stopping Active Mode Monitor")

finally:
    GPIO.cleanup()

================
File: scripts/led_control.py
================
import RPi.GPIO as GPIO
import sys
import time

def setup_gpio(pin):
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(pin, GPIO.OUT)
    return GPIO.PWM(pin, 100)  # 100 Hz PWM frequency

def control_led(pin, brightness, duration):
    pwm = setup_gpio(pin)
    try:
        pwm.start(brightness)
        time.sleep(duration / 1000)  # Convert duration to seconds
    finally:
        pwm.stop()
        GPIO.cleanup(pin)

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python led_control.py <pin> <brightness> <duration>")
        sys.exit(1)

    pin = int(sys.argv[1])
    brightness = int(sys.argv[2])
    duration = int(sys.argv[3])

    try:
        control_led(pin, brightness, duration)
        print("LED control successful")
    except Exception as e:
        print(f"Error controlling LED: {str(e)}")
        sys.exit(1)

================
File: scripts/light_control.py
================
import RPi.GPIO as GPIO
import time
import sys

def setup_gpio():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

def cleanup_gpio():
    GPIO.cleanup()

def control_light(gpio_pin, state, duration):
    setup_gpio()
    GPIO.setup(gpio_pin, GPIO.OUT)

    try:
        if state.lower() == 'on':
            GPIO.output(gpio_pin, GPIO.HIGH)
            print(f"Light on GPIO pin {gpio_pin} is ON")
        elif state.lower() == 'off':
            GPIO.output(gpio_pin, GPIO.LOW)
            print(f"Light on GPIO pin {gpio_pin} is OFF")
        else:
            print("Invalid state. Use 'on' or 'off'.")
            return

        time.sleep(float(duration) / 1000)  # Convert duration to seconds
    finally:
        cleanup_gpio()

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python light_control.py <gpio_pin> <state> <duration>")
        sys.exit(1)

    gpio_pin = int(sys.argv[1])
    state = sys.argv[2]
    duration = int(sys.argv[3])

    try:
        control_light(gpio_pin, state, duration)
        print("Light control completed successfully")
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
    finally:
        cleanup_gpio()

================
File: scripts/list_audio_devices.py
================
import pyaudio
import json

def list_audio_devices():
    p = pyaudio.PyAudio()
    devices = []

    for i in range(p.get_device_count()):
        device_info = p.get_device_info_by_index(i)
        if device_info['maxInputChannels'] > 0:
            devices.append({
                'index': i,
                'name': device_info['name'],
                'channels': device_info['maxInputChannels']
            })

    p.terminate()
    print(json.dumps(devices))

if __name__ == "__main__":
    list_audio_devices()

================
File: scripts/motor_control.py
================
import RPi.GPIO as GPIO
import sys
import time
import logging

# Set up logging
logging.basicConfig(filename='motor_control.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def setup_gpio():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

def cleanup_gpio():
    GPIO.cleanup()

def control_motor(direction, speed, duration, dir_pin, pwm_pin):
    logging.info(f"Controlling motor: direction={direction}, speed={speed}, duration={duration}, dir_pin={dir_pin}, pwm_pin={pwm_pin}")
    
    setup_gpio()
    GPIO.setup(dir_pin, GPIO.OUT)
    GPIO.setup(pwm_pin, GPIO.OUT)

    pwm = GPIO.PWM(pwm_pin, 100)  # Use a default frequency of 100 Hz
    pwm.start(0)

    try:
        GPIO.output(dir_pin, GPIO.HIGH if direction == 'forward' else GPIO.LOW)
        pwm.ChangeDutyCycle(int(speed))
        time.sleep(int(duration) / 1000)  # Convert duration to seconds
        pwm.ChangeDutyCycle(0)
    except Exception as e:
        logging.error(f"Error controlling motor: {str(e)}")
        raise
    finally:
        pwm.stop()
        cleanup_gpio()

if __name__ == "__main__":
    if len(sys.argv) != 6:
        logging.error("Incorrect number of arguments")
        print("Usage: python motor_control.py <direction> <speed> <duration> <dir_pin> <pwm_pin>")
        sys.exit(1)

    direction = sys.argv[1]
    speed = sys.argv[2]
    duration = sys.argv[3]
    dir_pin = int(sys.argv[4])
    pwm_pin = int(sys.argv[5])

    try:
        control_motor(direction, speed, duration, dir_pin, pwm_pin)
        print("Motor control successful")
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        print(f"Error: {str(e)}")
        sys.exit(1)

================
File: scripts/play_sound.py
================
import sys
import pygame

def play_sound(file_path):
    try:
        pygame.mixer.init()
        print(f"Playing sound from file: {file_path}")
        pygame.mixer.music.load(file_path)
        pygame.mixer.music.play()

        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)

        print("Sound playback finished.")
    except Exception as e:
        print(f"Error during sound playback: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python play_sound.py <file_path>")
        sys.exit(1)

    file_path = sys.argv[1]
    play_sound(file_path)

================
File: scripts/sensor_control.py
================
import RPi.GPIO as GPIO
import time
import sys

def setup_gpio():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

def cleanup_gpio():
    GPIO.cleanup()

def control_sensor(gpio_pin, timeout):
    setup_gpio()
    GPIO.setup(gpio_pin, GPIO.IN)

    print(f"Monitoring sensor on GPIO pin {gpio_pin} for {timeout} seconds")
    
    end_time = time.time() + float(timeout)
    while time.time() < end_time:
        if GPIO.input(gpio_pin):
            print("Motion detected!")
        else:
            print("No motion detected")
        time.sleep(0.5)

    cleanup_gpio()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python sensor_control.py <gpio_pin> <timeout>")
        sys.exit(1)

    gpio_pin = int(sys.argv[1])
    timeout = float(sys.argv[2])

    try:
        control_sensor(gpio_pin, timeout)
        print("Sensor monitoring completed successfully")
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
    finally:
        cleanup_gpio()

================
File: scripts/servo_control.py
================
import RPi.GPIO as GPIO
import sys
import time

def setup_gpio(pin):
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(pin, GPIO.OUT)
    return GPIO.PWM(pin, 50)  # 50 Hz PWM frequency

def angle_to_duty_cycle(angle):
    return 2 + (angle / 18)  # Maps 0-180 degrees to 2-12% duty cycle

def control_servo(pin, angle, speed, duration):
    pwm = setup_gpio(pin)
    try:
        pwm.start(0)
        duty_cycle = angle_to_duty_cycle(angle)
        pwm.ChangeDutyCycle(duty_cycle)
        time.sleep(duration / 1000)  # Convert duration to seconds
    finally:
        pwm.stop()
        GPIO.cleanup(pin)

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python servo_control.py <pin> <angle> <speed> <duration>")
        sys.exit(1)

    pin = int(sys.argv[1])
    angle = float(sys.argv[2])
    speed = float(sys.argv[3])  # Note: speed is not used in this basic implementation
    duration = int(sys.argv[4])

    try:
        control_servo(pin, angle, speed, duration)
        print("Servo control successful")
    except Exception as e:
        print(f"Error controlling servo: {str(e)}")
        sys.exit(1)

================
File: scripts/sound_detection.py
================
import pyaudio
import numpy as np
import sys
import json

def detect_sound(sensitivity):
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
    
    try:
        data = np.frombuffer(stream.read(1024), dtype=np.int16)
        sound_level = np.abs(data).mean()
        is_active = sound_level > sensitivity
    except Exception as e:
        print(f"Error detecting sound: {str(e)}", file=sys.stderr)
        is_active = False
    finally:
        stream.stop_stream()
        stream.close()
        p.terminate()
    
    return is_active

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python sound_detection.py <sensitivity>", file=sys.stderr)
        sys.exit(1)
    
    sensitivity = int(sys.argv[1])
    result = detect_sound(sensitivity)
    print(json.dumps({"isActive": result}))

================
File: scripts/test_led.py
================
import RPi.GPIO as GPIO
import sys
import time

def test_led(pin):
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(pin, GPIO.OUT)

    try:
        for _ in range(3):  # Blink 3 times
            GPIO.output(pin, GPIO.HIGH)
            time.sleep(2)  # On for 2 seconds
            GPIO.output(pin, GPIO.LOW)
            time.sleep(2)  # Off for 2 seconds
        print("LED test completed successfully")
    except Exception as e:
        print(f"Error during LED test: {str(e)}")
    finally:
        GPIO.cleanup()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python test_led.py <gpio_pin>")
        sys.exit(1)
    
    try:
        gpio_pin = int(sys.argv[1])
        test_led(gpio_pin)
    except ValueError:
        print("Invalid GPIO pin number")
        sys.exit(1)

================
File: scripts/test_sensor.py
================
from gpiozero import MotionSensor
import json
import sys
import time

def test_motion_sensor(pin, duration=30):
    pir = MotionSensor(pin)
    end_time = time.time() + duration

    while time.time() < end_time:
        if pir.motion_detected:
            print(json.dumps({"status": "Motion Detected"}), flush=True)
        else:
            print(json.dumps({"status": "No Motion"}), flush=True)
        time.sleep(0.5)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(json.dumps({"error": "Usage: python test_sensor.py <pin>"}), file=sys.stderr)
        sys.exit(1)
    
    try:
        pin = int(sys.argv[1])
        test_motion_sensor(pin)
    except ValueError:
        print(json.dumps({"error": "Invalid GPIO pin number"}), file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(json.dumps({"error": str(e)}), file=sys.stderr)
        sys.exit(1)

================
File: scripts/test_sound_sensor.py
================
import pyaudio
import numpy as np
import curses
import sys
import json

def select_input_device(stdscr, p):
    devices = []
    for i in range(p.get_device_count()):
        device_info = p.get_device_info_by_index(i)
        if device_info['maxInputChannels'] > 0:
            devices.append(device_info)
    
    stdscr.clear()
    stdscr.addstr("Available audio input devices:\n")
    for i, device in enumerate(devices):
        stdscr.addstr(f"{i}: {device['name']}\n")

    stdscr.addstr("\nEnter the device index for the microphone input: ")
    stdscr.refresh()

    curses.echo()
    device_index = int(stdscr.getstr().decode())
    curses.noecho()

    return devices[device_index]['index']

def print_sound(stdscr, in_data, frame_count, time_info, status):
    audio_data = np.frombuffer(in_data, dtype=np.float32)
    volume_norm = np.linalg.norm(audio_data) * 10
    bar = "|" * int(volume_norm)
    stdscr.addstr(0, 0, f"Sound level: {bar:<50}")
    stdscr.refresh()
    return (in_data, pyaudio.paContinue)

def test_sound_sensor(stdscr, device_index, threshold):
    p = pyaudio.PyAudio()

    if device_index is None:
        device_index = select_input_device(stdscr, p)

    stdscr.clear()
    stdscr.addstr(0, 0, "Initializing sound sensor...")
    stdscr.refresh()

    def callback(in_data, frame_count, time_info, status):
        print_sound(stdscr, in_data, frame_count, time_info, status)
        audio_data = np.frombuffer(in_data, dtype=np.float32)
        volume_norm = np.linalg.norm(audio_data) * 10
        if volume_norm > threshold:
            stdscr.addstr(1, 0, "Sound Detected!")
        else:
            stdscr.addstr(1, 0, "             ")
        stdscr.refresh()
        return (in_data, pyaudio.paContinue)

    stream = p.open(format=pyaudio.paFloat32,
                    channels=1,
                    rate=44100,
                    input=True,
                    input_device_index=device_index,
                    stream_callback=callback)

    stream.start_stream()

    stdscr.addstr(2, 0, "Listening... Press 'q' to stop.")
    stdscr.refresh()

    while True:
        key = stdscr.getch()
        if key == ord('q'):
            break

    stream.stop_stream()
    stream.close()
    p.terminate()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python test_sound_sensor.py <device_index> <threshold>")
        sys.exit(1)

    device_index = int(sys.argv[1]) if sys.argv[1] != "null" else None
    threshold = float(sys.argv[2])

    curses.wrapper(lambda stdscr: test_sound_sensor(stdscr, device_index, threshold))

================
File: services/characterService.js
================
const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '../data/characters.json');

const getAllCharacters = async () => {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        throw error;
    }
};

const getCharacterById = async (id) => {
    const characters = await getAllCharacters();
    return characters.find(character => character.id === parseInt(id));
};

const getNextId = (characters) => {
    return characters.length > 0 ? Math.max(...characters.map(c => c.id)) + 1 : 1;
};

const createCharacter = async (characterData) => {
    const characters = await getAllCharacters();
    const newCharacter = {
        id: getNextId(characters),
        ...characterData
    };
    characters.push(newCharacter);
    await fs.writeFile(dataPath, JSON.stringify(characters, null, 2));
    return newCharacter;
};

const updateCharacter = async (id, characterData) => {
    const characters = await getAllCharacters();
    const index = characters.findIndex(character => character.id === parseInt(id));
    if (index !== -1) {
        characters[index] = { ...characters[index], ...characterData, id: parseInt(id) };
        await fs.writeFile(dataPath, JSON.stringify(characters, null, 2));
        return characters[index];
    }
    throw new Error('Character not found');
};

const deleteCharacter = async (id) => {
    const characters = await getAllCharacters();
    const filteredCharacters = characters.filter(character => character.id !== parseInt(id));
    if (filteredCharacters.length === characters.length) {
        throw new Error('Character not found');
    }
    await fs.writeFile(dataPath, JSON.stringify(filteredCharacters, null, 2));
};

module.exports = {
    getAllCharacters,
    getCharacterById,
    createCharacter,
    updateCharacter,
    deleteCharacter
};

================
File: services/debug-scene-service.js
================
const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '../data/scenes.json');

const getAllScenes = async () => {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        console.log('Raw scenes data:', data);
        const scenes = JSON.parse(data);
        console.log('Parsed scenes:', scenes);
        return scenes;
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log('Scenes file not found, returning empty array');
            return [];
        }
        console.error('Error reading scenes file:', error);
        throw error;
    }
};

const getSceneById = async (id) => {
    console.log('Getting scene by ID:', id);
    const scenes = await getAllScenes();
    const scene = scenes.find(scene => scene.id === parseInt(id));
    console.log('Found scene:', scene);
    return scene;
};

const createScene = async (sceneData) => {
    const scenes = await getAllScenes();
    const newId = scenes.length > 0 ? Math.max(...scenes.map(s => parseInt(s.id) || 0)) + 1 : 1;
    const newScene = {
        id: newId,
        ...sceneData,
        steps: sceneData.steps || []
    };
    console.log('Creating new scene:', newScene);
    scenes.push(newScene);
    await fs.writeFile(dataPath, JSON.stringify(scenes, null, 2));
    return newScene;
};

const updateScene = async (id, sceneData) => {
    console.log('Updating scene:', id, sceneData);
    const scenes = await getAllScenes();
    const index = scenes.findIndex(scene => scene.id === parseInt(id));
    if (index !== -1) {
        scenes[index] = { ...scenes[index], ...sceneData, id: parseInt(id) };
        await fs.writeFile(dataPath, JSON.stringify(scenes, null, 2));
        console.log('Updated scene:', scenes[index]);
        return scenes[index];
    }
    console.log('Scene not found for update');
    throw new Error('Scene not found');
};

const deleteScene = async (id) => {
    console.log('Deleting scene:', id);
    const scenes = await getAllScenes();
    const filteredScenes = scenes.filter(scene => scene.id !== parseInt(id));
    if (filteredScenes.length === scenes.length) {
        console.log('Scene not found for deletion');
        throw new Error('Scene not found');
    }
    await fs.writeFile(dataPath, JSON.stringify(filteredScenes, null, 2));
    console.log('Scene deleted successfully');
};

module.exports = {
    getAllScenes,
    getSceneById,
    createScene,
    updateScene,
    deleteScene
};

================
File: services/partService.js
================
const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');

const dataPath = path.join(__dirname, '../data/parts.json');

const getAllParts = async () => {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        throw error;
    }
};

const getPartById = async (id) => {
    const parts = await getAllParts();
    const part = parts.find(part => part.id === parseInt(id));
    if (!part) {
        throw new Error(`Part not found with id: ${id}`);
    }
    return part;
};

const getNextId = (parts) => {
    return parts.length > 0 ? Math.max(...parts.map(p => p.id)) + 1 : 1;
};

const createPart = async (partData) => {
    const parts = await getAllParts();
    const newPart = {
        id: getNextId(parts),
        ...partData
    };
    parts.push(newPart);
    await fs.writeFile(dataPath, JSON.stringify(parts, null, 2));
    return newPart;
};

const updatePart = async (id, partData) => {
    const parts = await getAllParts();
    const index = parts.findIndex(part => part.id === parseInt(id));
    if (index !== -1) {
        parts[index] = {
            ...parts[index],
            ...partData,
            id: parseInt(id),
            name: partData.name,
            type: partData.type,
            characterId: parseInt(partData.characterId)
        };

        switch (parts[index].type) {
            case 'motor':
                parts[index].directionPin = partData.directionPin !== undefined ? parseInt(partData.directionPin) : null;
                parts[index].pwmPin = partData.pwmPin !== undefined ? parseInt(partData.pwmPin) : null;
                break;
            case 'sensor':
                parts[index].sensorType = partData.sensorType;
                parts[index].gpioPin = partData.gpioPin !== undefined ? parseInt(partData.gpioPin) : null;
                break;
            case 'led':
            case 'light':
                parts[index].gpioPin = partData.gpioPin !== undefined ? parseInt(partData.gpioPin) : null;
                break;
        }

        await fs.writeFile(dataPath, JSON.stringify(parts, null, 2));
        return parts[index];
    }
    throw new Error(`Part not found with id: ${id}`);
};

const deletePart = async (id) => {
    const parts = await getAllParts();
    const filteredParts = parts.filter(part => part.id !== parseInt(id));
    if (filteredParts.length === parts.length) {
        throw new Error(`Part not found with id: ${id}`);
    }
    await fs.writeFile(dataPath, JSON.stringify(filteredParts, null, 2));
};

const testMotor = async (partId, direction, speed, duration) => {
    const part = await getPartById(partId);
    if (!part || part.type !== 'motor') {
        throw new Error('Invalid motor part');
    }

    if (part.directionPin === null || part.pwmPin === null) {
        throw new Error('Motor pins are not properly configured');
    }

    const scriptPath = path.join(__dirname, '..', 'scripts', 'motor_control.py');
    return new Promise((resolve, reject) => {
        const process = spawn('python3', [
            scriptPath,
            direction,
            speed.toString(),
            duration.toString(),
            part.directionPin.toString(),
            part.pwmPin.toString()
        ]);
        
        let stdout = '';
        let stderr = '';

        process.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        process.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        process.on('close', (code) => {
            if (code === 0) {
                resolve({ success: true, message: 'Motor test completed', output: stdout });
            } else {
                reject(new Error(`Motor test failed with code ${code}: ${stderr}`));
            }
        });
    });
};

const testLight = async (partId, state, duration) => {
    const part = await getPartById(partId);
    if (!part || (part.type !== 'light' && part.type !== 'led')) {
        throw new Error('Invalid light/LED part');
    }

    if (part.gpioPin === null) {
        throw new Error('Light/LED pin is not properly configured');
    }

    const scriptPath = path.join(__dirname, '..', 'scripts', 'light_control.py');
    return new Promise((resolve, reject) => {
        const process = spawn('python3', [
            scriptPath,
            part.gpioPin.toString(),
            state,
            duration.toString()
        ]);
        
        let stdout = '';
        let stderr = '';

        process.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        process.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        process.on('close', (code) => {
            if (code === 0) {
                resolve({ success: true, message: 'Light/LED test completed', output: stdout });
            } else {
                reject(new Error(`Light/LED test failed with code ${code}: ${stderr}`));
            }
        });
    });
};

const testSensor = async (partId, timeout) => {
    const part = await getPartById(partId);
    if (!part || part.type !== 'sensor') {
        throw new Error('Invalid sensor part');
    }

    if (part.gpioPin === null) {
        throw new Error('Sensor pin is not properly configured');
    }

    const scriptPath = path.join(__dirname, '..', 'scripts', 'sensor_control.py');
    return new Promise((resolve, reject) => {
        const process = spawn('python3', [
            scriptPath,
            part.gpioPin.toString(),
            timeout.toString()
        ]);
        
        let stdout = '';
        let stderr = '';

        process.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        process.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        process.on('close', (code) => {
            if (code === 0) {
                resolve({ success: true, message: 'Sensor test completed', output: stdout });
            } else {
                reject(new Error(`Sensor test failed with code ${code}: ${stderr}`));
            }
        });
    });
};

module.exports = {
    getAllParts,
    getPartById,
    createPart,
    updatePart,
    deletePart,
    testMotor,
    testLight,
    testSensor
};

================
File: services/sceneService.js
================
const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '../data/scenes.json');

const getAllScenes = async () => {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        let scenes = JSON.parse(data);
        scenes = scenes.map(scene => ({
            ...scene,
            id: parseInt(scene.id)
        }));
        return scenes;
    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        throw error;
    }
};

const getSceneById = async (id) => {
    const scenes = await getAllScenes();
    return scenes.find(scene => scene.id === parseInt(id));
};

const getNextId = (scenes) => {
    return scenes.length > 0 ? Math.max(...scenes.map(s => parseInt(s.id) || 0)) + 1 : 1;
};

const createScene = async (sceneData) => {
    const scenes = await getAllScenes();
    const newScene = {
        id: getNextId(scenes),
        character_id: parseInt(sceneData.character_id),
        scene_name: sceneData.scene_name,
        steps: sceneData.steps || []
    };
    scenes.push(newScene);
    await fs.writeFile(dataPath, JSON.stringify(scenes, null, 2));
    return newScene;
};

const updateScene = async (id, sceneData) => {
    const scenes = await getAllScenes();
    const index = scenes.findIndex(scene => scene.id === parseInt(id));
    if (index !== -1) {
        scenes[index] = {
            ...scenes[index],
            ...sceneData,
            id: parseInt(id),
            character_id: parseInt(sceneData.character_id),
            steps: sceneData.steps || scenes[index].steps
        };
        await fs.writeFile(dataPath, JSON.stringify(scenes, null, 2));
        return scenes[index];
    }
    throw new Error('Scene not found');
};

const deleteScene = async (id) => {
    const scenes = await getAllScenes();
    const filteredScenes = scenes.filter(scene => scene.id !== parseInt(id));
    if (filteredScenes.length === scenes.length) {
        throw new Error('Scene not found');
    }
    await fs.writeFile(dataPath, JSON.stringify(filteredScenes, null, 2));
};

module.exports = {
    getAllScenes,
    getSceneById,
    createScene,
    updateScene,
    deleteScene
};

================
File: services/soundService.js
================
const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '../data/sounds.json');

const getAllSounds = async () => {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        throw error;
    }
};

const getSoundById = async (id) => {
    const sounds = await getAllSounds();
    return sounds.find(sound => sound.id === parseInt(id));
};

const getNextId = (sounds) => {
    return sounds.length > 0 ? Math.max(...sounds.map(s => s.id)) + 1 : 1;
};

const createSound = async (soundData) => {
    const sounds = await getAllSounds();
    const newSound = {
        id: getNextId(sounds),
        ...soundData
    };
    sounds.push(newSound);
    await fs.writeFile(dataPath, JSON.stringify(sounds, null, 2));
    return newSound;
};

const updateSound = async (id, soundData) => {
    const sounds = await getAllSounds();
    const index = sounds.findIndex(sound => sound.id === parseInt(id));
    if (index !== -1) {
        sounds[index] = { ...sounds[index], ...soundData, id: parseInt(id) };
        await fs.writeFile(dataPath, JSON.stringify(sounds, null, 2));
        return sounds[index];
    }
    throw new Error('Sound not found');
};

const deleteSound = async (id) => {
    const sounds = await getAllSounds();
    const filteredSounds = sounds.filter(sound => sound.id !== parseInt(id));
    if (filteredSounds.length === sounds.length) {
        throw new Error('Sound not found');
    }
    await fs.writeFile(dataPath, JSON.stringify(filteredSounds, null, 2));
};

module.exports = {
    getAllSounds,
    getSoundById,
    createSound,
    updateSound,
    deleteSound
};

================
File: test/sceneService.test.js
================
// test/sceneService.test.js
const { expect } = require('chai');
const {
    getAllScenes,
    getSceneById,
    createScene,
    updateScene,
    deleteScene
} = require('../services/sceneService');

describe('Scene Service', () => {
    it('should return all scenes', async () => {
        const scenes = await getAllScenes();
        expect(scenes).to.be.an('array');
    });

    it('should return a specific scene by id', async () => {
        const scenes = await getAllScenes();
        if (scenes.length > 0) {
            const sceneId = scenes[0].id;
            const scene = await getSceneById(sceneId);
            expect(scene).to.be.an('object');
            expect(scene).to.have.property('id');
            expect(scene.id).to.equal(sceneId);
        } else {
            console.log('No scenes available to test getSceneById');
        }
    });

    // Add more tests for create, update, and delete
    it('should create a new scene', async () => {
        const newScene = {
            character_id: 1,
            scene_name: 'Test Scene',
            steps: []
        };
        const createdScene = await createScene(newScene);
        expect(createdScene).to.be.an('object');
        expect(createdScene).to.have.property('id');
        expect(createdScene.scene_name).to.equal(newScene.scene_name);
    });

    it('should update an existing scene', async () => {
        const scenes = await getAllScenes();
        if (scenes.length > 0) {
            const sceneToUpdate = scenes[0];
            const updatedData = {
                scene_name: 'Updated Test Scene'
            };
            const updatedScene = await updateScene(sceneToUpdate.id, updatedData);
            expect(updatedScene).to.be.an('object');
            expect(updatedScene.id).to.equal(sceneToUpdate.id);
            expect(updatedScene.scene_name).to.equal(updatedData.scene_name);
        } else {
            console.log('No scenes available to test updateScene');
        }
    });

    it('should delete a scene', async () => {
        const scenes = await getAllScenes();
        if (scenes.length > 0) {
            const sceneToDelete = scenes[scenes.length - 1];
            await deleteScene(sceneToDelete.id);
            const updatedScenes = await getAllScenes();
            expect(updatedScenes.find(scene => scene.id === sceneToDelete.id)).to.be.undefined;
        } else {
            console.log('No scenes available to test deleteScene');
        }
    });
});

================
File: views/partials/character-selection.ejs
================
<div>
    <label for="scene_name">Scene Name:</label>
    <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
</div>
<div>
    <label for="character_id">Character:</label>
    <select id="character_id" name="character_id" required onchange="updateCharacterParts()">
        <% characters.forEach(function(character) { %>
            <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                <%= character.char_name %>
            </option>
        <% }); %>
    </select>
</div>

================
File: views/partials/step-form.ejs
================
<div class="stepForm" data-scene-id="<%= step.scene_id %>">
    <label>Step Type:</label>
    <select name="type">
        <option value="motor" <%= step.type === 'motor' ? 'selected' : '' %>>Motor</option>
        <option value="light" <%= step.type === 'light' ? 'selected' : '' %>>Light</option>
        <option value="sound" <%= step.type === 'sound' ? 'selected' : '' %>>Sound</option>
        <option value="led" <%= step.type === 'led' ? 'selected' : '' %>>LED</option>
        <option value="sensor" <%= step.type === 'sensor' ? 'selected' : '' %>>Sensor</option>
    </select>

    <% if (step.type === 'motor') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
        <label>Direction:</label>
        <input type="text" name="direction" value="<%= step.direction %>">
        <label>Speed:</label>
        <input type="number" name="speed" value="<%= step.speed %>">
    <% } else if (step.type === 'light') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
    <% } else if (step.type === 'sound') { %>
        <label>Sound ID:</label>
        <input type="text" name="sound_id" value="<%= step.sound_id %>">
    <% } else if (step.type === 'led') { %>
        <label>Duration:</label>
        <input type="number" name="duration" value="<%= step.duration %>">
        <label>Color:</label>
        <input type="text" name="color" value="<%= step.color %>">
    <% } else if (step.type === 'sensor') { %>
        <label>Timeout (seconds):</label>
        <input type="number" name="timeout" value="<%= step.timeout || 30 %>">
    <% } %>

    <button type="button" class="saveStepButton">Save Step</button>
</div>

================
File: views/partials/step-list.ejs
================
<div id="steps">
    <h3>Steps</h3>
    <div id="step-list" class="sortable">
        <!-- Existing steps will be loaded here -->
    </div>
    <button type="button" id="add-step-button" onclick="addStep()">Add Step</button>
</div>

<script>
    const characterParts = {};
    const characterSounds = {};

    <% characters.forEach(function(character) { %>
        characterParts[<%= character.id %>] = [
            <% character.parts.forEach(function(partId) { %>
                <% const part = parts.find(p => p.id === partId); %>
                <% if (part) { %>
                    { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                <% } %>
            <% }); %>
        ];
        characterSounds[<%= character.id %>] = [
            <% character.sounds.forEach(function(soundId) { %>
                <% const sound = sounds.find(s => s.id === soundId); %>
                <% if (sound) { %>
                    { id: <%= sound.id %>, name: "<%= sound.name %>" },
                <% } %>
            <% }); %>
        ];
    <% }); %>

    function loadExistingSteps(steps) {
        steps.forEach((step, index) => {
            addStep();
            const stepDiv = document.querySelector('.step:last-of-type');
            stepDiv.querySelector('.step-name').value = step.name || '';
            stepDiv.querySelector('.concurrent').checked = step.concurrent;
            stepDiv.querySelector('.action-type').value = step.type;
            updateActionFields(stepDiv.querySelector('.action-type'), step);

            if (step.type === 'sound') {
                stepDiv.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                stepDiv.querySelector('.part-id').value = step.part_id;
                stepDiv.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    stepDiv.querySelector('.direction').value = step.direction;
                    stepDiv.querySelector('.speed').value = step.speed;
                }
            }
        });
    }

    function addStep() {
        const stepList = document.getElementById('step-list');
        const currentStepCount = stepList.children.length;
        const stepDiv = document.createElement('div');
        stepDiv.className = 'step';
        stepDiv.innerHTML = `
            <h4>Step ${currentStepCount + 1}</h4>
            <input type="text" class="step-name" placeholder="Step Name" onchange="updateStepsJson()">
            <label>
                Concurrent:
                <input type="checkbox" class="concurrent" onchange="updateStepsJson()">
            </label>
            <select class="action-type" onchange="updateActionFields(this)">
                <option value="">Select Action</option>
                <option value="sound">Play Sound</option>
                <option value="motor">Move Motor</option>
                <option value="servo">Move Servo</option>
                <option value="light">Control Light</option>
            </select>
            <div class="action-fields"></div>
            <button type="button" onclick="removeStep(this)">Remove Step</button>
        `;
        stepList.appendChild(stepDiv);
        updateStepNumbers();
        updateStepsJson();
    }

    function removeStep(button) {
        button.closest('.step').remove();
        updateStepNumbers();
        updateStepsJson();
    }

    function updateStepNumbers() {
        const steps = document.querySelectorAll('.step');
        steps.forEach((step, index) => {
            const stepHeader = step.querySelector('h4');
            if (stepHeader) {
                stepHeader.textContent = `Step ${index + 1}`;
            }
        });
    }

    function updateActionFields(select, step = null) {
        const actionFields = select.nextElementSibling;
        const characterId = document.getElementById('character_id').value;
        const actionType = select.value;

        actionFields.innerHTML = '';

        if (actionType === 'sound') {
            const sounds = characterSounds[characterId];
            actionFields.innerHTML += `
                <select class="sound-id" onchange="updateStepsJson()">
                    ${sounds.map(sound => `<option value="${sound.id}">${sound.name}</option>`).join('')}
                </select>
            `;
        } else if (actionType === 'motor') {
            const parts = characterParts[characterId].filter(part => part.type === actionType);
            actionFields.innerHTML += `
                <select class="part-id" onchange="updateStepsJson()">
                    ${parts.map(part => `<option value="${part.id}">${part.name}</option>`).join('')}
                </select>
                <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                <select class="direction" onchange="updateStepsJson()">
                    <option value="F">Forward</option>
                    <option value="R">Reverse</option>
                </select>
                <input type="number" class="speed" placeholder="Speed (0-100)" min="0" max="100" onchange="updateStepsJson()">
                <button type="button" class="test-motor-button" onclick="testMotor(this)">Test Motor</button>
            `;
        }

        if (step) {
            if (step.type === 'sound') {
                actionFields.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                actionFields.querySelector('.part-id').value = step.part_id;
                actionFields.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    actionFields.querySelector('.direction').value = step.direction;
                    actionFields.querySelector('.speed').value = step.speed;
                }
            }
        }

        updateStepsJson();
    }

    function updateStepsJson() {
        const steps = [];
        document.querySelectorAll('.step').forEach((stepDiv) => {
            const step = {
                name: stepDiv.querySelector('.step-name').value,
                concurrent: stepDiv.querySelector('.concurrent').checked,
                type: stepDiv.querySelector('.action-type').value
            };

            if (step.type === 'sound') {
                step.sound_id = stepDiv.querySelector('.sound-id').value;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                step.part_id = parseInt(stepDiv.querySelector('.part-id').value);
                step.duration = parseInt(stepDiv.querySelector('.duration').value);

                if (step.type === 'motor') {
                    step.direction = stepDiv.querySelector('.direction').value;
                    step.speed = parseInt(stepDiv.querySelector('.speed').value);
                }
            }

            steps.push(step);
        });

        document.getElementById('steps_json').value = JSON.stringify(steps);
    }

    function testMotor(button) {
        const stepDiv = button.closest('.step');
        const direction = stepDiv.querySelector('.direction').value;
        const speed = stepDiv.querySelector('.speed').value;
        const duration = stepDiv.querySelector('.duration').value;
        const partId = stepDiv.querySelector('.part-id').value;

        // Replace with actual logic to retrieve pins for the selected part
        const directionPin = 18; // Example value
        const pwmPin = 24; // Example value

        axios.post('/motor/control-motor', {
            direction: direction,
            speed: parseInt(speed),
            duration: parseInt(duration),
            directionPin: directionPin,
            pwmPin: pwmPin
        })
        .then(function (response) {
            alert('Motor test successful!');
        })
        .catch(function (error) {
            alert('Error testing motor: ' + (error.response ? error.response.data : error.message));
        });
    }

    function updateCharacterParts() {
        const characterId = document.getElementById('character_id').value;
        document.querySelectorAll('.step').forEach(stepDiv => {
            const actionType = stepDiv.querySelector('.action-type').value;
            if (actionType) {
                updateActionFields(stepDiv.querySelector('.action-type'));
            }
        });
    }

    // Load existing steps if editing a scene
    const existingSteps = <%= JSON.stringify(scene.steps || []) %>;
    loadExistingSteps(existingSteps);

    updateStepsJson();

    // Make steps sortable
    $(function() {
        $("#step-list").sortable({
            update: function(event, ui) {
                updateStepNumbers();
                updateStepsJson();
            }
        });
    });

    document.getElementById('sceneForm').onsubmit = function() {
        updateStepsJson();
        return true;
    };
</script>

================
File: views/step-forms/led-step.ejs
================
<form id="ledStepForm" onsubmit="event.preventDefault(); saveStep(new FormData(this));">
    <input type="hidden" name="type" value="led">
    <input type="hidden" name="stepIndex" value="<%= stepIndex %>">
    
    <div>
        <label for="part_id">LED:</label>
        <select name="part_id" required>
            <% ledParts.forEach(function(part) { %>
                <option value="<%= part.id %>"><%= part.name %></option>
            <% }); %>
        </select>
    </div>
    
    <div>
        <label for="brightness">Brightness (0-100):</label>
        <input type="number" name="brightness" min="0" max="100" required>
    </div>
    
    <div>
        <label for="duration">Duration (ms):</label>
        <input type="number" name="duration" min="0" required>
    </div>
    
    <div>
        <label for="concurrent">Concurrent:</label>
        <input type="checkbox" name="concurrent">
    </div>
    
    <div>
        <label for="description">Description:</label>
        <input type="text" name="description" required>
    </div>
    
    <button type="submit">Save Step</button>
    <button type="button" onclick="$('#stepFormContainer').hide();">Cancel</button>
</form>

<button type="button" onclick="testLED()">Test LED</button>

<script>
    function testLED() {
        const formData = new FormData(document.getElementById('ledStepForm'));
        $.post('/parts/test-led', formData)
            .done(function(response) {
                alert('LED test successful');
            })
            .fail(function(xhr, status, error) {
                alert('Error testing LED: ' + error);
            });
    }
</script>

================
File: views/step-forms/light-step.ejs
================
<form id="lightStepForm" onsubmit="event.preventDefault(); saveStep(new FormData(this));">
    <input type="hidden" name="type" value="light">
    <input type="hidden" name="stepIndex" value="<%= stepIndex %>">
    
    <div>
        <label for="part_id">Light:</label>
        <select name="part_id" required>
            <% lightParts.forEach(function(part) { %>
                <option value="<%= part.id %>"><%= part.name %></option>
            <% }); %>
        </select>
    </div>
    
    <div>
        <label for="state">State:</label>
        <select name="state" required>
            <option value="on">On</option>
            <option value="off">Off</option>
        </select>
    </div>
    
    <div>
        <label for="duration">Duration (ms):</label>
        <input type="number" name="duration" min="0" required>
    </div>
    
    <div>
        <label for="concurrent">Concurrent:</label>
        <input type="checkbox" name="concurrent">
    </div>
    
    <div>
        <label for="description">Description:</label>
        <input type="text" name="description" required>
    </div>
    
    <button type="submit">Save Step</button>
    <button type="button" onclick="$('#stepFormContainer').hide();">Cancel</button>
</form>

<button type="button" onclick="testLight()">Test Light</button>

<script>
    function testLight() {
        const formData = new FormData(document.getElementById('lightStepForm'));
        $.post('/parts/test-light', formData)
            .done(function(response) {
                alert('Light test successful');
            })
            .fail(function(xhr, status, error) {
                alert('Error testing light: ' + error);
            });
    }
</script>

================
File: views/step-forms/motor-step.ejs
================
<form id="motorStepForm" onsubmit="event.preventDefault(); saveStep(new FormData(this));">
    <input type="hidden" name="type" value="motor">
    <input type="hidden" name="stepIndex" value="<%= stepIndex %>">
    
    <div>
        <label for="part_id">Motor:</label>
        <select name="part_id" required>
            <% motorParts.forEach(function(part) { %>
                <option value="<%= part.id %>"><%= part.name %></option>
            <% }); %>
        </select>
    </div>
    
    <div>
        <label for="direction">Direction:</label>
        <select name="direction" required>
            <option value="forward">Forward</option>
            <option value="backward">Backward</option>
        </select>
    </div>
    
    <div>
        <label for="speed">Speed (0-100):</label>
        <input type="number" name="speed" min="0" max="100" required>
    </div>
    
    <div>
        <label for="duration">Duration (ms):</label>
        <input type="number" name="duration" min="0" required>
    </div>
    
    <div>
        <label for="concurrent">Concurrent:</label>
        <input type="checkbox" name="concurrent">
    </div>
    
    <div>
        <label for="description">Description:</label>
        <input type="text" name="description" required>
    </div>
    
    <button type="submit">Save Step</button>
    <button type="button" onclick="$('#stepFormContainer').hide();">Cancel</button>
</form>

<button type="button" onclick="testMotor()">Test Motor</button>

<script>
    function testMotor() {
        const formData = new FormData(document.getElementById('motorStepForm'));
        $.post('/parts/test-motor', formData)
            .done(function(response) {
                alert('Motor test successful');
            })
            .fail(function(xhr, status, error) {
                alert('Error testing motor: ' + error);
            });
    }
</script>

================
File: views/step-forms/pause-step.ejs
================
<form id="pauseStepForm" onsubmit="event.preventDefault(); saveStep(new FormData(this));">
    <input type="hidden" name="type" value="pause">
    <input type="hidden" name="stepIndex" value="<%= stepIndex %>">
    
    <div>
        <label for="duration">Duration (ms):</label>
        <input type="number" name="duration" min="0" required>
    </div>
    
    <div>
        <label for="description">Description:</label>
        <input type="text" name="description" required>
    </div>
    
    <button type="submit">Save Step</button>
    <button type="button" onclick="$('#stepFormContainer').hide();">Cancel</button>
</form>

================
File: views/step-forms/sound-step.ejs
================
<form id="soundStepForm" onsubmit="event.preventDefault(); saveStep(new FormData(this));">
    <input type="hidden" name="type" value="sound">
    <input type="hidden" name="stepIndex" value="<%= stepIndex %>">
    
    <div>
        <label for="sound_id">Sound:</label>
        <select name="sound_id" required>
            <% sounds.forEach(function(sound) { %>
                <option value="<%= sound.id %>"><%= sound.name %></option>
            <% }); %>
        </select>
    </div>
    
    <div>
        <label for="concurrent">Concurrent:</label>
        <input type="checkbox" name="concurrent">
    </div>
    
    <div>
        <label for="description">Description:</label>
        <input type="text" name="description" required>
    </div>
    
    <button type="submit">Save Step</button>
    <button type="button" onclick="$('#stepFormContainer').hide();">Cancel</button>
</form>

<button type="button" onclick="testSound()">Test Sound</button>

<script>
    function testSound() {
        const formData = new FormData(document.getElementById('soundStepForm'));
        $.post('/sounds/test', formData)
            .done(function(response) {
                alert('Sound test successful');
            })
            .fail(function(xhr, status, error) {
                alert('Error testing sound: ' + error);
            });
    }
</script>

================
File: views/active-mode.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        .sensor-indicator {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .sensor-indicator.inactive {
            background-color: red;
        }
        .sensor-indicator.active {
            background-color: green;
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    
    <div id="character-selection">
        <label for="character-select">Select Character:</label>
        <select id="character-select">
            <option value="">Select a character</option>
            <% characters.forEach(function(character) { %>
                <option value="<%= character.id %>"><%= character.char_name %></option>
            <% }); %>
        </select>
    </div>

    <div id="sensor-list" style="display: none;">
        <h2>Available Sensors</h2>
        <table>
            <thead>
                <tr>
                    <th>Sensor Name</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Sensors will be populated here -->
            </tbody>
        </table>
    </div>

    <div id="scene-selection" style="display: none;">
        <h2>Pair Sensor with Scene</h2>
        <select id="sensor-select">
            <!-- Sensors will be populated here -->
        </select>
        <select id="scene-select">
            <!-- Scenes will be populated here -->
        </select>
        <button id="pair-button">Pair Sensor with Scene</button>
    </div>

    <div id="armed-sensors">
        <h2>Armed Sensors</h2>
        <ul id="armed-sensors-list">
            <!-- Armed sensors will be populated here -->
        </ul>
    </div>

    <button id="start-active-mode">Start Active Mode</button>
    <button id="stop-active-mode" disabled>Stop Active Mode</button>

    <a href="/" class="button">Back to Main Menu</a>

    <script>
        $(document).ready(function() {
            let selectedCharacterId = null;
            let activeModeRunning = false;

            $('#character-select').change(function() {
                selectedCharacterId = $(this).val();
                if (selectedCharacterId) {
                    loadSensors(selectedCharacterId);
                    loadScenes(selectedCharacterId);
                    $('#sensor-list, #scene-selection').show();
                } else {
                    $('#sensor-list, #scene-selection').hide();
                }
            });

            function loadSensors(characterId) {
                const sensorTableBody = $('#sensor-list tbody');
                const sensorSelect = $('#sensor-select');
                sensorTableBody.empty();
                sensorSelect.empty();

                <% sensors.forEach(function(sensor) { %>
                    if (<%= sensor.characterId %> == characterId) {
                        sensorTableBody.append(`
                            <tr>
                                <td><%= sensor.name %></td>
                                <td><%= sensor.type %></td>
                                <td>
                                    <input type="radio" name="sensor-<%= sensor.id %>" value="active" ${<%= sensor.active %> ? 'checked' : ''} class="sensor-status"> Active
                                    <input type="radio" name="sensor-<%= sensor.id %>" value="inactive" ${!<%= sensor.active %> ? 'checked' : ''} class="sensor-status"> Inactive
                                </td>
                                <td>
                                    <div class="sensor-indicator ${<%= sensor.active %> ? 'active' : 'inactive'}" data-sensor-id="<%= sensor.id %>"></div>
                                </td>
                            </tr>
                        `);
                        sensorSelect.append(`<option value="<%= sensor.id %>"><%= sensor.name %></option>`);
                    }
                <% }); %>

                $('.sensor-status').change(function() {
                    const sensorId = $(this).attr('name').split('-')[1];
                    const active = $(this).val() === 'active';
                    toggleSensor(sensorId, active);
                });
            }

            function loadScenes(characterId) {
                const sceneSelect = $('#scene-select');
                sceneSelect.empty();

                <% scenes.forEach(function(scene) { %>
                    if (<%= scene.character_id %> == characterId) {
                        sceneSelect.append(`<option value="<%= scene.id %>"><%= scene.scene_name %></option>`);
                    }
                <% }); %>
            }

            function toggleSensor(sensorId, active) {
                $.post('/active-mode/toggle-sensor', { sensorId, active })
                    .done(function() {
                        const indicator = $(`.sensor-indicator[data-sensor-id="${sensorId}"]`);
                        indicator.toggleClass('active', active).toggleClass('inactive', !active);
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error toggling sensor:', error);
                        alert('Error toggling sensor: ' + xhr.responseText);
                    });
            }

            $('#pair-button').click(function() {
                const sensorId = $('#sensor-select').val();
                const sceneId = $('#scene-select').val();
                if (sensorId && sceneId) {
                    $.post('/active-mode/arm-sensor', { sensorId, sceneId })
                        .done(function() {
                            updateArmedSensors();
                        })
                        .fail(function(xhr, status, error) {
                            console.error('Error arming sensor:', error);
                            alert('Error arming sensor: ' + xhr.responseText);
                        });
                } else {
                    alert('Please select both a sensor and a scene.');
                }
            });

            function updateArmedSensors() {
                $.get('/active-mode/armed-sensors')
                    .done(function(armedSensors) {
                        const armedSensorsList = $('#armed-sensors-list');
                        armedSensorsList.empty();
                        armedSensors.forEach(function(armedSensor) {
                            const sensorName = $(`#sensor-select option[value="${armedSensor.sensorId}"]`).text();
                            const sceneName = $(`#scene-select option[value="${armedSensor.sceneId}"]`).text();
                            armedSensorsList.append(`
                                <li>
                                    <div class="sensor-indicator inactive" data-sensor-id="${armedSensor.sensorId}"></div>
                                    ${sensorName} - ${sceneName}
                                </li>
                            `);
                        });
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error updating armed sensors:', error);
                    });
            }

            $('#start-active-mode').click(function() {
                $.post('/active-mode/start')
                    .done(function() {
                        activeModeRunning = true;
                        $('#start-active-mode').prop('disabled', true);
                        $('#stop-active-mode').prop('disabled', false);
                        alert('Active Mode started');
                        startSensorSimulation();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error starting Active Mode:', error);
                        alert('Error starting Active Mode: ' + xhr.responseText);
                    });
            });

            $('#stop-active-mode').click(function() {
                $.post('/active-mode/stop')
                    .done(function() {
                        activeModeRunning = false;
                        $('#start-active-mode').prop('disabled', false);
                        $('#stop-active-mode').prop('disabled', true);
                        alert('Active Mode stopped');
                        stopSensorSimulation();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error stopping Active Mode:', error);
                        alert('Error stopping Active Mode: ' + xhr.responseText);
                    });
            });

            function startSensorSimulation() {
                sensorSimulationInterval = setInterval(function() {
                    $('.sensor-indicator').each(function() {
                        const shouldActivate = Math.random() < 0.3; // 30% chance of activation
                        $(this).toggleClass('active', shouldActivate).toggleClass('inactive', !shouldActivate);
                        
                        if (shouldActivate) {
                            const sensorId = $(this).data('sensor-id');
                            const sensorName = $(`#sensor-select option[value="${sensorId}"]`).text();
                            const sceneName = $('#armed-sensors-list').find(`[data-sensor-id="${sensorId}"]`).closest('li').text().split('-')[1].trim();
                            alert(`Sensor "${sensorName}" activated! Triggering scene "${sceneName}"`);
                        }
                    });
                }, 5000);
            }

            function stopSensorSimulation() {
                clearInterval(sensorSimulationInterval);
                $('.sensor-indicator').removeClass('active').addClass('inactive');
            }

            // Initial update of armed sensors
            updateArmedSensors();
        });
    </script>
</body>
</html>

================
File: views/character-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (character.id) { %>
            <input type="hidden" name="id" value="<%= character.id %>">
        <% } %>
        <div>
            <label for="char_name">Name:</label>
            <input type="text" id="char_name" name="char_name" value="<%= character.char_name || '' %>" required>
        </div>
        <div>
            <label for="char_description">Description:</label>
            <textarea id="char_description" name="char_description" required><%= character.char_description || '' %></textarea>
        </div>
        <div>
            <label for="character_image">Character Image:</label>
            <input type="file" id="character_image" name="character_image" accept="image/*">
            <% if (character.image) { %>
                <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 200px;">
            <% } %>
        </div>
        <div>
            <label>Parts:</label>
            <div id="parts-container">
                <div id="available-parts">
                    <h4>Available Parts:</h4>
                    <select id="available-parts-select" multiple>
                        <% parts.filter(part => !character.parts || !character.parts.includes(part.id)).forEach(function(part) { %>
                            <option value="<%= part.id %>"><%= part.name %> (<%= part.type %>)</option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addPart()">Add &gt;</button>
                    <button type="button" onclick="removePart()">&lt; Remove</button>
                </div>
                <div id="selected-parts">
                    <h4>Selected Parts:</h4>
                    <select id="selected-parts-select" name="parts" multiple>
                        <% if (character.parts) { %>
                            <% character.parts.forEach(function(partId) { %>
                                <% const part = parts.find(p => p.id === partId); %>
                                <% if (part) { %>
                                    <option value="<%= part.id %>"><%= part.name %> (<%= part.type %>)</option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <div>
            <label>Sounds:</label>
            <div id="sounds-container">
                <div id="available-sounds">
                    <h4>Available Sounds:</h4>
                    <select id="available-sounds-select" multiple>
                        <% sounds.filter(sound => !character.sounds || !character.sounds.includes(sound.id)).forEach(function(sound) { %>
                            <option value="<%= sound.id %>"><%= sound.name %></option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addSound()">Add &gt;</button>
                    <button type="button" onclick="removeSound()">&lt; Remove</button>
                </div>
                <div id="selected-sounds">
                    <h4>Selected Sounds:</h4>
                    <select id="selected-sounds-select" name="sounds" multiple>
                        <% if (character.sounds) { %>
                            <% character.sounds.forEach(function(soundId) { %>
                                <% const sound = sounds.find(s => s.id === soundId); %>
                                <% if (sound) { %>
                                    <option value="<%= sound.id %>"><%= sound.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit">Save Character</button>
    </form>
    <a href="/characters" class="button">Back to Characters</a>

    <script>
        function addPart() {
            moveOptions('available-parts-select', 'selected-parts-select');
        }

        function removePart() {
            moveOptions('selected-parts-select', 'available-parts-select');
        }

        function addSound() {
            moveOptions('available-sounds-select', 'selected-sounds-select');
        }

        function removeSound() {
            moveOptions('selected-sounds-select', 'available-sounds-select');
        }

        function moveOptions(fromId, toId) {
            const fromSelect = document.getElementById(fromId);
            const toSelect = document.getElementById(toId);
            
            for (let option of Array.from(fromSelect.selectedOptions)) {
                toSelect.add(option);
                option.selected = false;
            }
            updateAvailableOptions();
        }

        function updateAvailableOptions() {
            const availableParts = document.getElementById('available-parts-select');
            const selectedParts = document.getElementById('selected-parts-select');
            const availableSounds = document.getElementById('available-sounds-select');
            const selectedSounds = document.getElementById('selected-sounds-select');

            for (let option of availableParts.options) {
                option.disabled = Array.from(selectedParts.options).some(o => o.value === option.value);
            }

            for (let option of availableSounds.options) {
                option.disabled = Array.from(selectedSounds.options).some(o => o.value === option.value);
            }
        }

        // Ensure all options are selected before form submission
        document.querySelector('form').onsubmit = function() {
            const selectedParts = document.getElementById('selected-parts-select');
            const selectedSounds = document.getElementById('selected-sounds-select');
            
            for (let option of selectedParts.options) {
                option.selected = true;
            }
            
            for (let option of selectedSounds.options) {
                option.selected = true;
            }
            
            return true;
        };

        // Initialize available options
        updateAvailableOptions();
    </script>
</body>
</html>

================
File: views/characters.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/characters/new" class="button">Add New Character</a>
    <table>
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Parts</th>
                <th>Sounds</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% characters.forEach(function(character) { %>
                <tr>
                    <td>
                        <% if (character.image) { %>
                            <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 100px;">
                        <% } else { %>
                            No Image
                        <% } %>
                    </td>
                    <td><%= character.char_name %></td>
                    <td><%= character.char_description %></td>
                    <td>
                        <% character.parts.forEach(function(partId) { %>
                            <% const part = parts.find(p => p.id === partId); %>
                            <% if (part) { %>
                                <%= part.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <% character.sounds.forEach(function(soundId) { %>
                            <% const sound = sounds.find(s => s.id === soundId); %>
                            <% if (sound) { %>
                                <%= sound.name %><br>
                            <% } %>
                        <% }); %>
                    </td>
                    <td>
                        <a href="/characters/<%= character.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteCharacter(<%= character.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteCharacter(id) {
            if (confirm('Are you sure you want to delete this character?')) {
                $.post('/characters/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting character: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MonsterBox Control Panel</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Creepster&display=swap">
</head>
<body>
    <header>
        <h1>MonsterBox(tm)</h1>
    </header>
    <main>
        <h2>Welcome to the MonsterBox Control Panel</h2>
        <p>Choose an option from the menu to get started.</p>
    </main>

    <nav>
        <ul>
            <li><a href="/scenes">Scenes</a></li>
            <li><a href="/characters">Characters</a></li>
            <li><a href="/parts">Parts</a></li>
            <li><a href="/sounds">Sounds</a></li>
            <li><a href="/sensors">Sensors</a></li>
            <li><a href="/motor">Motor Control</a></li>
        </ul>
    </nav>
    <p>An animatronic automation package by ARW 8.15.2024.</p>
</body>
</html>

================
File: views/motor-index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    
    <h2>Motor Settings</h2>
    <form id="settingsForm" action="/motor/save-settings" method="POST">
        <label for="dirPin">Direction Pin:</label>
        <input type="number" id="dirPin" name="dirPin" value="<%= settings.dirPin %>" required>
        
        <label for="pwmPin">PWM Pin:</label>
        <input type="number" id="pwmPin" name="pwmPin" value="<%= settings.pwmPin %>" required>
        
        <button type="submit">Save Settings</button>
    </form>

    <h2>Motor Control</h2>
    <div id="controlPanel">
        <div class="direction-control">
            <label>Direction:</label>
            <div class="radio-group">
                <input type="radio" id="forward" name="direction" value="forward" checked>
                <label for="forward">Forward</label>
                <input type="radio" id="backward" name="direction" value="backward">
                <label for="backward">Backward</label>
            </div>
        </div>
        
        <label for="speed">Speed:</label>
        <input type="range" id="speed" min="0" max="100" value="50">
        <span id="speedValue">50</span>
        
        <label for="duration">Duration (ms):</label>
        <input type="range" id="duration" min="100" max="5000" value="1000">
        <span id="durationValue">1000</span>
        
        <button id="runMotor">Run Motor</button>
    </div>

    <a href="/" class="button">Back to Main Menu</a>

    <script>
        const speedSlider = document.getElementById('speed');
        const speedValue = document.getElementById('speedValue');
        const durationSlider = document.getElementById('duration');
        const durationValue = document.getElementById('durationValue');
        const runMotorButton = document.getElementById('runMotor');

        speedSlider.oninput = function() {
            speedValue.textContent = this.value;
        }

        durationSlider.oninput = function() {
            durationValue.textContent = this.value;
        }

        runMotorButton.onclick = function() {
            const direction = document.querySelector('input[name="direction"]:checked').value;
            const speed = speedSlider.value;
            const duration = durationSlider.value;
            const directionPin = document.getElementById('dirPin').value;
            const pwmPin = document.getElementById('pwmPin').value;

            axios.post('/motor/control-motor', {
                direction: direction,
                speed: speed,
                duration: duration,
                directionPin: directionPin,
                pwmPin: pwmPin
            })
            .then(function (response) {
                console.log('Motor controlled successfully');
                alert('Motor control successful!');
            })
            .catch(function (error) {
                console.error('Error controlling motor:', error);
                alert('Error controlling motor: ' + (error.response ? error.response.data : error.message));
            });
        }
    </script>
</body>
</html>

================
File: views/part-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part.name || '' %>" required>
        </div>
        <div>
            <label for="type">Type:</label>
            <select id="type" name="type" required onchange="toggleInputs()">
                <option value="motor" <%= part.type === 'motor' ? 'selected' : '' %>>Motor</option>
                <option value="light" <%= part.type === 'light' ? 'selected' : '' %>>Light</option>
                <option value="led" <%= part.type === 'led' ? 'selected' : '' %>>LED</option>
                <option value="servo" <%= part.type === 'servo' ? 'selected' : '' %>>Servo</option>
                <option value="sensor" <%= part.type === 'sensor' ? 'selected' : '' %>>Sensor</option>
            </select>
        </div>
        <div>
            <label for="characterId">Character:</label>
            <select id="characterId" name="characterId" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (part.characterId === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div id="motorInputs" style="display: none;">
            <div>
                <label for="directionPin">Direction Pin:</label>
                <input type="number" id="directionPin" name="directionPin" value="<%= part.directionPin || '' %>">
            </div>
            <div>
                <label for="pwmPin">PWM Pin:</label>
                <input type="number" id="pwmPin" name="pwmPin" value="<%= part.pwmPin || '' %>">
            </div>
        </div>
        <div id="singlePinInputs" style="display: none;">
            <div>
                <label for="pin">GPIO Pin:</label>
                <input type="number" id="pin" name="pin" value="<%= part.pin || '' %>">
            </div>
        </div>
        <div id="sensorInputs" style="display: none;">
            <div>
                <label for="sensorType">Sensor Type:</label>
                <select id="sensorType" name="sensorType">
                    <option value="motion" <%= part.sensorType === 'motion' ? 'selected' : '' %>>Motion</option>
                    <option value="sound" <%= part.sensorType === 'sound' ? 'selected' : '' %>>Sound</option>
                </select>
            </div>
        </div>
        <div id="ledInputs" style="display: none;">
            <div>
                <label for="ledPin">GPIO Pin:</label>
                <input type="number" id="ledPin" name="ledPin" value="<%= part.ledPin || '' %>" min="0" max="40">
            </div>
            <div>
                <label for="duration">Duration (ms):</label>
                <input type="number" id="duration" name="duration" value="<%= part.duration || '' %>" min="0">
            </div>
        </div>
        <button type="submit">Save Part</button>
        <button type="button" id="testPartButton" onclick="testPart()">Test Part</button>
    </form>
    <div id="testArea" style="display: none;">
        <h2>Test Results</h2>
        <p id="testStatus">Not testing</p>
    </div>
    <a href="/parts" class="button">Back to Parts</a>

    <script>
        function toggleInputs() {
            const type = document.getElementById('type').value;
            document.getElementById('motorInputs').style.display = type === 'motor' ? 'block' : 'none';
            document.getElementById('singlePinInputs').style.display = ['light', 'servo'].includes(type) ? 'block' : 'none';
            document.getElementById('sensorInputs').style.display = type === 'sensor' ? 'block' : 'none';
            document.getElementById('ledInputs').style.display = type === 'led' ? 'block' : 'none';
            document.getElementById('testArea').style.display = 'block';
        }

        // Call toggleInputs on page load to set initial state
        toggleInputs();

        function testPart() {
            const type = document.getElementById('type').value;
            const testStatus = document.getElementById('testStatus');
            testStatus.textContent = 'Testing...';

            let testData = { type: type };

            switch (type) {
                case 'motor':
                    testData.directionPin = document.getElementById('directionPin').value;
                    testData.pwmPin = document.getElementById('pwmPin').value;
                    testData.direction = 'forward';
                    testData.speed = 50;
                    testData.duration = 1000;
                    break;
                case 'light':
                case 'servo':
                    testData.pin = document.getElementById('pin').value;
                    testData.duration = 1000;
                    break;
                case 'led':
                    testData.ledPin = document.getElementById('ledPin').value;
                    testData.duration = document.getElementById('duration').value;
                    break;
                case 'sensor':
                    testData.pin = document.getElementById('pin').value;
                    testData.sensorType = document.getElementById('sensorType').value;
                    break;
            }

            axios.post('/parts/test', testData)
                .then(function (response) {
                    testStatus.textContent = 'Test completed: ' + response.data.message;
                })
                .catch(function (error) {
                    console.error('Error testing part:', error);
                    testStatus.textContent = 'Error testing part: ' + (error.response ? error.response.data : error.message);
                });
        }
    </script>
</body>
</html>

================
File: views/parts.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/parts/new" class="button">Add New Part</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Character</th>
                <th>Pin Details</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% parts.forEach(function(part) { %>
                <tr>
                    <td><%= part.name %></td>
                    <td><%= part.type %></td>
                    <td><%= characters.find(c => c.id === parseInt(part.characterId))?.char_name || 'N/A' %></td>
                    <td>
                        <% if (part.type === 'motor') { %>
                            Dir Pin: <%= part.directionPin %><br>
                            PWM Pin: <%= part.pwmPin %>
                        <% } else if (part.type === 'led') { %>
                            LED Pin: <%= part.ledPin %><br>
                            Duration: <%= part.duration %> ms
                        <% } else if (['light', 'servo', 'sensor'].includes(part.type)) { %>
                            Pin: <%= part.pin %>
                        <% } %>
                    </td>
                    <td>
                        <a href="/parts/<%= part.id %>/edit" class="button">Edit</a>
                        <button onclick="deletePart(<%= part.id %>)" class="button">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deletePart(id) {
            if (confirm('Are you sure you want to delete this part?')) {
                $.post('/parts/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting part: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/scene-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form id="sceneForm" action="<%= action %>" method="POST">
        <input type="hidden" name="id" value="<%= scene.id %>">
        
        <div>
            <label for="character_id">Character:</label>
            <select id="character_id" name="character_id" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (scene.character_id === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div>
            <label for="scene_name">Scene Name:</label>
            <input type="text" id="scene_name" name="scene_name" value="<%= scene.scene_name || '' %>" required>
        </div>

        <h2>Steps</h2>
        <div id="steps">
            <% (scene.steps || []).forEach(function(step, index) { %>
                <div class="step" data-index="<%= index %>">
                    <h3>Step <%= index + 1 %></h3>
                    <input type="hidden" name="steps[<%= index %>][type]" value="<%= step.type %>">
                    <input type="text" name="steps[<%= index %>][name]" value="<%= step.name %>" placeholder="Step Name" required>
                    <% if (step.type === 'sound') { %>
                        <select name="steps[<%= index %>][sound_id]" required>
                            <% sounds.forEach(function(sound) { %>
                                <option value="<%= sound.id %>" <%= (step.sound_id === sound.id) ? 'selected' : '' %>><%= sound.name %></option>
                            <% }); %>
                        </select>
                        <label>
                            <input type="checkbox" name="steps[<%= index %>][concurrent]" <%= step.concurrent ? 'checked' : '' %>>
                            Play concurrently
                        </label>
                    <% } else if (step.type === 'motor') { %>
                        <select name="steps[<%= index %>][part_id]" required>
                            <% parts.filter(part => part.type === 'motor').forEach(function(part) { %>
                                <option value="<%= part.id %>" <%= (step.part_id === part.id) ? 'selected' : '' %>><%= part.name %></option>
                            <% }); %>
                        </select>
                        <input type="number" name="steps[<%= index %>][duration]" value="<%= step.duration || '' %>" placeholder="Duration (ms)" required>
                        <select name="steps[<%= index %>][direction]" required>
                            <option value="forward" <%= step.direction === 'forward' ? 'selected' : '' %>>Forward</option>
                            <option value="backward" <%= step.direction === 'backward' ? 'selected' : '' %>>Backward</option>
                        </select>
                        <input type="number" name="steps[<%= index %>][speed]" value="<%= step.speed || '' %>" placeholder="Speed (0-100)" min="0" max="100" required>
                    <% } else if (step.type === 'led' || step.type === 'light') { %>
                        <select name="steps[<%= index %>][part_id]" required>
                            <% parts.filter(part => part.type === step.type).forEach(function(part) { %>
                                <option value="<%= part.id %>" <%= (step.part_id === part.id) ? 'selected' : '' %>><%= part.name %></option>
                            <% }); %>
                        </select>
                        <input type="number" name="steps[<%= index %>][duration]" value="<%= step.duration || '' %>" placeholder="Duration (ms)" required>
                        <select name="steps[<%= index %>][state]" required>
                            <option value="on" <%= step.state === 'on' ? 'selected' : '' %>>On</option>
                            <option value="off" <%= step.state === 'off' ? 'selected' : '' %>>Off</option>
                        </select>
                        <% if (step.type === 'led') { %>
                            <input type="number" name="steps[<%= index %>][brightness]" value="<%= step.brightness || '' %>" placeholder="Brightness (0-100)" min="0" max="100" required>
                        <% } %>
                    <% } else if (step.type === 'sensor') { %>
                        <select name="steps[<%= index %>][part_id]" required>
                            <% parts.filter(part => part.type === 'sensor').forEach(function(part) { %>
                                <option value="<%= part.id %>" <%= (step.part_id === part.id) ? 'selected' : '' %>><%= part.name %></option>
                            <% }); %>
                        </select>
                        <input type="number" name="steps[<%= index %>][timeout]" value="<%= step.timeout || 30 %>" placeholder="Timeout (seconds)" required>
                    <% } %>
                    <button type="button" onclick="removeStep(<%= index %>)">Remove Step</button>
                </div>
            <% }); %>
        </div>
        
        <button type="button" onclick="addStep('motor')">Add Motor</button>
        <button type="button" onclick="addStep('sound')">Add Sound</button>
        <button type="button" onclick="addStep('led')">Add LED</button>
        <button type="button" onclick="addStep('light')">Add Light</button>
        <button type="button" onclick="addStep('sensor')">Add Sensor</button>
        <button type="submit">Save Scene</button>
    </form>

    <a href="/scenes" class="button">Back to Scenes</a>

    <script>
        $(document).ready(function() {
            $('#character_id').change(function() {
                updatePartOptions();
            });

            // Initial update of part options
            updatePartOptions();
        });

        function updatePartOptions() {
            const characterId = $('#character_id').val();
            $.ajax({
                url: '/characters/' + characterId + '/parts',
                method: 'GET',
                success: function(parts) {
                    window.availableParts = parts;
                    updateStepPartOptions();
                },
                error: function(error) {
                    console.error('Error fetching parts:', error);
                }
            });
        }

        function updateStepPartOptions() {
            $('.step').each(function() {
                const stepType = $(this).find('input[name$="[type]"]').val();
                const partSelect = $(this).find('select[name$="[part_id]"]');
                if (partSelect.length) {
                    const currentValue = partSelect.val();
                    partSelect.empty();
                    window.availableParts.filter(part => part.type === stepType).forEach(part => {
                        partSelect.append($('<option>', {
                            value: part.id,
                            text: part.name,
                            selected: part.id == currentValue
                        }));
                    });
                }
            });
        }

        function addStep(type) {
            const steps = document.getElementById('steps');
            const stepCount = steps.children.length;
            const newStep = document.createElement('div');
            newStep.className = 'step';
            newStep.dataset.index = stepCount;

            let stepContent = `
                <h3>Step ${stepCount + 1}</h3>
                <input type="hidden" name="steps[${stepCount}][type]" value="${type}">
                <input type="text" name="steps[${stepCount}][name]" placeholder="Step Name" required>
            `;

            if (type === 'sound') {
                stepContent += `
                    <select name="steps[${stepCount}][sound_id]" required>
                        <% sounds.forEach(function(sound) { %>
                            <option value="<%= sound.id %>"><%= sound.name %></option>
                        <% }); %>
                    </select>
                    <label>
                        <input type="checkbox" name="steps[${stepCount}][concurrent]">
                        Play concurrently
                    </label>
                `;
            } else if (type === 'motor') {
                stepContent += `
                    <select name="steps[${stepCount}][part_id]" required>
                        ${getPartOptions('motor')}
                    </select>
                    <input type="number" name="steps[${stepCount}][duration]" placeholder="Duration (ms)" required>
                    <select name="steps[${stepCount}][direction]" required>
                        <option value="forward">Forward</option>
                        <option value="backward">Backward</option>
                    </select>
                    <input type="number" name="steps[${stepCount}][speed]" placeholder="Speed (0-100)" min="0" max="100" required>
                `;
            } else if (type === 'led' || type === 'light') {
                stepContent += `
                    <select name="steps[${stepCount}][part_id]" required>
                        ${getPartOptions(type)}
                    </select>
                    <input type="number" name="steps[${stepCount}][duration]" placeholder="Duration (ms)" required>
                    <select name="steps[${stepCount}][state]" required>
                        <option value="on">On</option>
                        <option value="off">Off</option>
                    </select>
                `;
                if (type === 'led') {
                    stepContent += `
                        <input type="number" name="steps[${stepCount}][brightness]" placeholder="Brightness (0-100)" min="0" max="100" required>
                    `;
                }
            } else if (type === 'sensor') {
                stepContent += `
                    <select name="steps[${stepCount}][part_id]" required>
                        ${getPartOptions('sensor')}
                    </select>
                    <input type="number" name="steps[${stepCount}][timeout]" placeholder="Timeout (seconds)" value="30" required>
                `;
            }

            stepContent += `<button type="button" onclick="removeStep(${stepCount})">Remove Step</button>`;

            newStep.innerHTML = stepContent;
            steps.appendChild(newStep);
        }

        function getPartOptions(type) {
            if (!window.availableParts) {
                return '<option value="">Please select a character first</option>';
            }
            return window.availableParts
                .filter(part => part.type === type)
                .map(part => `<option value="${part.id}">${part.name}</option>`)
                .join('');
        }

        function removeStep(index) {
            const steps = document.getElementById('steps');
            steps.removeChild(steps.children[index]);
            updateStepNumbers();
        }

        function updateStepNumbers() {
            const steps = document.getElementById('steps').children;
            for (let i = 0; i < steps.length; i++) {
                steps[i].querySelector('h3').textContent = `Step ${i + 1}`;
                steps[i].dataset.index = i;
                updateStepInputNames(steps[i], i);
            }
        }

        function updateStepInputNames(stepElement, newIndex) {
            const inputs = stepElement.querySelectorAll('input, select');
            inputs.forEach(input => {
                const name = input.getAttribute('name');
                if (name) {
                    input.setAttribute('name', name.replace(/steps\[\d+\]/, `steps[${newIndex}]`));
                }
            });
        }
    </script>
</body>
</html>

================
File: views/scene-player.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #log-box {
            border: 1px solid #00ff00;
            padding: 10px;
            height: 200px;
            overflow-y: scroll;
            background-color: #001100;
            color: #00ff00;
            font-family: 'Courier New', monospace;
            margin-bottom: 20px;
        }
        #controls {
            margin-top: 20px;
        }
        #controls button {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    <h2><%= scene.scene_name %></h2>
    
    <div id="log-box"></div>
    
    <div id="controls">
        <button id="backward-btn">Backward</button>
        <button id="run-btn">Run</button>
        <button id="forward-btn">Forward</button>
    </div>
    
    <a href="/scenes" class="button">Back to Scenes</a>

    <script>
        $(document).ready(function() {
            let currentStep = 0;  // Start at the first step
            const sceneData = <%- JSON.stringify(scene) %>;
            const steps = sceneData.steps || [];

            function logMessage(message) {
                const logBox = $("#log-box");
                logBox.append(`<p>${new Date().toLocaleTimeString()} - ${message}</p>`);
                logBox.scrollTop(logBox[0].scrollHeight);
                console.log(message);
            }

            function executeStep(step) {
                return new Promise((resolve, reject) => {
                    logMessage(`Executing step: ${step.name}`);
                    $.ajax({
                        url: `/scenes/${sceneData.id}/execute-step`,
                        method: 'POST',
                        data: JSON.stringify(step),
                        contentType: 'application/json',
                        success: function(response) {
                            logMessage(`Step ${step.name} executed successfully`);
                            resolve(response);
                        },
                        error: function(xhr, status, error) {
                            logMessage(`Error executing step ${step.name}: ${error}`);
                            reject(error);
                        }
                    });
                });
            }

            $("#backward-btn").click(function() {
                if (currentStep > 0) {
                    currentStep--;
                    logMessage(`Moved to step ${currentStep + 1}: ${steps[currentStep].name}`);
                } else {
                    logMessage("Already at the beginning of the scene");
                }
            });

            $("#forward-btn").click(function() {
                if (currentStep < steps.length - 1) {
                    currentStep++;
                    logMessage(`Moved to step ${currentStep + 1}: ${steps[currentStep].name}`);
                } else {
                    logMessage("Reached the end of the scene");
                }
            });

            $("#run-btn").click(function() {
                logMessage(`Running scene from step ${currentStep + 1}`);
                runFromCurrentStep();
            });

            function runFromCurrentStep() {
                if (currentStep < steps.length) {
                    executeStep(steps[currentStep])
                        .then(() => {
                            currentStep++;
                            if (steps[currentStep - 1].concurrent || currentStep === steps.length) {
                                runFromCurrentStep();
                            } else {
                                setTimeout(runFromCurrentStep, 1000);
                            }
                        })
                        .catch((error) => {
                            logMessage(`Error in step execution: ${error}`);
                        });
                } else {
                    logMessage("Scene execution completed");
                }
            }

            // Initial scene overview
            logMessage(`Scene Overview: "${sceneData.scene_name}"`);
            logMessage(`Total steps: ${steps.length}`);
            steps.forEach((step, index) => {
                logMessage(`Step ${index + 1}: ${step.name} (Type: ${step.type})`);
            });
        });
    </script>
</body>
</html>

================
File: views/scenes.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/scenes/new" class="button">Add New Scene</a>
    <table>
        <thead>
            <tr>
                <th>Scene Name</th>
                <th>Character</th>
                <th>Steps</th>
                <th>Actions</th>
                <th>Operations</th>
            </tr>
        </thead>
        <tbody>
            <% scenes.forEach(function(scene) { %>
                <tr>
                    <td><%= scene.scene_name %></td>
                    <td><%= characters.find(c => c.id === scene.character_id)?.char_name || 'N/A' %></td>
                    <td><%= scene.steps ? scene.steps.length : 0 %></td>
                    <td>
                        <% if (scene.steps) { %>
                            <ul>
                                <% scene.steps.forEach(function(step) { %>
                                    <li><%= step.name %></li>
                                <% }); %>
                            </ul>
                        <% } %>
                    </td>
                    <td>
                        <a href="/scenes/<%= scene.id %>/edit" class="button edit-scene" data-id="<%= scene.id %>">Edit</a>
                        <button onclick="deleteScene('<%= scene.id %>')" class="button">Delete</button>
                        <a href="/scenes/<%= scene.id %>/play" class="button play-scene" data-id="<%= scene.id %>">Run</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteScene(id) {
            console.log('Attempting to delete scene:', id);
            if (confirm('Are you sure you want to delete this scene?')) {
                $.ajax({
                    url: '/scenes/' + id,
                    type: 'DELETE',
                    success: function(result) {
                        console.log('Scene deleted successfully');
                        location.reload();
                    },
                    error: function(xhr, status, error) {
                        console.error('Error deleting scene:', error);
                        console.error('Server response:', xhr.responseText);
                        alert('Error deleting scene: ' + error);
                    }
                });
            }
        }

        $(document).ready(function() {
            $('.edit-scene').on('click', function(e) {
                e.preventDefault();
                var id = $(this).data('id');
                var url = '/scenes/' + id + '/edit';
                console.log('Attempting to edit scene:', id);
                console.log('Edit URL:', url);
                window.location.href = url;
            });

            $('.play-scene').on('click', function(e) {
                e.preventDefault();
                var id = $(this).data('id');
                var url = '/scenes/' + id + '/play';
                console.log('Attempting to play scene:', id);
                console.log('Play URL:', url);
                window.location.href = url;
            });
        });
    </script>
</body>
</html>

================
File: views/sensor-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <% if (sensor.id) { %>
            <input type="hidden" name="id" value="<%= sensor.id %>">
        <% } %>
        <div>
            <label for="name">Sensor Name:</label>
            <input type="text" id="name" name="name" value="<%= sensor.name || '' %>" required>
        </div>
        <div>
            <label for="type">Type:</label>
            <select id="type" name="type" required>
                <option value="motion" <%= sensor.type === 'motion' ? 'selected' : '' %>>Motion</option>
                <option value="sound" <%= sensor.type === 'sound' ? 'selected' : '' %>>Sound</option>
            </select>
        </div>
        <div>
            <label for="characterId">Character:</label>
            <select id="characterId" name="characterId" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (sensor.characterId === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div>
            <label for="gpioPin">GPIO Pin:</label>
            <input type="number" id="gpioPin" name="gpioPin" value="<%= sensor.gpioPin || '' %>" required>
        </div>
        <div>
            <label for="active">
                <input type="checkbox" id="active" name="active" <%= sensor.active ? 'checked' : '' %>>
                Active
            </label>
        </div>
        <button type="submit">Save Sensor</button>
    </form>
    <a href="/sensors" class="button">Back to Sensors</a>

    <script>
        const characterParts = {
            <% if (typeof parts !== 'undefined') { %>
                <% characters.forEach(function(character) { %>
                    <%= character.id %>: [
                        <% parts.filter(part => part.characterId === character.id).forEach(function(part) { %>
                            { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                        <% }); %>
                    ],
                <% }); %>
            <% } %>
        };

        function updateAvailableParts() {
            const characterId = document.getElementById('characterId').value;
            const availableParts = characterParts[characterId] || [];
            
            document.querySelectorAll('.part-select').forEach(select => {
                const currentValue = select.value;
                select.innerHTML = '';
                availableParts.forEach(part => {
                    const option = document.createElement('option');
                    option.value = part.id;
                    option.textContent = part.name;
                    select.appendChild(option);
                });
                select.value = currentValue;
            });
        }

        document.getElementById('characterId').addEventListener('change', updateAvailableParts);
        updateAvailableParts();
    </script>
</body>
</html>

================
File: views/sensor-test.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Creepster&display=swap');

        .motion-detected {
            color: red;
            font-family: 'Creepster', cursive;
            font-size: 1.2em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    <h2>Testing <%= sensor.name %> (<%= sensor.type %> sensor)</h2>
    
    <p id="statusText">Sensor status: Not testing</p>
    
    <form id="testForm">
        <input type="hidden" name="id" value="<%= sensor.id %>">
        
        <div>
            <label for="gpioPin">GPIO Pin:</label>
            <input type="number" id="gpioPin" name="gpioPin" value="<%= sensor.gpioPin %>" required>
        </div>
        
        <button type="button" id="startTest">Start Test</button>
        <button type="button" id="stopTest" disabled>Stop Test</button>
    </form>
    
    <a href="/sensors" class="button">Back to Sensors</a>

    <script>
        let eventSource;
        
        function updateSensorStatus(status) {
            const statusText = $('#statusText');
            statusText.text('Sensor status: ' + status);
            
            if (status === 'Motion Detected') {
                statusText.addClass('motion-detected');
            } else {
                statusText.removeClass('motion-detected');
            }
        }
        
        function startTest() {
            const formData = new FormData($('#testForm')[0]);
            const queryString = new URLSearchParams(formData).toString();
            eventSource = new EventSource('/sensors/test?' + queryString);

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);
                if (data.status) {
                    updateSensorStatus(data.status);
                } else if (data.error) {
                    console.error('Error:', data.error);
                    updateSensorStatus('Error: ' + data.error);
                    stopTest();
                } else if (data.done) {
                    stopTest();
                }
            };

            eventSource.onerror = function(event) {
                console.error('EventSource failed:', event);
                stopTest();
            };

            $('#startTest').prop('disabled', true);
            $('#stopTest').prop('disabled', false);
        }
        
        function stopTest() {
            if (eventSource) {
                eventSource.close();
            }
            $('#startTest').prop('disabled', false);
            $('#stopTest').prop('disabled', true);
            updateSensorStatus('Not testing');
        }
        
        $('#startTest').click(startTest);
        $('#stopTest').click(stopTest);
    </script>
</body>
</html>

================
File: views/sensors.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sensors/new" class="button">Add New Sensor</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Character</th>
                <th>GPIO Pin</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sensors.forEach(function(sensor) { %>
                <tr>
                    <td><%= sensor.name %></td>
                    <td><%= sensor.type %></td>
                    <td><%= characters.find(c => c.id === sensor.characterId)?.char_name || 'N/A' %></td>
                    <td><%= sensor.gpioPin %></td>
                    <td><%= sensor.active ? 'Yes' : 'No' %></td>
                    <td>
                        <a href="/sensors/<%= sensor.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteSensor(<%= sensor.id %>)" class="button">Delete</button>
                        <a href="/sensors/<%= sensor.id %>/test" class="button">Test</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <script>
        function deleteSensor(id) {
            if (confirm('Are you sure you want to delete this sensor?')) {
                $.post('/sensors/' + id + '/delete')
                    .done(function() {
                        location.reload();
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Error details:', xhr.responseText);
                        alert('Error deleting sensor: ' + xhr.status + ' ' + xhr.statusText);
                    });
            }
        }
    </script>
</body>
</html>

================
File: views/sound-form.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (sound && sound.id) { %>
            <input type="hidden" name="id" value="<%= sound.id %>">
        <% } %>
        <div>
            <label for="name">Sound Name:</label>
            <input type="text" id="name" name="name" value="<%= sound ? sound.name : '' %>" required>
        </div>
        <div>
            <label for="sound_file">Sound File:</label>
            <input type="file" id="sound_file" name="sound_file" accept="audio/*" <%= sound && sound.id ? '' : 'required' %>>
            <% if (sound && sound.filename) { %>
                <p>Current file: <%= sound.filename %></p>
                <input type="hidden" name="current_filename" value="<%= sound.filename %>">
            <% } %>
        </div>
        <button type="submit">Save Sound</button>
    </form>
    <a href="/sounds" class="button">Back to Sounds</a>
</body>
</html>

================
File: views/sounds.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <a href="/sounds/new" class="button">Add New Sound</a>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Filename</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sounds.forEach(function(sound) { %>
                <tr>
                    <td><%= sound.name %></td>
                    <td><%= sound.filename %></td>
                    <td>
                        <button onclick="playOnCharacter(<%= sound.id %>)">Play (on Character)</button>
                        <button onclick="playLocal('<%= sound.filename %>')">Play (local)</button>
                        <a href="/sounds/<%= sound.id %>/edit" class="button">Edit</a>
                        <button onclick="deleteSound(<%= sound.id %>)">Delete</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <a href="/" class="button">Back to Main Menu</a>

    <div id="soundInfo"></div>
    <div id="errorInfo" style="color: red;"></div>

    <script>
        function playLocal(filename) {
            const audio = new Audio(`/sounds/${filename}`);
            audio.play().catch(error => {
                console.error('Error playing sound locally:', error);
                displayError('Error playing sound locally: ' + error.message);
            });
        }

        function playOnCharacter(soundId) {
            console.log('Attempting to play sound with ID:', soundId);
            fetch(`/sounds/${soundId}/play`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw err; });
                }
                return response.json();
            })
            .then(data => {
                console.log('Server response:', data);
                const soundInfo = `
                    <h3>Sound Details:</h3>
                    <p>Message: ${data.message}</p>
                    <p>Python Output: ${data.pythonOutput}</p>
                    <p>Executed Command: ${data.command}</p>
                `;
                document.getElementById('soundInfo').innerHTML = soundInfo;
                document.getElementById('errorInfo').innerHTML = '';
            })
            .catch(error => {
                console.error('Error playing sound on character:', error);
                let errorMessage = 'Error playing sound on character: ';
                if (error.error) {
                    errorMessage += error.error;
                    if (error.details) errorMessage += ' - ' + error.details;
                    if (error.output) errorMessage += ' (Output: ' + error.output + ')';
                    if (error.errorOutput) errorMessage += ' (Error Output: ' + error.errorOutput + ')';
                    if (error.command) errorMessage += ' (Command: ' + error.command + ')';
                } else {
                    errorMessage += error.toString();
                }
                displayError(errorMessage);
            });
        }

        function deleteSound(id) {
            if (confirm('Are you sure you want to delete this sound?')) {
                fetch('/sounds/' + id + '/delete', { method: 'POST' })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Delete sound response:', data);
                    location.reload();
                })
                .catch(error => {
                    console.error('Error deleting sound:', error);
                    let errorMessage = 'Error deleting sound: ';
                    if (error.error) {
                        errorMessage += error.error;
                        if (error.details) errorMessage += ' - ' + error.details;
                    } else {
                        errorMessage += error.toString();
                    }
                    displayError(errorMessage);
                });
            }
        }

        function displayError(message) {
            document.getElementById('errorInfo').innerHTML = message;
            document.getElementById('soundInfo').innerHTML = '';
        }
    </script>
</body>
</html>

================
File: .gitignore
================
.repopack-output.txt
.motor_control.log

================
File: app.js
================
const express = require('express');
const path = require('path');
const app = express();
const port = 3000;

// Import routes
const motorRoutes = require('./routes/motorRoutes');
const sceneRoutes = require('./routes/sceneRoutes');
const characterRoutes = require('./routes/characterRoutes');
const partRoutes = require('./routes/partRoutes');
const soundRoutes = require('./routes/soundRoutes');
const sensorRoutes = require('./routes/sensorRoutes');
const activeModeRoutes = require('./routes/activeModeRoutes');

// Basic Express setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Routes
app.use('/motor', motorRoutes);
app.use('/scenes', sceneRoutes);
app.use('/characters', characterRoutes);
app.use('/parts', partRoutes);
app.use('/sounds', soundRoutes);
app.use('/sensors', sensorRoutes);
app.use('/active-mode', activeModeRoutes);

// Main menu route
app.get('/', (req, res) => {
    res.render('index', { title: 'MonsterBox Control Panel' });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start the server
app.listen(port, () => {
    console.log(`MonsterBox server running at http://localhost:${port}`);
});

module.exports = app;

================
File: dataManager.js
================
const fs = require('fs').promises;
const path = require('path');

const dataDir = '/home/remote/monsterbox/MonsterBox/data';

const ensureDataDirExists = async () => {
    try {
        await fs.access(dataDir);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.mkdir(dataDir, { recursive: true });
        } else {
            throw error;
        }
    }
};

const readData = async (filename) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        await ensureDataDirExists();
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log(`File ${filename}.json not found. Returning empty array.`);
            return [];
        }
        console.error(`Error reading ${filename}:`, error);
        throw error;
    }
};

const writeData = async (filename, data) => {
    const filePath = path.join(dataDir, `${filename}.json`);
    try {
        await ensureDataDirExists();
        await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    } catch (error) {
        console.error(`Error writing ${filename}:`, error);
        throw error;
    }
};

const getNextId = (items) => {
    return items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1;
};

const getScene = async (id) => {
    const scenes = await readData('scenes');
    return scenes.find(scene => scene.id === parseInt(id));
};

const saveScene = async (sceneData) => {
    const scenes = await readData('scenes');
    let scene;
    if (sceneData.id) {
        const index = scenes.findIndex(s => s.id === sceneData.id);
        if (index !== -1) {
            scenes[index] = { ...scenes[index], ...sceneData };
            scene = scenes[index];
        } else {
            throw new Error('Scene not found');
        }
    } else {
        scene = { ...sceneData, id: getNextId(scenes) };
        scenes.push(scene);
    }
    await writeData('scenes', scenes);
    return scene;
};

const removeScene = async (id) => {
    const scenes = await readData('scenes');
    const updatedScenes = scenes.filter(scene => scene.id !== parseInt(id));
    await writeData('scenes', updatedScenes);
};

const getParts = async () => {
    const parts = await readData('parts');
    return parts.map(part => {
        switch (part.type) {
            case 'motor':
                return {
                    ...part,
                    directionPin: part.directionPin || null,
                    pwmPin: part.pwmPin || null
                };
            case 'led':
            case 'light':
                return {
                    ...part,
                    gpioPin: part.gpioPin || null
                };
            case 'sensor':
                return {
                    ...part,
                    gpioPin: part.gpioPin || null,
                    sensorType: part.sensorType || 'motion'
                };
            default:
                return part;
        }
    });
};

const savePart = async (partData) => {
    const parts = await getParts();
    let part;
    if (partData.id) {
        const index = parts.findIndex(p => p.id === partData.id);
        if (index !== -1) {
            parts[index] = { ...parts[index], ...partData };
            part = parts[index];
        } else {
            throw new Error('Part not found');
        }
    } else {
        part = { ...partData, id: getNextId(parts) };
        parts.push(part);
    }
    await writeData('parts', parts);
    return part;
};

module.exports = {
    getCharacters: () => readData('characters'),
    getScenes: () => readData('scenes'),
    getParts,
    getSounds: () => readData('sounds'),
    getSensors: () => readData('sensors'),
    getArmedSensors: () => readData('armedSensors'),
    saveCharacters: (data) => writeData('characters', data),
    saveScenes: (data) => writeData('scenes', data),
    saveParts: (data) => writeData('parts', data),
    saveSounds: (data) => writeData('sounds', data),
    saveSensors: (data) => writeData('sensors', data),
    saveArmedSensors: (data) => writeData('armedSensors', data),
    getNextId,
    getScene,
    saveScene,
    removeScene,
    savePart
};

================
File: motor_control.py
================
import RPi.GPIO as GPIO
import sys
import time
import logging

# Set up logging
logging.basicConfig(filename='motor_control.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def control_motor(direction, speed, duration, dir_pin, pwm_pin):
    logging.info(f"Controlling motor: direction={direction}, speed={speed}, duration={duration}, dir_pin={dir_pin}, pwm_pin={pwm_pin}")
    
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(dir_pin, GPIO.OUT)
    GPIO.setup(pwm_pin, GPIO.OUT)

    pwm = GPIO.PWM(pwm_pin, 100)  # Use a default frequency of 100 Hz
    pwm.start(0)

    try:
        GPIO.output(dir_pin, GPIO.HIGH if direction == 'forward' else GPIO.LOW)
        pwm.ChangeDutyCycle(int(speed))
        time.sleep(int(duration) / 1000)  # Convert duration to seconds
        pwm.ChangeDutyCycle(0)
    except Exception as e:
        logging.error(f"Error controlling motor: {str(e)}")
        raise
    finally:
        pwm.stop()
        GPIO.cleanup([dir_pin, pwm_pin])

if __name__ == "__main__":
    if len(sys.argv) != 6:
        logging.error("Incorrect number of arguments")
        print("Usage: python motor_control.py <direction> <speed> <duration> <dir_pin> <pwm_pin>")
        sys.exit(1)

    direction = sys.argv[1]
    speed = sys.argv[2]
    duration = sys.argv[3]
    dir_pin = int(sys.argv[4])
    pwm_pin = int(sys.argv[5])

    try:
        control_motor(direction, speed, duration, dir_pin, pwm_pin)
        print("Motor control successful")
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        print(f"Error: {str(e)}")
    finally:
        # Only clean up if GPIO was set up
        if GPIO.getmode() is not None:
            GPIO.cleanup()
            logging.info("GPIO cleanup completed")

================
File: motor_settings.json
================
{
  "dirPin": 18,
  "pwmPin": 24
}

================
File: package.json
================
{
  "name": "monsterbox",
  "version": "1.0.0",
  "description": "A refactored scene builder application for managing scenes and steps.",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "mocha --recursive"
  },
  "dependencies": {
    "body-parser": "^1.19.0",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "multer": "^1.4.5-lts.1",
    "node-aplay": "^1.0.3",
    "node-mpg123": "^1.0.2-0023",
    "node-schedule": "^2.1.0",
    "onoff": "^6.0.3",
    "play-sound": "^1.1.6",
    "replit-auth": "^5.0.3"
  },
  "devDependencies": {
    "chai": "^4.5.0",
    "mocha": "^9.2.2",
    "supertest": "^6.1.6"
  },
  "engines": {
    "node": ">=12.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-repo/monsterbox.git"
  },
  "keywords": [
    "scene",
    "builder",
    "express",
    "ejs",
    "nodejs"
  ],
  "author": "Your Name",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/your-repo/monsterbox/issues"
  },
  "homepage": "https://github.com/your-repo/monsterbox#readme"
}

================
File: README.md
================
# MonsterBox

================
File: sensor_control.py
================
import RPi.GPIO as GPIO
import time
import json
import pyaudio
import numpy as np
import requests

# Load sensor settings
with open('data/sensors.json', 'r') as f:
    sensors = json.load(f)

# Initialize GPIO
GPIO.setmode(GPIO.BCM)

# Initialize PyAudio for sound detection
p = pyaudio.PyAudio()

# Set up motion sensors
for sensor in sensors:
    if sensor['type'] == 'motion' and sensor['active']:
        GPIO.setup(sensor['digitalOutPin'], GPIO.IN)

# Function to check if a scene is currently playing
def is_scene_playing():
    # This function should check if a scene is currently being played
    # You'll need to implement this based on your scene playback system
    return False

# Function to trigger a scene
def trigger_scene(sensor_id):
    # This function should trigger the appropriate scene for the given sensor
    # You'll need to implement this based on your scene playback system
    print(f"Triggering scene for sensor {sensor_id}")
    requests.post('http://localhost:3000/scenes/trigger', json={'sensorId': sensor_id})

# Function to detect sound
def detect_sound(sensor):
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
    data = np.frombuffer(stream.read(1024), dtype=np.int16)
    stream.stop_stream()
    stream.close()
    
    # Calculate the sound level
    sound_level = np.abs(data).mean()
    return sound_level > sensor['sensitivity']

try:
    while True:
        if not is_scene_playing():
            for sensor in sensors:
                if sensor['active']:
                    if sensor['type'] == 'motion':
                        if GPIO.input(sensor['digitalOutPin']):
                            trigger_scene(sensor['id'])
                            time.sleep(1)  # Debounce
                    elif sensor['type'] == 'sound':
                        if detect_sound(sensor):
                            trigger_scene(sensor['id'])
                            time.sleep(1)  # Debounce
        time.sleep(0.1)  # Small delay to prevent CPU overuse

except KeyboardInterrupt:
    print("Stopping sensor monitoring")

finally:
    GPIO.cleanup()
    p.terminate()

================
File: server.js
================
const express = require('express');
const bodyParser = require('body-parser');
const sceneRoutes = require('./routes/sceneRoutes');

const app = express();

app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));
app.use('/scenes', sceneRoutes);

app.set('view engine', 'ejs');

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================
File: update.sh
================
#!/bin/bash

# Prompt the user for commit comments
echo "Enter Comments:"
read comments

# Add all changes to the staging area
git add .

# Commit the changes with the provided comments
git commit -m "$comments"

# Push the changes to the remote repository
git push
