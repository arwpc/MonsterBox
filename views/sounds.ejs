<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%- title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%- title %></h1>
    
    <div id="sound-list">
        <div class="button-group">
    <a href="/sounds/new" class="button primary-btn">Add New Sound</a>
    <a href="/api/voice/configure?characterId=<%- characters[0].id %>" id="configureVoiceBtn" class="button primary-btn">Configure Voice</a>
    <button id="cleanupBtn" class="button primary-btn">Cleanup Unused Files</button>
<!-- Modal for cleanup confirmation -->
<div id="cleanupModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.8); z-index:1000; align-items:center; justify-content:center;">
  <div style="background:#000; color:#00ff00; padding:24px; border-radius:8px; max-width:500px; margin:auto; border:2px solid #00ff00;">
    <h3 style="color:#00ff00;">Confirm Cleanup</h3>
    <p style="color:#00ff00;">The following sound files are not referenced in any character configuration:</p>
    <div id="cleanupFileList" style="max-height:200px; overflow:auto; border:1px solid #00ff00; margin-bottom:16px; padding:8px; color:#00ff00;"></div>
    <div id="cleanupFileStats" style="margin-bottom:12px; color:#00ff00;"></div>
    <div id="cleanupModalError" style="margin-bottom:12px; color:#ff4444;"></div>
    <button id="confirmCleanupBtn" class="button primary-btn">Delete Files</button>
    <button id="cancelCleanupBtn" class="button primary-btn" style="background-color:#550000; margin-left:8px;">Cancel</button>
  </div>
</div>
</div>
        
        <div id="character-filter">
            <label for="character-select">Filter by Character:</label>
            <select id="character-select" onchange="filterSounds()">
                <option value="all">All Sounds</option>
                <option value="unassigned">Unassigned Sounds</option>
                <% characters.forEach(function(character) { %>
                    <option value="<%- character.id %>"><%- character.char_name %></option>
                <% }); %>
            </select>
        </div>

        <% if (sounds.length === 0) { %>
            <p>No sounds available.</p>
        <% } else { %>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Filename</th>
                        <th>Characters</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="sound-table-body">
                    <% sounds.forEach(function(sound) { %>
                        <tr class="sound-row" data-characters="<%- JSON.stringify(sound.characterIds || [sound.characterId].filter(Boolean)) %>">
                            <td><%- sound.name %></td>
                            <td><%- sound.filename %></td>
                            <td>
                                <% 
                                    let characterNames = 'Unassigned';
                                    if (Array.isArray(sound.characterIds) && sound.characterIds.length > 0) {
                                        characterNames = sound.characterIds.map(id => 
                                            characters.find(char => char.id === id)?.char_name || 'Unknown'
                                        ).join(', ');
                                    } else if (sound.characterId) {
                                        const character = characters.find(char => char.id === sound.characterId);
                                        characterNames = character ? character.char_name : 'Unknown';
                                    }
                                %>
                                <%- characterNames %>
                            </td>
                            <td>
                                <button onclick="playOnCharacters('<%- sound.id %>')" class="button primary-btn">Play (on Characters)</button>
                                <button onclick="playLocal('<%- sound.filename %>')" class="button primary-btn">Play (local)</button>
                                <a href="/sounds/<%- sound.id %>/edit" class="button primary-btn">Edit</a>
                                <button onclick="deleteSound('<%- sound.id %>')" class="button primary-btn">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        <% } %>
    </div>
    
    <a href="/" class="button primary-btn">Back to Main Menu</a>

    <div id="soundInfo"></div>
    <div id="errorInfo" style="color: red;"></div>

    <script>
        // Cleanup button logic with analysis and confirmation
        document.addEventListener('DOMContentLoaded', function() {
            const cleanupBtn = document.getElementById('cleanupBtn');
            const cleanupModal = document.getElementById('cleanupModal');
            const cleanupFileList = document.getElementById('cleanupFileList');
            const cleanupFileStats = document.getElementById('cleanupFileStats');
            const cleanupModalError = document.getElementById('cleanupModalError');
            const confirmCleanupBtn = document.getElementById('confirmCleanupBtn');
            const cancelCleanupBtn = document.getElementById('cancelCleanupBtn');
            let filesToDelete = [];
            
            if (cleanupBtn) {
                cleanupBtn.addEventListener('click', async function() {
                    // Reset state
                    cleanupBtn.disabled = true;
                    cleanupBtn.textContent = 'Analyzing...';
                    document.getElementById('soundInfo').textContent = '';
                    document.getElementById('errorInfo').textContent = '';
                    cleanupModalError.textContent = '';
                    
                    try {
                        // Use our standalone script to perform a dry run that just returns info without deleting
                        const scriptPath = '/scripts/cleanup_sounds.js';
                        const dryRunResponse = await axios.get(scriptPath, { responseType: 'text' });
                        
                        // If we can't fetch the script, just run direct cleanup
                        const result = await fetch('/sounds/direct-cleanup', { 
                            method: 'POST', 
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ dryRun: true }) 
                        }).then(r => r.json());
                        
                        if (result.unusedFilesFound === 0) {
                            document.getElementById('soundInfo').textContent = 'No unused sound files found.';
                            cleanupBtn.disabled = false;
                            cleanupBtn.textContent = 'Cleanup Unused Files';
                            return;
                        }
                        
                        // Show modal with results from direct script
                        const filesHtml = result.unusedFiles ? 
                            result.unusedFiles.map(f => `<div>${f}</div>`).join('') : 
                            '<div>Unable to show file list</div>';
                        
                        cleanupFileList.innerHTML = filesHtml;
                        cleanupFileStats.innerHTML = `<strong>${result.unusedFilesFound}</strong> unused files out of <strong>${result.totalFiles}</strong> total files will be deleted.`;
                        
                        cleanupModalError.textContent = '';
                        cleanupModal.style.display = 'flex';
                    } catch (err) {
                        console.error('Error analyzing files:', err);
                        // If analysis fails, just show modal with generic message
                        cleanupFileList.innerHTML = '<div>File list unavailable - will still clean up unused files safely</div>';
                        cleanupFileStats.innerHTML = 'Unused files will be safely deleted';
                        cleanupModalError.textContent = '';
                        cleanupModal.style.display = 'flex';
                    }
                    
                    cleanupBtn.disabled = false;
                    cleanupBtn.textContent = 'Cleanup Unused Files';
                });
            }
            
            if (cancelCleanupBtn) {
                cancelCleanupBtn.addEventListener('click', function() {
                    cleanupModal.style.display = 'none';
                });
            }
            
            if (confirmCleanupBtn) {
                confirmCleanupBtn.addEventListener('click', async function() {
                    confirmCleanupBtn.disabled = true;
                    cancelCleanupBtn.disabled = true;
                    confirmCleanupBtn.textContent = 'Deleting...';
                    cleanupModalError.textContent = '';
                    
                    try {
                        // Clear previous error message
                        cleanupModalError.textContent = '';
                        
                        try {
                            // Using the direct cleanup endpoint that doesn't touch the sound database
                            const response = await axios.post('/sounds/direct-cleanup');
                            if (response.data.success) {
                                cleanupModal.style.display = 'none';
                                
                                // Show success message with stats
                                let successMsg = `Cleanup complete: ${response.data.deletedCount} file(s) deleted.`;
                                if (response.data.failures && response.data.failures.length > 0) {
                                    successMsg += ` (${response.data.failures.length} errors occurred)`;
                                }
                                document.getElementById('soundInfo').textContent = successMsg;
                                document.getElementById('errorInfo').textContent = '';
                                
                                // Refresh the page to reflect changes after a delay
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000); // 2-second delay to show the success message
                            } else {
                                cleanupModalError.textContent = 'Cleanup failed: ' + (response.data.error || 'Unknown error.');
                            }
                        } catch (err) {
                            console.error('Cleanup request error:', err);
                            let errorMessage = 'Cleanup failed: ';
                            
                            if (err.response && err.response.data && err.response.data.details) {
                                errorMessage += err.response.data.details;
                            } else if (err.response && err.response.data && err.response.data.error) {
                                errorMessage += err.response.data.error;
                            } else if (err.message) {
                                errorMessage += err.message;
                            } else {
                                errorMessage += 'Unknown error occurred';
                            }
                            
                            cleanupModalError.textContent = errorMessage;
                        }
                    } finally {
                        // Always re-enable buttons
                        confirmCleanupBtn.disabled = false;
                        cancelCleanupBtn.disabled = false;
                        confirmCleanupBtn.textContent = 'Delete Files';
                    }
                    
                    if (!cleanupModalError.textContent) {
                        confirmCleanupBtn.disabled = false;
                        cancelCleanupBtn.disabled = false;
                        confirmCleanupBtn.textContent = 'Delete Files';
                    }
                });
            }
        });

        // Get the character ID from URL query parameter
        const urlParams = new URLSearchParams(window.location.search);
        const characterId = urlParams.get('characterId');
        if (characterId) {
            document.getElementById('character-select').value = characterId;
            filterSounds();
        }

        function filterSounds() {
            const selectedCharacter = document.getElementById('character-select').value;
            const rows = document.querySelectorAll('#sound-table-body tr');
            const configureVoiceBtn = document.getElementById('configureVoiceBtn');

            // Update Configure Voice button URL with selected character
            if (selectedCharacter !== 'all' && selectedCharacter !== 'unassigned') {
                configureVoiceBtn.href = `/api/voice/configure?characterId=${selectedCharacter}`;
            }

            rows.forEach(row => {
                const characterIds = JSON.parse(row.dataset.characters);
                if (selectedCharacter === 'all' ||
                    (selectedCharacter === 'unassigned' && characterIds.length === 0) ||
                    (characterIds.includes(parseInt(selectedCharacter)))) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function playLocal(filename) {
            const audio = new Audio('/sounds/' + filename);
            audio.onerror = function(e) {
                console.error('Error loading audio:', e);
                displayError('Error playing sound locally: ' + e.message);
            };
            audio.play().catch(error => {
                console.error('Error playing sound locally:', error);
                displayError('Error playing sound locally: ' + error.message);
            });
        }

        function playOnCharacters(soundId) {
            console.log('Attempting to play sound with ID:', soundId);
            axios.post(`/sounds/${soundId}/play`, {
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => {
                console.log('Server response:', response.data);
                const soundInfo = `
                    <h3>Sound Details:</h3>
                    <p>Message: ${response.data.message}</p>
                    <p>Sound: ${response.data.sound}</p>
                    <p>File: ${response.data.file}</p>
                `;
                document.getElementById('soundInfo').innerHTML = soundInfo;
                document.getElementById('errorInfo').innerHTML = '';
            })
            .catch(error => {
                console.error('Error playing sound on characters:', error);
                let errorMessage = 'Error playing sound on characters: ';
                if (error.response && error.response.data) {
                    errorMessage += error.response.data.error;
                    if (error.response.data.details) errorMessage += ' - ' + error.response.data.details;
                } else {
                    errorMessage += error.toString();
                }
                displayError(errorMessage);
            });
        }

        function deleteSound(id) {
            if (confirm('Are you sure you want to delete this sound?')) {
                axios.post(`/sounds/${id}/delete`)
                .then(response => {
                    console.log('Delete sound response:', response.data);
                    location.reload();
                })
                .catch(error => {
                    console.error('Error deleting sound:', error);
                    let errorMessage = 'Error deleting sound: ';
                    if (error.response && error.response.data) {
                        errorMessage += error.response.data.error;
                        if (error.response.data.details) errorMessage += ' - ' + error.response.data.details;
                    } else {
                        errorMessage += error.toString();
                    }
                    displayError(errorMessage);
                });
            }
        }

        function displayError(message) {
            document.getElementById('errorInfo').innerHTML = message;
            document.getElementById('soundInfo').innerHTML = '';
        }
    </script>
</body>
</html>
