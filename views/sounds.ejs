<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%- title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%- title %></h1>
    
    <div id="sound-list">
        <div class="button-group">
            <a href="/sounds/new" class="button primary-btn">Add New Sound</a>
            <a href="/api/voice/configure" class="button primary-btn">Configure Voice</a>
        </div>
        
        <div id="character-filter">
            <label for="character-select">Filter by Character:</label>
            <select id="character-select" onchange="filterSounds()">
                <option value="all">All Sounds</option>
                <option value="unassigned">Unassigned Sounds</option>
                <% characters.forEach(function(character) { %>
                    <option value="<%- character.id %>"><%- character.char_name %></option>
                <% }); %>
            </select>
        </div>

        <% if (sounds.length === 0) { %>
            <p>No sounds available.</p>
        <% } else { %>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Filename</th>
                        <th>Characters</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="sound-table-body">
                    <% sounds.forEach(function(sound) { %>
                        <tr class="sound-row" data-characters="<%- JSON.stringify(sound.characterIds || [sound.characterId].filter(Boolean)) %>">
                            <td><%- sound.name %></td>
                            <td><%- sound.filename %></td>
                            <td>
                                <% 
                                    let characterNames = 'Unassigned';
                                    if (Array.isArray(sound.characterIds) && sound.characterIds.length > 0) {
                                        characterNames = sound.characterIds.map(id => 
                                            characters.find(char => char.id === id)?.char_name || 'Unknown'
                                        ).join(', ');
                                    } else if (sound.characterId) {
                                        const character = characters.find(char => char.id === sound.characterId);
                                        characterNames = character ? character.char_name : 'Unknown';
                                    }
                                %>
                                <%- characterNames %>
                            </td>
                            <td>
                                <button onclick="playOnCharacters('<%- sound.id %>')" class="button primary-btn">Play (on Characters)</button>
                                <button onclick="playLocal('<%- sound.filename %>')" class="button primary-btn">Play (local)</button>
                                <a href="/sounds/<%- sound.id %>/edit" class="button primary-btn">Edit</a>
                                <button onclick="deleteSound('<%- sound.id %>')" class="button primary-btn">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        <% } %>
    </div>
    
    <a href="/" class="button primary-btn">Back to Main Menu</a>

    <div id="soundInfo"></div>
    <div id="errorInfo" style="color: red;"></div>

    <script>
        function filterSounds() {
            const selectedCharacter = document.getElementById('character-select').value;
            const rows = document.querySelectorAll('#sound-table-body tr');

            rows.forEach(row => {
                const characterIds = JSON.parse(row.dataset.characters);
                if (selectedCharacter === 'all' ||
                    (selectedCharacter === 'unassigned' && characterIds.length === 0) ||
                    (characterIds.includes(parseInt(selectedCharacter)))) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function playLocal(filename) {
            const audio = new Audio('/sounds/' + filename);
            audio.play().catch(error => {
                console.error('Error playing sound locally:', error);
                displayError('Error playing sound locally: ' + error.message);
            });
        }

        function playOnCharacters(soundId) {
            console.log('Attempting to play sound with ID:', soundId);
            axios.post(`/sounds/${soundId}/play`, {
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => {
                console.log('Server response:', response.data);
                const soundInfo = `
                    <h3>Sound Details:</h3>
                    <p>Message: ${response.data.message}</p>
                    <p>Sound: ${response.data.sound}</p>
                    <p>File: ${response.data.file}</p>
                `;
                document.getElementById('soundInfo').innerHTML = soundInfo;
                document.getElementById('errorInfo').innerHTML = '';
            })
            .catch(error => {
                console.error('Error playing sound on characters:', error);
                let errorMessage = 'Error playing sound on characters: ';
                if (error.response && error.response.data) {
                    errorMessage += error.response.data.error;
                    if (error.response.data.details) errorMessage += ' - ' + error.response.data.details;
                } else {
                    errorMessage += error.toString();
                }
                displayError(errorMessage);
            });
        }

        function deleteSound(id) {
            if (confirm('Are you sure you want to delete this sound?')) {
                axios.post(`/sounds/${id}/delete`)
                .then(response => {
                    console.log('Delete sound response:', response.data);
                    location.reload();
                })
                .catch(error => {
                    console.error('Error deleting sound:', error);
                    let errorMessage = 'Error deleting sound: ';
                    if (error.response && error.response.data) {
                        errorMessage += error.response.data.error;
                        if (error.response.data.details) errorMessage += ' - ' + error.response.data.details;
                    } else {
                        errorMessage += error.toString();
                    }
                    displayError(errorMessage);
                });
            }
        }

        function displayError(message) {
            document.getElementById('errorInfo').innerHTML = message;
            document.getElementById('soundInfo').innerHTML = '';
        }
    </script>
</body>
</html>
