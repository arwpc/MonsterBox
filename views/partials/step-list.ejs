<div id="steps">
    <h3>Steps</h3>
    <div id="step-list" class="sortable">
        <!-- Existing steps will be loaded here -->
    </div>
    <button type="button" id="add-step-button" onclick="addStep()">Add Step</button>
</div>

<script>
    const characterParts = {};
    const characterSounds = {};

    <% characters.forEach(function(character) { %>
        characterParts[<%= character.id %>] = [
            <% character.parts.forEach(function(partId) { %>
                <% const part = parts.find(p => p.id === partId); %>
                <% if (part) { %>
                    { id: <%= part.id %>, name: "<%= part.name %>", type: "<%= part.type %>" },
                <% } %>
            <% }); %>
        ];
        characterSounds[<%= character.id %>] = [
            <% character.sounds.forEach(function(soundId) { %>
                <% const sound = sounds.find(s => s.id === soundId); %>
                <% if (sound) { %>
                    { id: <%= sound.id %>, name: "<%= sound.name %>" },
                <% } %>
            <% }); %>
        ];
    <% }); %>

    function loadExistingSteps(steps) {
        steps.forEach((step, index) => {
            addStep();
            const stepDiv = document.querySelector('.step:last-of-type');
            stepDiv.querySelector('.step-name').value = step.name || '';
            stepDiv.querySelector('.concurrent').checked = step.concurrent;
            stepDiv.querySelector('.action-type').value = step.type;
            updateActionFields(stepDiv.querySelector('.action-type'), step);

            if (step.type === 'sound') {
                stepDiv.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                stepDiv.querySelector('.part-id').value = step.part_id;
                stepDiv.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    stepDiv.querySelector('.direction').value = step.direction;
                    stepDiv.querySelector('.speed').value = step.speed;
                }
            }
        });
    }

    function addStep() {
        const stepList = document.getElementById('step-list');
        const currentStepCount = stepList.children.length;
        const stepDiv = document.createElement('div');
        stepDiv.className = 'step';
        stepDiv.innerHTML = `
            <h4>Step ${currentStepCount + 1}</h4>
            <input type="text" class="step-name" placeholder="Step Name" onchange="updateStepsJson()">
            <label>
                Concurrent:
                <input type="checkbox" class="concurrent" onchange="updateStepsJson()">
            </label>
            <select class="action-type" onchange="updateActionFields(this)">
                <option value="">Select Action</option>
                <option value="sound">Play Sound</option>
                <option value="motor">Move Motor</option>
                <option value="servo">Move Servo</option>
                <option value="light">Control Light</option>
            </select>
            <div class="action-fields"></div>
            <button type="button" onclick="removeStep(this)">Remove Step</button>
        `;
        stepList.appendChild(stepDiv);
        updateStepNumbers();
        updateStepsJson();
    }

    function removeStep(button) {
        button.closest('.step').remove();
        updateStepNumbers();
        updateStepsJson();
    }

    function updateStepNumbers() {
        const steps = document.querySelectorAll('.step');
        steps.forEach((step, index) => {
            const stepHeader = step.querySelector('h4');
            if (stepHeader) {
                stepHeader.textContent = `Step ${index + 1}`;
            }
        });
    }

    function updateActionFields(select, step = null) {
        const actionFields = select.nextElementSibling;
        const characterId = document.getElementById('character_id').value;
        const actionType = select.value;

        actionFields.innerHTML = '';

        if (actionType === 'sound') {
            const sounds = characterSounds[characterId];
            actionFields.innerHTML += `
                <select class="sound-id" onchange="updateStepsJson()">
                    ${sounds.map(sound => `<option value="${sound.id}">${sound.name}</option>`).join('')}
                </select>
            `;
        } else if (actionType === 'motor') {
            const parts = characterParts[characterId].filter(part => part.type === actionType);
            actionFields.innerHTML += `
                <select class="part-id" onchange="updateStepsJson()">
                    ${parts.map(part => `<option value="${part.id}">${part.name}</option>`).join('')}
                </select>
                <input type="number" class="duration" placeholder="Duration (ms)" onchange="updateStepsJson()">
                <select class="direction" onchange="updateStepsJson()">
                    <option value="F">Forward</option>
                    <option value="R">Reverse</option>
                </select>
                <input type="number" class="speed" placeholder="Speed (0-100)" min="0" max="100" onchange="updateStepsJson()">
                <button type="button" class="test-motor-button" onclick="testMotor(this)">Test Motor</button>
            `;
        }

        if (step) {
            if (step.type === 'sound') {
                actionFields.querySelector('.sound-id').value = step.sound_id;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                actionFields.querySelector('.part-id').value = step.part_id;
                actionFields.querySelector('.duration').value = step.duration;

                if (step.type === 'motor') {
                    actionFields.querySelector('.direction').value = step.direction;
                    actionFields.querySelector('.speed').value = step.speed;
                }
            }
        }

        updateStepsJson();
    }

    function updateStepsJson() {
        const steps = [];
        document.querySelectorAll('.step').forEach((stepDiv) => {
            const step = {
                name: stepDiv.querySelector('.step-name').value,
                concurrent: stepDiv.querySelector('.concurrent').checked,
                type: stepDiv.querySelector('.action-type').value
            };

            if (step.type === 'sound') {
                step.sound_id = stepDiv.querySelector('.sound-id').value;
            } else if (['motor', 'servo', 'light'].includes(step.type)) {
                step.part_id = parseInt(stepDiv.querySelector('.part-id').value);
                step.duration = parseInt(stepDiv.querySelector('.duration').value);

                if (step.type === 'motor') {
                    step.direction = stepDiv.querySelector('.direction').value;
                    step.speed = parseInt(stepDiv.querySelector('.speed').value);
                }
            }

            steps.push(step);
        });

        document.getElementById('steps_json').value = JSON.stringify(steps);
    }

    function testMotor(button) {
        const stepDiv = button.closest('.step');
        const direction = stepDiv.querySelector('.direction').value;
        const speed = stepDiv.querySelector('.speed').value;
        const duration = stepDiv.querySelector('.duration').value;
        const partId = stepDiv.querySelector('.part-id').value;

        // Replace with actual logic to retrieve pins for the selected part
        const directionPin = 18; // Example value
        const pwmPin = 24; // Example value

        axios.post('/motor/control-motor', {
            direction: direction,
            speed: parseInt(speed),
            duration: parseInt(duration),
            directionPin: directionPin,
            pwmPin: pwmPin
        })
        .then(function (response) {
            alert('Motor test successful!');
        })
        .catch(function (error) {
            alert('Error testing motor: ' + (error.response ? error.response.data : error.message));
        });
    }

    function updateCharacterParts() {
        const characterId = document.getElementById('character_id').value;
        document.querySelectorAll('.step').forEach(stepDiv => {
            const actionType = stepDiv.querySelector('.action-type').value;
            if (actionType) {
                updateActionFields(stepDiv.querySelector('.action-type'));
            }
        });
    }

    // Load existing steps if editing a scene
    const existingSteps = <%= JSON.stringify(scene.steps || []) %>;
    loadExistingSteps(existingSteps);

    updateStepsJson();

    // Make steps sortable
    $(function() {
        $("#step-list").sortable({
            update: function(event, ui) {
                updateStepNumbers();
                updateStepsJson();
            }
        });
    });

    document.getElementById('sceneForm').onsubmit = function() {
        updateStepsJson();
        return true;
    };
</script>
