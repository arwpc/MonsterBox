<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MonsterBox Control Panel</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Creepster&display=swap">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body class="landing-page">
    <header>
        <h1 class="landing-title">MonsterBoxâ„¢</h1>
    </header>
    <main>
        <h2>Welcome to the MonsterBox Control Panel</h2>
        <p>Choose a character and an option from the menu to get started.</p>
        
        <% if (characters && characters.length > 0) { %>
            <select id="character-select" onchange="updateCharacter(this.value)">
                <option value="">Select a character</option>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>"><%= character.char_name %></option>
                <% }); %>
            </select>
        <% } else { %>
            <p class="error-message">No characters defined. Please create a character first.</p>
        <% } %>
    </main>

    <nav id="navigation">
        <a href="/characters" class="nav-button">Characters</a>
        <a href="/parts" class="nav-button">Parts</a>
        <a href="/sounds" class="nav-button">Sounds</a>
        <a href="/Camera" class="nav-button">Video</a>
        <a href="/scenes" class="nav-button">Scenes</a>
        <a href="/active-mode" class="nav-button">Active Mode</a>
        <a href="/system-config" class="nav-button">System Config</a>
    </nav>
    
    <footer>
        <p>An animatronic automation package by ARW Halloween 2025 2.0.</p>
    </footer>

    <script>
        function updateCharacter(characterId) {
            localStorage.setItem('selectedCharacter', characterId);
            updateNavigation(characterId);
            fetch('/set-character', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ characterId: characterId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Character updated successfully');
                } else {
                    console.error('Failed to update character');
                }
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }

        function updateNavigation(characterId) {
            const nav = document.getElementById('navigation');
            const links = nav.getElementsByTagName('a');
            for (let link of links) {
                const url = new URL(link.href);
                if (characterId && link.href !== '/system-config') {
                    url.searchParams.set('characterId', characterId);
                } else {
                    url.searchParams.delete('characterId');
                }
                link.href = url.toString();
            }
        }

        // Load the selected character from localStorage on page load
        window.onload = function() {
            const savedCharacter = localStorage.getItem('selectedCharacter');
            if (savedCharacter) {
                document.getElementById('character-select').value = savedCharacter;
                updateNavigation(savedCharacter);
                updateCharacter(savedCharacter);
            }
        }
    </script>
</body>
</html>
