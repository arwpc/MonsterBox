<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Creepster&display=swap">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .custom-file-upload {
            display: inline-block;
            padding: 8px 16px;
            cursor: pointer;
            background-color: #ff0000;
            color: #00ff00;
            border: 2px solid #00ff00;
            border-radius: 25px;
            text-align: center;
            width: 100%;
            box-sizing: border-box;
            margin-top: 10px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .custom-file-upload:hover {
            background-color: #cc0000;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <header>
        <h1 class="landing-title"><%= title %></h1>
    </header>

    <main>
        <form action="<%= action %>" method="POST" enctype="multipart/form-data">
            <% if (character && character.id) { %>
                <input type="hidden" name="id" value="<%= character.id %>">
            <% } %>

            <div class="character-form-container">
                <div class="image-preview-container">
                    <% if (character && character.image) { %>
                        <img src="/images/characters/<%= character.image %>" alt="Character image" class="image-preview">
                    <% } else { %>
                        <div class="image-preview" style="background-color: #002200; display: flex; align-items: center; justify-content: center;">
                            <span>No Image Selected</span>
                        </div>
                    <% } %>
                    <div class="form-group" style="margin-bottom: 0;">
                        <label for="character_image" class="custom-file-upload">
                            Upload Picture
                        </label>
                        <input type="file" id="character_image" name="character_image" accept="image/*" style="width: 0.1px; height: 0.1px; opacity: 0; overflow: hidden; position: absolute; z-index: -1;">
                    </div>
                    <% if (character && character.id && character.id !== 'new') { %>
                        <a href="/api/voice/configure?characterId=<%= character.id %>" class="button configure-voice-btn" style="display: block; margin-top: 10px; background-color: #ff0000; color: #00ff00; border: 2px solid #00ff00; border-radius: 25px; text-align: center; padding: 8px; text-decoration: none;">Configure Voice</a>
                    <% } else if (isNewCharacter) { %>
                        <div class="note" style="display: block; margin-top: 10px; color: #00ff00; text-align: center;">Voice configuration available after saving</div>
                    <% } %>
                </div>

                <div class="form-content">
                    <div class="form-group">
                        <label for="char_name">Name:</label>
                        <input type="text" id="char_name" name="char_name" value="<%= character ? character.char_name : '' %>" required>
                    </div>

                    <div class="form-group">
                        <label for="char_description">Description:</label>
                        <textarea id="char_description" name="char_description" required><%= character ? character.char_description : '' %></textarea>
                    </div>

                    <!-- Animatronic Configuration Section -->
                    <div class="form-section">
                        <h3>ü§ñ Animatronic Configuration</h3>

                        <div class="form-group">
                            <label for="animatronic_enabled">
                                <input type="checkbox" id="animatronic_enabled" name="animatronic_enabled"
                                       <%= (character && character.animatronic && character.animatronic.enabled) ? 'checked' : '' %>>
                                Enable Animatronic Features
                            </label>
                        </div>

                        <div id="animatronic_config" style="<%= (character && character.animatronic && character.animatronic.enabled) ? '' : 'display: none;' %>">
                            <div class="form-group">
                                <label for="animatronic_status">Status:</label>
                                <select id="animatronic_status" name="animatronic_status">
                                    <option value="running" <%= (character && character.animatronic && character.animatronic.status === 'running') ? 'selected' : '' %>>Running</option>
                                    <option value="offline" <%= (character && character.animatronic && character.animatronic.status === 'offline') ? 'selected' : '' %>>Offline</option>
                                    <option value="virtual" <%= (character && character.animatronic && character.animatronic.status === 'virtual') ? 'selected' : '' %>>Virtual</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="character_type">Character Type:</label>
                                <input type="text" id="character_type" name="character_type"
                                       value="<%= (character && character.animatronic) ? character.animatronic.character_type || '' : '' %>">
                            </div>

                            <div class="form-group">
                                <label for="animatronic_description">Animatronic Description:</label>
                                <textarea id="animatronic_description" name="animatronic_description"><%= (character && character.animatronic) ? character.animatronic.description || '' : '' %></textarea>
                            </div>

                            <!-- RPI Configuration -->
                            <h4>üñ•Ô∏è RPI4b Configuration</h4>

                            <div class="form-group">
                                <label for="rpi_host">IP Address:</label>
                                <input type="text" id="rpi_host" name="rpi_host"
                                       value="<%= (character && character.animatronic && character.animatronic.rpi_config) ? character.animatronic.rpi_config.host || '' : '' %>"
                                       placeholder="192.168.x.x">
                            </div>

                            <div class="form-group">
                                <label for="rpi_user">SSH User:</label>
                                <input type="text" id="rpi_user" name="rpi_user"
                                       value="<%= (character && character.animatronic && character.animatronic.rpi_config) ? character.animatronic.rpi_config.user || 'remote' : 'remote' %>">
                            </div>

                            <div class="form-group">
                                <label for="rpi_password">SSH Password:</label>
                                <input type="password" id="rpi_password" name="rpi_password"
                                       value="<%= (character && character.animatronic && character.animatronic.rpi_config) ? character.animatronic.rpi_config.password || '' : '' %>"
                                       placeholder="Enter SSH password">
                                <small style="color: #888;">Password will be stored securely and used for automated SSH connections</small>
                            </div>

                            <div class="form-group">
                                <label for="collection_interval">Log Collection Interval (seconds):</label>
                                <input type="number" id="collection_interval" name="collection_interval"
                                       value="<%= (character && character.animatronic && character.animatronic.rpi_config) ? character.animatronic.rpi_config.collection_interval || 300 : 300 %>"
                                       min="60" max="3600">
                            </div>

                            <div class="form-group">
                                <label for="max_lines">Max Log Lines:</label>
                                <input type="number" id="max_lines" name="max_lines"
                                       value="<%= (character && character.animatronic && character.animatronic.rpi_config) ? character.animatronic.rpi_config.max_lines || 1000 : 1000 %>"
                                       min="100" max="10000">
                            </div>

                            <div class="form-group">
                                <label for="hardware_monitoring">
                                    <input type="checkbox" id="hardware_monitoring" name="hardware_monitoring"
                                           <%= (character && character.animatronic && character.animatronic.hardware_monitoring) ? 'checked' : '' %>>
                                    Enable Hardware Monitoring
                                </label>
                            </div>



                            <!-- Animatronic Management Buttons -->
                            <% if (character && character.id && character.id !== 'new' && character.animatronic && character.animatronic.enabled) { %>
                                <div class="form-group">
                                    <h4>ü§ñ Animatronic Management</h4>
                                    <div class="button-group">
                                        <button type="button" onclick="testConnection(<%= character.id %>)" class="button secondary-btn">üß™ Test Connection</button>
                                        <button type="button" onclick="collectLogs(<%= character.id %>)" class="button secondary-btn">üìã Collect Logs</button>
                                        <button type="button" onclick="showSystemInfo(<%= character.id %>)" class="button secondary-btn">üìä System Info</button>
                                        <button type="button" onclick="rebootSystem(<%= character.id %>)" class="button secondary-btn">üîÑ Reboot System</button>
                                    </div>
                                </div>
                            <% } %>
                        </div>

                        <!-- Character-Specific System Configuration -->
                        <% if (character && character.id && character.id !== 'new' && character.animatronic && character.animatronic.enabled) { %>
                            <div class="form-section">
                                <h3>‚öôÔ∏è System Configuration</h3>
                                <p style="color: #888; font-size: 12px;">Configure hardware and system settings specific to this character's RPI4b system.</p>

                                <div class="form-group">
                                    <button type="button" onclick="manageServos(<%= character.id %>)" class="button secondary-btn">üîß Manage Servos</button>
                                    <button type="button" onclick="viewSystemConfig(<%= character.id %>)" class="button secondary-btn">üìã View System Config</button>
                                </div>
                            </div>
                        <% } %>
                    </div>

                    <div class="form-group">
                        <label>Parts:</label>
                        <div class="dual-select">
                            <div class="select-container">
                                <label class="select-label">Available Parts</label>
                                <select id="available-parts" multiple>
                                    <% parts.forEach(function(part) { %>
                                        <% if (!part.characterId || (character && character.id && part.characterId !== character.id)) { %>
                                            <option value="<%= part.id %>"><%= part.name %></option>
                                        <% } %>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="dual-select-controls">
                                <button type="button" onclick="moveSelectedOptions('available-parts', 'assigned-parts')">></button>
                                <button type="button" onclick="moveSelectedOptions('assigned-parts', 'available-parts')"><</button>
                            </div>
                            <div class="select-container">
                                <label class="select-label">Assigned Parts</label>
                                <select id="assigned-parts" name="parts[]" multiple>
                                    <% if (character && character.id) { %>
                                        <% parts.forEach(function(part) { %>
                                            <% if (part.characterId === character.id) { %>
                                                <option value="<%= part.id %>" selected><%= part.name %></option>
                                            <% } %>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Sounds:</label>
                        <div class="dual-select">
                            <div class="select-container">
                                <label class="select-label">Available Sounds</label>
                                <select id="available-sounds" multiple>
                                    <% sounds.forEach(function(sound) { %>
                                        <% if (!(sound.characterIds && sound.characterIds.includes(character.id))) { %>
                                            <option value="<%= sound.id %>"><%= sound.name %></option>
                                        <% } %>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="dual-select-controls">
                                <button type="button" onclick="moveSelectedOptions('available-sounds', 'assigned-sounds')">></button>
                                <button type="button" onclick="moveSelectedOptions('assigned-sounds', 'available-sounds')"><</button>
                            </div>
                            <div class="select-container">
                                <label class="select-label">Assigned Sounds</label>
                                <select id="assigned-sounds" name="sounds[]" multiple>
                                    <% if (character && character.id) { %>
                                        <% sounds.forEach(function(sound) { %>
                                            <% if (sound.characterIds && sound.characterIds.includes(character.id)) { %>
                                                <option value="<%= sound.id %>" selected><%= sound.name %></option>
                                            <% } %>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="button-group">
                        <button type="submit" class="button primary-btn">Save Character</button>
                        <a href="/characters" class="button secondary-btn">Cancel</a>
                    </div>
                </div>
            </div>
        </form>
    </main>

    <script>
        // Add preview functionality for image upload
        const imageInput = document.getElementById('character_image');
        const imagePreview = document.querySelector('.image-preview');

        imageInput.addEventListener('change', function(e) {
            if (e.target.files && e.target.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    if (imagePreview.tagName.toLowerCase() === 'img') {
                        imagePreview.src = e.target.result;
                    } else {
                        // Replace the div with an img element
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'image-preview';
                        img.alt = 'Character image';
                        imagePreview.parentNode.replaceChild(img, imagePreview);
                    }
                    
                    // Display file name next to the Upload Picture button
                    const fileName = e.target.files[0].name;
                    document.querySelector('.custom-file-upload').innerHTML = `Selected: ${fileName.length > 15 ? fileName.substring(0, 12) + '...' : fileName}`;
                }
                reader.readAsDataURL(e.target.files[0]);
            }
        });

        function moveSelectedOptions(fromSelectId, toSelectId) {
            const fromSelect = document.getElementById(fromSelectId);
            const toSelect = document.getElementById(toSelectId);
            
            for (let option of fromSelect.selectedOptions) {
                toSelect.appendChild(option.cloneNode(true));
                fromSelect.remove(option.index);
            }
        }

        // Animatronic configuration toggle
        const animatronicEnabled = document.getElementById('animatronic_enabled');
        const animatronicConfig = document.getElementById('animatronic_config');

        if (animatronicEnabled) {
            animatronicEnabled.addEventListener('change', function() {
                if (this.checked) {
                    animatronicConfig.style.display = 'block';
                } else {
                    animatronicConfig.style.display = 'none';
                }
            });
        }



        // Form submission handling
        const form = document.querySelector('form');
        if (form) {
            form.onsubmit = function() {
                const assignedParts = document.getElementById('assigned-parts');
                const assignedSounds = document.getElementById('assigned-sounds');

                if (assignedParts) {
                    for (let option of assignedParts.options) {
                        option.selected = true;
                    }
                }

                if (assignedSounds) {
                    for (let option of assignedSounds.options) {
                        option.selected = true;
                    }
                }

                return true;
            };
        }

        // Animatronic management functions (reuse from characters.ejs)
        function showModal(title, content) {
            // Create modal if it doesn't exist
            let modal = document.getElementById('resultModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'resultModal';
                modal.className = 'modal';
                modal.style.display = 'none';
                modal.innerHTML = `
                    <div class="modal-content">
                        <span class="close" onclick="closeModal()">&times;</span>
                        <h2 id="modalTitle">Result</h2>
                        <div id="modalBody"></div>
                    </div>
                `;
                document.body.appendChild(modal);

                // Add modal styles if they don't exist
                if (!document.getElementById('modalStyles')) {
                    const style = document.createElement('style');
                    style.id = 'modalStyles';
                    style.textContent = `
                        .modal {
                            position: fixed;
                            z-index: 1000;
                            left: 0;
                            top: 0;
                            width: 100%;
                            height: 100%;
                            background-color: rgba(0,0,0,0.8);
                        }
                        .modal-content {
                            background-color: #000;
                            border: 2px solid #00ff00;
                            margin: 5% auto;
                            padding: 20px;
                            width: 80%;
                            max-width: 800px;
                            border-radius: 5px;
                            color: #00ff00;
                            max-height: 80vh;
                            overflow-y: auto;
                        }
                        .close {
                            color: #ff0000;
                            float: right;
                            font-size: 28px;
                            font-weight: bold;
                            cursor: pointer;
                        }
                        .close:hover {
                            color: #ff6666;
                        }
                        .test-result {
                            margin: 10px 0;
                            padding: 10px;
                            border: 1px solid #333;
                            border-radius: 3px;
                        }
                        .test-passed {
                            border-color: #00ff00;
                            background-color: rgba(0, 255, 0, 0.1);
                        }
                        .test-failed {
                            border-color: #ff0000;
                            background-color: rgba(255, 0, 0, 0.1);
                        }
                        .log-section {
                            margin: 10px 0;
                            padding: 10px;
                            border: 1px solid #333;
                            border-radius: 3px;
                            background-color: rgba(0, 0, 0, 0.3);
                        }
                        .log-content {
                            font-family: monospace;
                            font-size: 11px;
                            white-space: pre-wrap;
                            max-height: 200px;
                            overflow-y: auto;
                            background-color: #111;
                            padding: 5px;
                            border: 1px solid #333;
                        }
                    `;
                    document.head.appendChild(style);
                }
            }

            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalBody').innerHTML = content;
            modal.style.display = 'block';
        }

        function closeModal() {
            const modal = document.getElementById('resultModal');
            if (modal) {
                modal.style.display = 'none';
            }
        }

        // Include the same animatronic management functions from characters.ejs
        function testConnection(characterId) {
            showModal('Testing Connection...', '<p>Testing animatronic connection, please wait...</p>');

            fetch('/characters/' + characterId + '/test-connection', { method: 'POST' })
                .then(response => response.json())
                .then(response => {
                    if (response.success) {
                        const result = response.result;
                        let html = '<h3>Connection Test Results for ' + result.character + '</h3>';
                        html += '<p><strong>Host:</strong> ' + result.host + '</p>';
                        html += '<p><strong>Timestamp:</strong> ' + new Date(result.timestamp).toLocaleString() + '</p>';

                        // Ping test
                        const pingClass = result.tests.ping.passed ? 'test-passed' : 'test-failed';
                        html += '<div class="test-result ' + pingClass + '">';
                        html += '<h4>üåê Network Connectivity (Ping)</h4>';
                        html += '<p><strong>Status:</strong> ' + (result.tests.ping.passed ? '‚úÖ PASSED' : '‚ùå FAILED') + '</p>';
                        html += '<p><strong>Message:</strong> ' + result.tests.ping.message + '</p>';
                        html += '<p><strong>Duration:</strong> ' + result.tests.ping.duration + 'ms</p>';
                        html += '</div>';



                        // Log test
                        const logClass = result.tests.logs.passed ? 'test-passed' : 'test-failed';
                        html += '<div class="test-result ' + logClass + '">';
                        html += '<h4>üìã Log Collection</h4>';
                        html += '<p><strong>Status:</strong> ' + (result.tests.logs.passed ? '‚úÖ PASSED' : '‚ùå FAILED') + '</p>';
                        html += '<p><strong>Message:</strong> ' + result.tests.logs.message + '</p>';
                        html += '<p><strong>Duration:</strong> ' + result.tests.logs.duration + 'ms</p>';
                        if (result.tests.logs.sampleLogs) {
                            html += '<p><strong>Sample Logs:</strong></p>';
                            html += '<div class="log-content">' + result.tests.logs.sampleLogs + '</div>';
                        }
                        html += '</div>';

                        showModal('Connection Test Results', html);
                    } else {
                        showModal('Connection Test Failed', '<p style="color: #ff0000;">‚ùå ' + response.error + '</p>');
                    }
                })
                .catch(error => {
                    showModal('Connection Test Error', '<p style="color: #ff0000;">‚ùå Error: ' + error.message + '</p>');
                });
        }

        function collectLogs(characterId) {
            showModal('Collecting Logs...', '<p>Collecting logs from animatronic, please wait...</p>');

            fetch('/characters/' + characterId + '/collect-logs', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    lines: 50,
                    logTypes: ['system', 'auth', 'kernel']
                })
            })
                .then(response => response.json())
                .then(response => {
                    if (response.success) {
                        const result = response.result;
                        let html = '<h3>Log Collection Results for ' + result.character + '</h3>';
                        html += '<p><strong>Host:</strong> ' + result.host + '</p>';
                        html += '<p><strong>Timestamp:</strong> ' + new Date(result.timestamp).toLocaleString() + '</p>';

                        Object.keys(result.logs).forEach(logType => {
                            const log = result.logs[logType];
                            const logClass = log.success ? 'test-passed' : 'test-failed';
                            html += '<div class="log-section ' + logClass + '">';
                            html += '<h4>üìã ' + logType.toUpperCase() + ' Logs</h4>';
                            if (log.success) {
                                html += '<p><strong>Status:</strong> ‚úÖ SUCCESS</p>';
                                html += '<div class="log-content">' + log.data + '</div>';
                            } else {
                                html += '<p><strong>Status:</strong> ‚ùå FAILED</p>';
                                html += '<p><strong>Error:</strong> ' + log.error + '</p>';
                            }
                            html += '</div>';
                        });

                        showModal('Log Collection Results', html);
                    } else {
                        showModal('Log Collection Failed', '<p style="color: #ff0000;">‚ùå ' + response.error + '</p>');
                    }
                })
                .catch(error => {
                    showModal('Log Collection Error', '<p style="color: #ff0000;">‚ùå Error: ' + error.message + '</p>');
                });
        }

        function showSystemInfo(characterId) {
            showModal('Getting System Info...', '<p>Retrieving system information, please wait...</p>');

            fetch('/characters/' + characterId + '/system-info')
                .then(response => response.json())
                .then(response => {
                    if (response.success) {
                        const result = response.result;
                        const info = result.systemInfo;
                        let html = '<h3>System Information for ' + result.character + '</h3>';
                        html += '<p><strong>Host:</strong> ' + result.host + '</p>';
                        html += '<p><strong>Timestamp:</strong> ' + new Date(result.timestamp).toLocaleString() + '</p>';

                        html += '<div class="test-result test-passed">';
                        html += '<h4>üñ•Ô∏è System Details</h4>';
                        html += '<p><strong>Platform:</strong> ' + info.platform + '</p>';
                        html += '<p><strong>Architecture:</strong> ' + info.arch + '</p>';
                        html += '<p><strong>Hostname:</strong> ' + info.hostname + '</p>';
                        html += '<p><strong>Uptime:</strong> ' + info.uptime + '</p>';
                        html += '</div>';

                        html += '<div class="test-result test-passed">';
                        html += '<h4>üíæ Memory & Storage</h4>';
                        html += '<p><strong>Total Memory:</strong> ' + info.totalMem + '</p>';
                        html += '<p><strong>Used Memory:</strong> ' + info.usedMem + '</p>';
                        html += '<p><strong>Free Memory:</strong> ' + info.freeMem + '</p>';
                        html += '<p><strong>Disk Usage:</strong> ' + info.diskUsage + '</p>';
                        html += '<p><strong>Disk Free:</strong> ' + info.diskFree + '</p>';
                        html += '</div>';

                        html += '<div class="test-result test-passed">';
                        html += '<h4>‚ö° Hardware Status</h4>';
                        html += '<p><strong>Temperature:</strong> ' + info.temperature + '</p>';
                        html += '<p><strong>Voltage:</strong> ' + info.voltage + '</p>';
                        html += '<p><strong>WiFi Signal:</strong> ' + info.wifiSignal + '</p>';
                        html += '</div>';

                        showModal('System Information', html);
                    } else {
                        showModal('System Info Failed', '<p style="color: #ff0000;">‚ùå ' + response.error + '</p>');
                    }
                })
                .catch(error => {
                    showModal('System Info Error', '<p style="color: #ff0000;">‚ùå Error: ' + error.message + '</p>');
                });
        }

        function rebootSystem(characterId) {
            if (confirm('Are you sure you want to reboot this animatronic system? This will disconnect all users and stop all running processes.')) {
                showModal('Rebooting System...', '<p>Sending reboot command to animatronic, please wait...</p>');

                fetch('/characters/' + characterId + '/reboot', { method: 'POST' })
                    .then(response => response.json())
                    .then(response => {
                        if (response.success) {
                            const result = response.result;
                            let html = '<h3>Reboot Command Sent</h3>';
                            html += '<p style="color: #00ff00;">‚úÖ ' + result.message + '</p>';
                            html += '<p><strong>Timestamp:</strong> ' + new Date(result.timestamp).toLocaleString() + '</p>';
                            html += '<p><em>The system should be back online in 1-2 minutes.</em></p>';

                            showModal('System Reboot', html);
                        } else {
                            showModal('Reboot Failed', '<p style="color: #ff0000;">‚ùå ' + response.error + '</p>');
                        }
                    })
                    .catch(error => {
                        showModal('Reboot Error', '<p style="color: #ff0000;">‚ùå Error: ' + error.message + '</p>');
                    });
            }
        }

        function manageServos(characterId) {
            // Navigate to the character servo management page
            window.location.href = '/characters/' + characterId + '/servos';
        }

        function viewSystemConfig(characterId) {
            showModal('Loading System Configuration...', '<p>Loading system configuration for this character...</p>');

            fetch('/characters/' + characterId + '/system-info')
                .then(response => response.json())
                .then(response => {
                    if (response.success) {
                        const result = response.result;
                        const info = result.systemInfo;
                        let html = '<h3>System Configuration for ' + result.character + '</h3>';
                        html += '<p><strong>Host:</strong> ' + result.host + '</p>';
                        html += '<p><strong>Timestamp:</strong> ' + new Date(result.timestamp).toLocaleString() + '</p>';

                        html += '<div class="test-result test-passed">';
                        html += '<h4>üñ•Ô∏è System Information</h4>';
                        html += '<p><strong>Platform:</strong> ' + info.platform + '</p>';
                        html += '<p><strong>Architecture:</strong> ' + info.arch + '</p>';
                        html += '<p><strong>Hostname:</strong> ' + info.hostname + '</p>';
                        html += '<p><strong>Uptime:</strong> ' + info.uptime + '</p>';
                        html += '</div>';

                        html += '<div class="test-result test-passed">';
                        html += '<h4>üíæ Memory & Storage</h4>';
                        html += '<p><strong>Total Memory:</strong> ' + info.totalMem + '</p>';
                        html += '<p><strong>Used Memory:</strong> ' + info.usedMem + '</p>';
                        html += '<p><strong>Free Memory:</strong> ' + info.freeMem + '</p>';
                        html += '<p><strong>Disk Total:</strong> ' + info.diskTotal + '</p>';
                        html += '<p><strong>Disk Used:</strong> ' + info.diskUsed + '</p>';
                        html += '<p><strong>Disk Free:</strong> ' + info.diskFree + '</p>';
                        html += '</div>';

                        html += '<div class="test-result test-passed">';
                        html += '<h4>‚ö° Hardware Status</h4>';
                        html += '<p><strong>Temperature:</strong> ' + info.temperature + '</p>';
                        html += '<p><strong>Voltage:</strong> ' + info.voltage + '</p>';
                        html += '<p><strong>WiFi Signal:</strong> ' + info.wifiSignal + '</p>';
                        html += '</div>';

                        showModal('System Configuration', html);
                    } else {
                        showModal('System Config Failed', '<p style="color: #ff0000;">‚ùå ' + response.error + '</p>');
                    }
                })
                .catch(error => {
                    showModal('System Config Error', '<p style="color: #ff0000;">‚ùå Error: ' + error.message + '</p>');
                });
        }

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('resultModal');
            if (event.target == modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
