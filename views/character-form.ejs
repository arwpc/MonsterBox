<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/wavesurfer.js/6.6.4/wavesurfer.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST" enctype="multipart/form-data">
        <% if (character.id) { %>
            <input type="hidden" name="id" value="<%= character.id %>">
        <% } %>
        <div>
            <label for="char_name">Name:</label>
            <input type="text" id="char_name" name="char_name" value="<%= character.char_name || '' %>" required>
        </div>
        <div>
            <label for="char_description">Description:</label>
            <textarea id="char_description" name="char_description" required><%= character.char_description || '' %></textarea>
        </div>
        <div>
            <label for="character_image">Character Image:</label>
            <input type="file" id="character_image" name="character_image" accept="image/*">
            <% if (character.image) { %>
                <img src="/images/characters/<%= character.image %>" alt="<%= character.char_name %>" style="max-width: 200px;">
            <% } %>
        </div>

        <!-- Voice Configuration Section -->
        <div class="voice-config">
            <h3>Voice Configuration</h3>
            <button type="button" id="configureVoice" class="button">Choose Voice</button>

            <!-- Voice Configuration Modal -->
            <div id="voiceModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>Configure Voice</h2>
                    
                    <div class="voice-settings">
                        <div class="setting-group">
                            <label for="voiceSelect">Voice:</label>
                            <select id="voiceSelect" required></select>
                        </div>

                        <div class="setting-group">
                            <label for="modelSelect">Model:</label>
                            <select id="modelSelect">
                                <option value="vox_1_0">Version 1.0</option>
                                <option value="vox_2_0" selected>Version 2.0</option>
                            </select>
                        </div>

                        <div class="setting-group">
                            <label for="languageSelect">Language:</label>
                            <select id="languageSelect"></select>
                        </div>

                        <div class="setting-group">
                            <label for="styleSelect">Style:</label>
                            <select id="styleSelect"></select>
                        </div>

                        <div class="setting-group">
                            <label for="pitch">Pitch (-12 to +12):</label>
                            <input type="range" id="pitch" min="-12" max="12" value="0" step="1">
                            <span id="pitchValue">0</span>
                        </div>

                        <div class="setting-group">
                            <label for="speed">Speed (0.1x to 3.0x):</label>
                            <input type="range" id="speed" min="0.1" max="3.0" value="1.0" step="0.1">
                            <span id="speedValue">1.0x</span>
                        </div>

                        <div class="setting-group">
                            <label for="volume">Volume (-20 to +20 dB):</label>
                            <input type="range" id="volume" min="-20" max="20" value="0" step="1">
                            <span id="volumeValue">0 dB</span>
                        </div>

                        <div class="setting-group">
                            <label for="sampleRate">Sample Rate:</label>
                            <select id="sampleRate">
                                <option value="44100">44.1 kHz</option>
                                <option value="48000">48 kHz</option>
                            </select>
                        </div>

                        <div class="setting-group">
                            <label for="bitRate">Bit Rate:</label>
                            <select id="bitRate">
                                <option value="64">64 kbps</option>
                                <option value="128">128 kbps</option>
                                <option value="192" selected>192 kbps</option>
                                <option value="256">256 kbps</option>
                            </select>
                        </div>

                        <div class="setting-group">
                            <label for="outputFormat">Output Format:</label>
                            <select id="outputFormat">
                                <option value="mp3">MP3</option>
                                <option value="wav">WAV</option>
                                <option value="ogg">OGG</option>
                                <option value="flac">FLAC</option>
                            </select>
                        </div>

                        <div class="setting-group">
                            <label for="testText">Test Text:</label>
                            <textarea id="testText" rows="3">I am your monster, hear me roar!</textarea>
                        </div>

                        <!-- Audio Preview Section -->
                        <div class="audio-preview">
                            <div id="waveform"></div>
                            <div class="audio-controls">
                                <button type="button" id="previewPlay" class="button">Play</button>
                                <button type="button" id="previewStop" class="button">Stop</button>
                            </div>
                            <div id="loadingIndicator" class="loading" style="display: none;">
                                Generating audio...
                            </div>
                        </div>

                        <!-- Preset Management -->
                        <div class="preset-management">
                            <select id="presetSelect">
                                <option value="">Select Preset</option>
                            </select>
                            <input type="text" id="presetName" placeholder="Preset Name">
                            <button type="button" id="savePreset" class="button">Save Preset</button>
                            <button type="button" id="loadPreset" class="button">Load Preset</button>
                            <button type="button" id="resetDefaults" class="button">Reset to Defaults</button>
                        </div>

                        <div class="modal-actions">
                            <button type="button" id="saveVoiceSettings" class="button">Save Voice Settings</button>
                            <button type="button" id="saveToSounds" class="button">Save to Sounds</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div>
            <label>Parts:</label>
            <div id="parts-container">
                <div id="available-parts">
                    <h4>Available Parts:</h4>
                    <select id="available-parts-select" multiple>
                        <% parts.filter(part => !character.parts || !character.parts.includes(part.id)).forEach(function(part) { %>
                            <option value="<%= part.id %>"><%= part.name %> (<%= part.type %>)</option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addPart()">Add &gt;</button>
                    <button type="button" onclick="removePart()">&lt; Remove</button>
                </div>
                <div id="selected-parts">
                    <h4>Selected Parts:</h4>
                    <select id="selected-parts-select" name="parts" multiple>
                        <% if (character.parts) { %>
                            <% character.parts.forEach(function(partId) { %>
                                <% const part = parts.find(p => p.id === partId); %>
                                <% if (part) { %>
                                    <option value="<%= part.id %>"><%= part.name %> (<%= part.type %>)</option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <div>
            <label>Sounds:</label>
            <div id="sounds-container">
                <div id="available-sounds">
                    <h4>Available Sounds:</h4>
                    <select id="available-sounds-select" multiple>
                        <% sounds.filter(sound => !character.sounds || !character.sounds.includes(sound.id)).forEach(function(sound) { %>
                            <option value="<%= sound.id %>"><%= sound.name %></option>
                        <% }); %>
                    </select>
                </div>
                <div>
                    <button type="button" onclick="addSound()">Add &gt;</button>
                    <button type="button" onclick="removeSound()">&lt; Remove</button>
                </div>
                <div id="selected-sounds">
                    <h4>Selected Sounds:</h4>
                    <select id="selected-sounds-select" name="sounds" multiple>
                        <% if (character.sounds) { %>
                            <% character.sounds.forEach(function(soundId) { %>
                                <% const sound = sounds.find(s => s.id === soundId); %>
                                <% if (sound) { %>
                                    <option value="<%= sound.id %>"><%= sound.name %></option>
                                <% } %>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit">Save Character</button>
    </form>
    <a href="/characters" class="button">Back to Characters</a>

    <style>
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .setting-group {
            margin-bottom: 15px;
        }

        .loading {
            text-align: center;
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 4px;
            margin: 10px 0;
        }

        .audio-preview {
            margin: 20px 0;
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 4px;
        }

        .preset-management {
            margin: 20px 0;
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 4px;
        }

        .modal-actions {
            margin-top: 20px;
            text-align: right;
        }
    </style>

    <script>
        // Existing parts and sounds functions
        function addPart() {
            moveOptions('available-parts-select', 'selected-parts-select');
        }

        function removePart() {
            moveOptions('selected-parts-select', 'available-parts-select');
        }

        function addSound() {
            moveOptions('available-sounds-select', 'selected-sounds-select');
        }

        function removeSound() {
            moveOptions('selected-sounds-select', 'available-sounds-select');
        }

        function moveOptions(fromId, toId) {
            const fromSelect = document.getElementById(fromId);
            const toSelect = document.getElementById(toId);
            
            for (let option of Array.from(fromSelect.selectedOptions)) {
                toSelect.add(option);
                option.selected = false;
            }
            updateAvailableOptions();
        }

        function updateAvailableOptions() {
            const availableParts = document.getElementById('available-parts-select');
            const selectedParts = document.getElementById('selected-parts-select');
            const availableSounds = document.getElementById('available-sounds-select');
            const selectedSounds = document.getElementById('selected-sounds-select');

            for (let option of availableParts.options) {
                option.disabled = Array.from(selectedParts.options).some(o => o.value === option.value);
            }

            for (let option of availableSounds.options) {
                option.disabled = Array.from(selectedSounds.options).some(o => o.value === option.value);
            }
        }

        // Voice configuration modal functionality
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('voiceModal');
            const configureBtn = document.getElementById('configureVoice');
            const closeBtn = document.getElementsByClassName('close')[0];
            const wavesurfer = WaveSurfer.create({
                container: '#waveform',
                waveColor: '#4a9eff',
                progressColor: '#1976d2',
                height: 50
            });

            // Initialize voice selection
            fetch('/api/voice/available')
                .then(response => response.json())
                .then(voices => {
                    const voiceSelect = document.getElementById('voiceSelect');
                    voices.forEach(voice => {
                        const option = document.createElement('option');
                        option.value = voice.id;
                        option.textContent = voice.name;
                        voiceSelect.appendChild(option);
                    });
                });

            // Modal controls
            configureBtn.onclick = function() {
                modal.style.display = 'block';
            }

            closeBtn.onclick = function() {
                modal.style.display = 'none';
            }

            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = 'none';
                }
            }

            // Voice settings controls
            const updateValue = (elementId, value, suffix = '') => {
                document.getElementById(elementId + 'Value').textContent = value + suffix;
            };

            ['pitch', 'speed', 'volume'].forEach(param => {
                const element = document.getElementById(param);
                element.oninput = () => updateValue(param, element.value, 
                    param === 'speed' ? 'x' : 
                    param === 'volume' ? ' dB' : '');
            });

            // Audio preview controls
            document.getElementById('previewPlay').onclick = async function() {
                const settings = {
                    speaker_id: document.getElementById('voiceSelect').value,
                    text: document.getElementById('testText').value,
                    pitch: parseInt(document.getElementById('pitch').value),
                    speed: parseFloat(document.getElementById('speed').value),
                    volume: parseInt(document.getElementById('volume').value),
                    sampleRate: parseInt(document.getElementById('sampleRate').value),
                    bitRate: parseInt(document.getElementById('bitRate').value),
                    modelId: document.getElementById('modelSelect').value,
                    outputFormat: document.getElementById('outputFormat').value
                };

                document.getElementById('loadingIndicator').style.display = 'block';

                try {
                    const response = await fetch('/api/voice/generate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(settings)
                    });
                    const data = await response.json();
                    
                    wavesurfer.load(data.url);
                    wavesurfer.on('ready', function() {
                        wavesurfer.play();
                    });
                } catch (error) {
                    console.error('Error generating speech:', error);
                    alert('Error generating speech preview');
                } finally {
                    document.getElementById('loadingIndicator').style.display = 'none';
                }
            };

            document.getElementById('previewStop').onclick = function() {
                wavesurfer.stop();
            };

            // Save voice settings
            document.getElementById('saveVoiceSettings').onclick = async function() {
                const characterId = document.querySelector('input[name="id"]').value;
                const settings = {
                    characterId,
                    speaker_id: document.getElementById('voiceSelect').value,
                    settings: {
                        pitch: parseInt(document.getElementById('pitch').value),
                        speed: parseFloat(document.getElementById('speed').value),
                        volume: parseInt(document.getElementById('volume').value),
                        sampleRate: parseInt(document.getElementById('sampleRate').value),
                        bitRate: parseInt(document.getElementById('bitRate').value),
                        modelId: document.getElementById('modelSelect').value,
                        outputFormat: document.getElementById('outputFormat').value
                    }
                };

                try {
                    await fetch('/api/voice/settings', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(settings)
                    });
                    alert('Voice settings saved successfully');
                } catch (error) {
                    console.error('Error saving voice settings:', error);
                    alert('Error saving voice settings');
                }
            };

            // Save to sounds library
            document.getElementById('saveToSounds').onclick = async function() {
                const characterId = document.querySelector('input[name="id"]').value;
                const settings = {
                    characterId,
                    speaker_id: document.getElementById('voiceSelect').value,
                    text: document.getElementById('testText').value,
                    name: `${document.getElementById('char_name').value} - Voice Sample`,
                    pitch: parseInt(document.getElementById('pitch').value),
                    speed: parseFloat(document.getElementById('speed').value),
                    volume: parseInt(document.getElementById('volume').value),
                    sampleRate: parseInt(document.getElementById('sampleRate').value),
                    bitRate: parseInt(document.getElementById('bitRate').value),
                    modelId: document.getElementById('modelSelect').value,
                    outputFormat: 'mp3'
                };

                try {
                    await fetch('/api/voice/save-to-library', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(settings)
                    });
                    alert('Voice saved to sound library');
                } catch (error) {
                    console.error('Error saving to sound library:', error);
                    alert('Error saving to sound library');
                }
            };

            // Preset management
            document.getElementById('savePreset').onclick = async function() {
                const characterId = document.querySelector('input[name="id"]').value;
                const presetName = document.getElementById('presetName').value;
                if (!presetName) {
                    alert('Please enter a preset name');
                    return;
                }

                const settings = {
                    characterId,
                    presetName,
                    settings: {
                        speaker_id: document.getElementById('voiceSelect').value,
                        pitch: parseInt(document.getElementById('pitch').value),
                        speed: parseFloat(document.getElementById('speed').value),
                        volume: parseInt(document.getElementById('volume').value),
                        sampleRate: parseInt(document.getElementById('sampleRate').value),
                        bitRate: parseInt(document.getElementById('bitRate').value),
                        modelId: document.getElementById('modelSelect').value,
                        outputFormat: document.getElementById('outputFormat').value
                    }
                };

                try {
                    await fetch('/api/voice/preset', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(settings)
                    });
                    alert('Preset saved successfully');
                    loadPresets();
                } catch (error) {
                    console.error('Error saving preset:', error);
                    alert('Error saving preset');
                }
            };

            // Load presets for the character
            async function loadPresets() {
                const characterId = document.querySelector('input[name="id"]').value;
                try {
                    const response = await fetch(`/api/voice/${characterId}`);
                    const voice = await response.json();
                    const presetSelect = document.getElementById('presetSelect');
                    presetSelect.innerHTML = '<option value="">Select Preset</option>';
                    
                    if (voice && voice.presets) {
                        Object.keys(voice.presets).forEach(presetName => {
                            const option = document.createElement('option');
                            option.value = presetName;
                            option.textContent = presetName;
                            presetSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error('Error loading presets:', error);
                }
            }

            // Load preset
            document.getElementById('loadPreset').onclick = async function() {
                const characterId = document.querySelector('input[name="id"]').value;
                const presetName = document.getElementById('presetSelect').value;
                if (!presetName) {
                    alert('Please select a preset');
                    return;
                }

                try {
                    const response = await fetch(`/api/voice/${characterId}`);
                    const voice = await response.json();
                    if (voice && voice.presets && voice.presets[presetName]) {
                        const settings = voice.presets[presetName];
                        document.getElementById('voiceSelect').value = settings.speaker_id;
                        document.getElementById('pitch').value = settings.pitch;
                        document.getElementById('speed').value = settings.speed;
                        document.getElementById('volume').value = settings.volume;
                        document.getElementById('sampleRate').value = settings.sampleRate;
                        document.getElementById('bitRate').value = settings.bitRate;
                        document.getElementById('modelSelect').value = settings.modelId;
                        document.getElementById('outputFormat').value = settings.outputFormat;

                        // Update display values
                        updateValue('pitch', settings.pitch);
                        updateValue('speed', settings.speed, 'x');
                        updateValue('volume', settings.volume, ' dB');
                    }
                } catch (error) {
                    console.error('Error loading preset:', error);
                    alert('Error loading preset');
                }
            };

            // Reset to defaults
            document.getElementById('resetDefaults').onclick = function() {
                document.getElementById('pitch').value = 0;
                document.getElementById('speed').value = 1.0;
                document.getElementById('volume').value = 0;
                document.getElementById('sampleRate').value = 44100;
                document.getElementById('bitRate').value = 192;
                document.getElementById('modelSelect').value = 'vox_2_0';
                document.getElementById('outputFormat').value = 'mp3';
                document.getElementById('testText').value = 'I am your monster, hear me roar!';

                updateValue('pitch', 0);
                updateValue('speed', 1.0, 'x');
                updateValue('volume', 0, ' dB');
            };

            // Load initial presets
            if (document.querySelector('input[name="id"]')) {
                loadPresets();
            }
        });

        // Ensure all options are selected before form submission
        document.querySelector('form').onsubmit = function() {
            const selectedParts = document.getElementById('selected-parts-select');
            const selectedSounds = document.getElementById('selected-sounds-select');
            
            for (let option of selectedParts.options) {
                option.selected = true;
            }
            
            for (let option of selectedSounds.options) {
                option.selected = true;
            }
            
            return true;
        };

        // Initialize available options
        updateAvailableOptions();
    </script>
</body>
</html>
