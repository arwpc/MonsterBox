<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .channel-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 10px;
        }
        .channel-button {
            padding: 10px;
            text-align: center;
            background-color: #003300;
            color: #00ff00;
            border: 1px solid #00ff00;
            cursor: pointer;
        }
        .channel-button.selected {
            background-color: #00ff00;
            color: #000000;
        }
        #testResult {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
        }
        .success {
            background-color: #dff0d8;
            color: #3c763d;
        }
        .error {
            background-color: #f2dede;
            color: #a94442;
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>" method="POST">
        <input type="hidden" name="type" value="servo">
        <% if (part && part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part ? part.name : '' %>" required>
        </div>
        <div>
            <label for="characterId">Character:</label>
            <select id="characterId" name="characterId" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (part && part.characterId === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div>
            <label for="servoType">Servo Type:</label>
            <select id="servoType" name="servoType" required onchange="updateServoDefaults()">
                <% servoTypes.forEach(function(type) { %>
                    <option value="<%= type %>" <%= (part && part.servoType === type) ? 'selected' : '' %>><%= type %></option>
                <% }); %>
            </select>
        </div>
        <div>
            <label for="usePCA9685">Use PCA9685:</label>
            <input type="checkbox" id="usePCA9685" name="usePCA9685" <%= (part && part.usePCA9685) ? 'checked' : '' %> onchange="togglePCA9685()">
        </div>
        <div id="pca9685Fields" style="display: none;">
            <div>
                <label for="channel">PCA9685 Channel:</label>
                <input type="number" id="channel" name="channel" value="<%= part ? part.channel : 0 %>" min="0" max="15" required>
            </div>
            <div>
                <label>Channel Position:</label>
                <div class="channel-grid">
                    <% for (let i = 0; i < 16; i++) { %>
                        <div class="channel-button" data-channel="<%= i %>">
                            <%= i %> (<%= ['Top', 'Top', 'Top', 'Top', 'Upper Mid', 'Upper Mid', 'Upper Mid', 'Upper Mid', 'Lower Mid', 'Lower Mid', 'Lower Mid', 'Lower Mid', 'Bottom', 'Bottom', 'Bottom', 'Bottom'][i] %>)
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
        <div id="gpioField" style="display: none;">
            <label for="pin">GPIO Pin:</label>
            <input type="number" id="pin" name="pin" value="<%= part ? part.pin : '' %>" min="0" max="27" required>
        </div>
        <div>
            <label for="minPulse">Min Pulse (μs):</label>
            <input type="number" id="minPulse" name="minPulse" value="<%= part ? part.minPulse : 500 %>" required>
        </div>
        <div>
            <label for="maxPulse">Max Pulse (μs):</label>
            <input type="number" id="maxPulse" name="maxPulse" value="<%= part ? part.maxPulse : 2500 %>" required>
        </div>
        <div>
            <label for="defaultAngle">Default Angle:</label>
            <input type="number" id="defaultAngle" name="defaultAngle" value="<%= part ? part.defaultAngle : 90 %>" min="0" max="180" required>
        </div>
        <button type="submit">Save Part</button>
    </form>
    <div id="servoTest">
        <h2>Test Servo</h2>
        <div>
            <label for="testAngle">Angle (0-180) / Speed for FS90R:</label>
            <input type="range" id="testAngle" min="0" max="180" value="90">
            <span id="angleValue">90</span>
        </div>
        <p id="servoDescription"></p>
        <button onclick="testServo()">Test Servo</button>
        <button onclick="stopServo()">Stop Test</button>
        <div id="testResult"></div>
    </div>
    <a href="/parts" class="button">Back to Parts</a>

    <script>
        const servoDefaults = JSON.parse('<%= JSON.stringify(servoTypes.reduce((acc, type) => ({ ...acc, [type]: getServoDefaults(type) }), {})) %>');

        document.addEventListener('DOMContentLoaded', function() {
            const channelButtons = document.querySelectorAll('.channel-button');
            const channelInput = document.getElementById('channel');

            channelButtons.forEach(button => {
                button.addEventListener('click', function() {
                    channelButtons.forEach(b => b.classList.remove('selected'));
                    this.classList.add('selected');
                    channelInput.value = this.dataset.channel;
                });
            });

            // Set initial selected channel
            const initialChannel = parseInt(channelInput.value);
            channelButtons[initialChannel].classList.add('selected');

            // Initialize servo description and defaults
            updateServoDefaults();
            updateServoDescription(document.getElementById('testAngle').value);
            togglePCA9685();

            // Add event listener for channel input
            channelInput.addEventListener('change', function() {
                const channel = parseInt(this.value);
                if (channel >= 0 && channel <= 15) {
                    channelButtons.forEach(b => b.classList.remove('selected'));
                    channelButtons[channel].classList.add('selected');
                }
            });
        });

        document.getElementById('testAngle').addEventListener('input', function() {
            const angle = parseInt(this.value);
            document.getElementById('angleValue').textContent = angle;
            updateServoDescription(angle);
        });

        function updateServoDefaults() {
            const servoType = document.getElementById('servoType').value;
            const defaults = servoDefaults[servoType];
            document.getElementById('minPulse').value = defaults.minPulse;
            document.getElementById('maxPulse').value = defaults.maxPulse;
            document.getElementById('defaultAngle').value = defaults.defaultAngle;
            updateServoDescription(document.getElementById('testAngle').value);
        }

        function updateServoDescription(angle) {
            const servoType = document.getElementById('servoType').value;
            let description = '';
            if (servoType === 'FS90R') {
                if (angle === 90) description = 'Stopped';
                else if (angle < 90) description = `Clockwise (${100 - Math.round(angle / 90 * 100)}% speed)`;
                else description = `Counterclockwise (${Math.round((angle - 90) / 90 * 100)}% speed)`;
            } else {
                description = `Angle: ${angle}°`;
            }
            document.getElementById('servoDescription').textContent = description;
        }

        function togglePCA9685() {
            const usePCA9685 = document.getElementById('usePCA9685').checked;
            document.getElementById('pca9685Fields').style.display = usePCA9685 ? 'block' : 'none';
            document.getElementById('gpioField').style.display = usePCA9685 ? 'none' : 'block';
        }

        function testServo() {
            const angle = document.getElementById('testAngle').value;
            const usePCA9685 = document.getElementById('usePCA9685').checked;
            const channel = document.getElementById('channel').value;
            const pin = document.getElementById('pin').value;
            fetch('/parts/servo/test', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    angle: parseInt(angle),
                    usePCA9685: usePCA9685,
                    channel: parseInt(channel),
                    pin: parseInt(pin),
                    servoType: document.getElementById('servoType').value,
                    minPulse: parseInt(document.getElementById('minPulse').value),
                    maxPulse: parseInt(document.getElementById('maxPulse').value)
                })
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('testResult');
                if (data.success) {
                    resultDiv.textContent = 'Servo test successful: ' + data.message;
                    resultDiv.className = 'success';
                } else {
                    resultDiv.textContent = 'Servo test failed: ' + data.message;
                    resultDiv.className = 'error';
                }
                console.log('Servo Test Result:', data.message);
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('testResult');
                resultDiv.textContent = 'An error occurred while testing the servo: ' + error.message;
                resultDiv.className = 'error';
            });
        }

        function stopServo() {
            const usePCA9685 = document.getElementById('usePCA9685').checked;
            const channel = document.getElementById('channel').value;
            const pin = document.getElementById('pin').value;
            fetch('/parts/servo/stop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    usePCA9685: usePCA9685,
                    channel: parseInt(channel),
                    pin: parseInt(pin),
                    servoType: document.getElementById('servoType').value
                })
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('testResult');
                if (data.success) {
                    resultDiv.textContent = 'Servo stopped successfully: ' + data.message;
                    resultDiv.className = 'success';
                } else {
                    resultDiv.textContent = 'Failed to stop servo: ' + data.message;
                    resultDiv.className = 'error';
                }
                console.log('Servo Stop Result:', data.message);
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('testResult');
                resultDiv.textContent = 'An error occurred while stopping the servo: ' + error.message;
                resultDiv.className = 'error';
            });
        }
    </script>
</body>
</html>