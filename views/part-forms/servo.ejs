<!DOCTYPE html>
<html lang="en">
<!-- Previous head section remains the same -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .channel-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 10px;
        }
        .channel-button {
            padding: 10px;
            text-align: center;
            background-color: #003300;
            color: #00ff00;
            border: 1px solid #00ff00;
            cursor: pointer;
        }
        .channel-button.selected {
            background-color: #00ff00;
            color: #000000;
        }
        #testResult {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
        }
        .success {
            background-color: #dff0d8;
            color: #3c763d;
        }
        .error {
            background-color: #f2dede;
            color: #a94442;
        }
        .servo-info {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #00ff00;
            background-color: #002200;
            border-radius: 4px;
        }
        .servo-info p {
            margin: 5px 0;
            color: #00ff00;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form action="<%= action %>?returnTo=/parts?characterId=<%= character ? character.id : (part ? part.characterId : '') %>" method="POST" id="servoForm">
        <input type="hidden" name="type" value="servo">
        <% if (part && part.id) { %>
            <input type="hidden" name="id" value="<%= part.id %>">
        <% } %>
        <div>
            <label for="name">Part Name:</label>
            <input type="text" id="name" name="name" value="<%= part ? part.name : '' %>" required>
        </div>
        <div>
            <label for="characterId">Character:</label>
            <select id="characterId" name="characterId" required>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>" <%= (part && part.characterId === character.id) ? 'selected' : '' %>>
                        <%= character.char_name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div>
            <label for="servoType">Servo Type:</label>
            <select id="servoType" name="servoType" required onchange="updateServoParameters()">
                <option value="">Select a Servo Type</option>
                <% servoConfigs.forEach(function(servo) { %>
                    <option value="<%= servo.name %>" 
                            data-min-pulse="<%= servo.min_pulse_width_us %>"
                            data-max-pulse="<%= servo.max_pulse_width_us %>"
                            data-default-angle="<%= servo.default_angle_deg %>"
                            data-model="<%= servo.model %>"
                            data-manufacturer="<%= servo.manufacturer %>"
                            data-modes="<%= servo.mode.join(',') %>"
                            data-torque="<%= servo.max_torque_kg_cm %>"
                            data-rotation="<%= servo.rotation_range_deg %>"
                            data-feedback="<%= servo.feedback %>"
                            data-notes="<%= servo.notes || '' %>"
                            <%= (part && part.servoType === servo.name) ? 'selected' : '' %>>
                        <%= servo.name %>
                    </option>
                <% }); %>
            </select>
        </div>

        <div id="servoInfo" class="servo-info" style="display: none;">
            <p id="servoModel"></p>
            <p id="servoModes"></p>
            <p id="servoTorque"></p>
            <p id="servoRotation"></p>
            <p id="servoFeedback"></p>
            <p id="servoNotes"></p>
        </div>

        <div>
            <label for="usePCA9685">Use PCA9685:</label>
            <input type="checkbox" id="usePCA9685" name="usePCA9685" <%= (part && part.usePCA9685) ? 'checked' : '' %> onchange="togglePCA9685()">
        </div>
        <div id="pca9685Fields" style="display: none;">
            <div>
                <label for="channel">PCA9685 Channel:</label>
                <input type="number" id="channel" name="channel" value="<%= part ? part.channel : 0 %>" min="0" max="15" required>
            </div>
            <div>
                <label>Channel Position:</label>
                <div class="channel-grid">
                    <% for (let i = 0; i < 16; i++) { %>
                        <div class="channel-button" data-channel="<%= i %>">
                            <%= i %> (<%= ['Top', 'Top', 'Top', 'Top', 'Upper Mid', 'Upper Mid', 'Upper Mid', 'Upper Mid', 'Lower Mid', 'Lower Mid', 'Lower Mid', 'Lower Mid', 'Bottom', 'Bottom', 'Bottom', 'Bottom'][i] %>)
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
        <div id="gpioField" style="display: none;">
            <label for="pin">GPIO Pin:</label>
            <input type="number" id="pin" name="pin" value="<%= part ? part.pin : '' %>" min="0" max="27" required>
        </div>

        <input type="hidden" id="minPulse" name="minPulse" value="<%= part ? part.minPulse : 500 %>">
        <input type="hidden" id="maxPulse" name="maxPulse" value="<%= part ? part.maxPulse : 2500 %>">
        <input type="hidden" id="defaultAngle" name="defaultAngle" value="<%= part ? part.defaultAngle : 90 %>">

        <button type="submit">Save Part</button>
    </form>

    <div id="servoTest">
        <h2>Test Servo</h2>
        <div>
            <label for="testAngle">Angle (0-180):</label>
            <input type="range" id="testAngle" min="0" max="180" value="90">
            <span id="angleValue">90</span>
        </div>
        <p id="servoDescription"></p>
        <button onclick="testServo()">Test Servo</button>
        <button onclick="stopServo()">Stop Test</button>
        <div id="testResult"></div>
    </div>

    <a href="/parts?characterId=<%= character ? character.id : (part ? part.characterId : '') %>" class="button">Back to Parts</a>
    <a href="/system-config/servos" class="button">Manage Servo Configurations</a>

    <script>
        function updateServoParameters() {
            const select = document.getElementById('servoType');
            const selectedOption = select.options[select.selectedIndex];
            const servoInfo = document.getElementById('servoInfo');
            
            if (selectedOption.value) {
                // Update hidden inputs with servo parameters
                document.getElementById('minPulse').value = selectedOption.dataset.minPulse;
                document.getElementById('maxPulse').value = selectedOption.dataset.maxPulse;
                document.getElementById('defaultAngle').value = selectedOption.dataset.defaultAngle;

                // Update servo info display
                document.getElementById('servoModel').textContent = `Model: ${selectedOption.dataset.model} (${selectedOption.dataset.manufacturer})`;
                document.getElementById('servoModes').textContent = `Operating Modes: ${selectedOption.dataset.modes}`;
                document.getElementById('servoTorque').textContent = `Max Torque: ${selectedOption.dataset.torque} kg/cm`;
                document.getElementById('servoRotation').textContent = `Rotation Range: ${selectedOption.dataset.rotation}Â°`;
                document.getElementById('servoFeedback').textContent = `Position Feedback: ${selectedOption.dataset.feedback === 'true' ? 'Yes' : 'No'}`;
                document.getElementById('servoNotes').textContent = `Notes: ${selectedOption.dataset.notes || 'None'}`;
                
                servoInfo.style.display = 'block';
                updateServoDescription(document.getElementById('testAngle').value);
            } else {
                servoInfo.style.display = 'none';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const channelButtons = document.querySelectorAll('.channel-button');
            const channelInput = document.getElementById('channel');
            const usePCA9685Checkbox = document.getElementById('usePCA9685');

            function updateChannelSelection() {
                const selectedChannel = parseInt(channelInput.value);
                channelButtons.forEach(button => {
                    const buttonChannel = parseInt(button.dataset.channel);
                    if (buttonChannel === selectedChannel) {
                        button.classList.add('selected');
                    } else {
                        button.classList.remove('selected');
                    }
                });
            }

            channelButtons.forEach(button => {
                button.addEventListener('click', function() {
                    if (usePCA9685Checkbox.checked) {
                        channelInput.value = this.dataset.channel;
                        updateChannelSelection();
                    }
                });
            });

            channelInput.addEventListener('change', updateChannelSelection);
            usePCA9685Checkbox.addEventListener('change', function() {
                if (this.checked) {
                    updateChannelSelection();
                }
            });

            updateChannelSelection();
            updateServoParameters();
            togglePCA9685();

            document.getElementById('servoForm').addEventListener('submit', function(event) {
                const usePCA9685 = document.getElementById('usePCA9685').checked;
                
                if (usePCA9685) {
                    document.getElementById('pin').removeAttribute('required');
                    document.getElementById('pin').value = '';
                } else {
                    document.getElementById('channel').removeAttribute('required');
                    document.getElementById('channel').value = '';
                }
            });
        });

        document.getElementById('testAngle').addEventListener('input', function() {
            const angle = parseInt(this.value);
            document.getElementById('angleValue').textContent = angle;
            updateServoDescription(angle);
        });

        function updateServoDescription(angle) {
            const select = document.getElementById('servoType');
            const selectedOption = select.options[select.selectedIndex];
            
            if (selectedOption.value) {
                const modes = selectedOption.dataset.modes.split(',');
                let description = '';
                
                if (modes.includes('Continuous')) {
                    if (angle === 90) description = 'Stopped';
                    else if (angle < 90) description = `Clockwise (${100 - Math.round(angle / 90 * 100)}% speed)`;
                    else description = `Counterclockwise (${Math.round((angle - 90) / 90 * 100)}% speed)`;
                } else {
                    description = `Angle: ${angle}Â°`;
                }
                
                document.getElementById('servoDescription').textContent = description;
            }
        }

        function togglePCA9685() {
            const usePCA9685 = document.getElementById('usePCA9685').checked;
            document.getElementById('pca9685Fields').style.display = usePCA9685 ? 'block' : 'none';
            document.getElementById('gpioField').style.display = usePCA9685 ? 'none' : 'block';
            
            document.getElementById('channel').required = usePCA9685;
            document.getElementById('pin').required = !usePCA9685;
        }

        function testServo() {
            const angle = document.getElementById('testAngle').value;
            const usePCA9685 = document.getElementById('usePCA9685').checked;
            const channel = document.getElementById('channel').value;
            const pin = document.getElementById('pin').value;
            const minPulse = document.getElementById('minPulse').value;
            const maxPulse = document.getElementById('maxPulse').value;

            axios.post('/parts/servo/test', {
                headers: {
                    'Content-Type': 'application/json',
                },
                data: {
                    angle: parseInt(angle),
                    usePCA9685: usePCA9685,
                    channel: parseInt(channel),
                    pin: parseInt(pin),
                    minPulse: parseInt(minPulse),
                    maxPulse: parseInt(maxPulse)
                }
            })
            .then(response => {
                const resultDiv = document.getElementById('testResult');
                if (response.data.success) {
                    resultDiv.textContent = 'Servo test successful: ' + response.data.message;
                    resultDiv.className = 'success';
                } else {
                    resultDiv.textContent = 'Servo test failed: ' + response.data.message;
                    resultDiv.className = 'error';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('testResult');
                resultDiv.textContent = 'An error occurred while testing the servo: ' + error.message;
                resultDiv.className = 'error';
            });
        }

        function stopServo() {
            const usePCA9685 = document.getElementById('usePCA9685').checked;
            const channel = document.getElementById('channel').value;
            const pin = document.getElementById('pin').value;

            axios.post('/parts/servo/stop', {
                headers: {
                    'Content-Type': 'application/json',
                },
                data: {
                    usePCA9685: usePCA9685,
                    channel: parseInt(channel),
                    pin: parseInt(pin)
                }
            })
            .then(response => {
                const resultDiv = document.getElementById('testResult');
                if (response.data.success) {
                    resultDiv.textContent = 'Servo stopped successfully: ' + response.data.message;
                    resultDiv.className = 'success';
                } else {
                    resultDiv.textContent = 'Failed to stop servo: ' + response.data.message;
                    resultDiv.className = 'error';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.getElementById('testResult');
                resultDiv.textContent = 'An error occurred while stopping the servo: ' + error.message;
                resultDiv.className = 'error';
            });
        }
    </script>
</body>
</html>
