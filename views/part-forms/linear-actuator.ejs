<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Creepster&display=swap">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <header>
        <h1 class="landing-title"><%= title %></h1>
    </header>

    <main>
        <form id="actuatorForm" action="<%= action %>" method="POST">
            <input type="hidden" name="type" value="linear-actuator">
            <% if (part.id) { %>
                <input type="hidden" name="id" value="<%= part.id %>">
            <% } %>
            
            <div class="form-group">
                <label for="name">Part Name:</label>
                <input type="text" id="name" name="name" value="<%= part.name || '' %>" required>
            </div>

            <div class="form-group">
                <label for="characterId">Character:</label>
                <select id="characterId" name="characterId" required>
                    <% characters.forEach(function(character) { %>
                        <option value="<%= character.id %>" <%= (part.characterId === character.id) ? 'selected' : '' %>>
                            <%= character.char_name %>
                        </option>
                    <% }); %>
                </select>
            </div>

            <div class="form-group">
                <label for="directionPin">Direction GPIO Pin:</label>
                <input type="number" id="directionPin" name="directionPin" value="<%= part.directionPin || 18 %>" required>
            </div>

            <div class="form-group">
                <label for="pwmPin">PWM Pin:</label>
                <input type="number" id="pwmPin" name="pwmPin" value="<%= part.pwmPin || 13 %>" required>
            </div>

            <div class="form-group">
                <label for="maxExtension">Max Extension (ms):</label>
                <input type="number" id="maxExtension" name="maxExtension" value="<%= part.maxExtension || 10000 %>" required>
            </div>

            <div class="form-group">
                <label for="maxRetraction">Max Retraction (ms):</label>
                <input type="number" id="maxRetraction" name="maxRetraction" value="<%= part.maxRetraction || 10000 %>" required>
            </div>

            <div class="button-group">
                <button type="submit" class="button primary-btn">Save Part</button>
            </div>
        </form>

        <div class="config-section">
            <h2>Testfire Linear Actuator</h2>
            <div class="form-group">
                <label for="testDirection">Direction:</label>
                <select id="testDirection">
                    <option value="forward">Forward</option>
                    <option value="backward">Backward</option>
                </select>
            </div>

            <div class="form-group">
                <label for="testSpeed">Speed:</label>
                <input type="range" id="testSpeed" min="0" max="100" value="50">
                <span id="speedValue">50</span>
            </div>

            <div class="form-group">
                <label for="testDuration">Duration (ms):</label>
                <input type="range" id="testDuration" min="100" max="5000" value="1000" step="100">
                <span id="durationValue">1000</span>
            </div>

            <div class="button-group">
                <button onclick="executeTestfire()" class="button">Testfire</button>
            </div>

            <div class="loading-overlay" id="loadingIndicator">
                <div class="spinner"></div>
                <div class="loading-text">Testing linear actuator...</div>
            </div>

            <div id="testfireResult"></div>
        </div>

        <div class="button-group">
            <a href="/parts?characterId=<%= character.id %>" class="button secondary-btn">Back to Parts</a>
        </div>
    </main>

    <script>
        document.getElementById('testSpeed').addEventListener('input', function() {
            document.getElementById('speedValue').textContent = this.value;
        });
        document.getElementById('testDuration').addEventListener('input', function() {
            document.getElementById('durationValue').textContent = this.value;
        });

        function executeTestfire() {
            const direction = document.getElementById('testDirection').value;
            const speed = document.getElementById('testSpeed').value;
            const duration = document.getElementById('testDuration').value;
            const directionPin = document.getElementById('directionPin').value;
            const pwmPin = document.getElementById('pwmPin').value;
            const maxExtension = document.getElementById('maxExtension').value;
            const maxRetraction = document.getElementById('maxRetraction').value;
            const loadingIndicator = document.getElementById('loadingIndicator');
            const testfireResult = document.getElementById('testfireResult');

            loadingIndicator.classList.add('active');
            testfireResult.innerHTML = '';
            testfireResult.className = '';

            const partId = '<%= part.id %>';
            const url = partId ? `/parts/linear-actuator/${partId}/testfire` : "/parts/linear-actuator/testfire";
            const params = new URLSearchParams({
                direction,
                speed,
                duration,
                directionPin,
                pwmPin,
                maxExtension,
                maxRetraction
            });

            fetch(`${url}?${params.toString()}`, {
                method: 'GET'
            })
            .then(response => response.json())
            .then(data => {
                loadingIndicator.classList.remove('active');
                if (data.success) {
                    testfireResult.innerHTML = `<p>${data.message}</p>`;
                } else {
                    testfireResult.innerHTML = `<p>${data.message}</p>`;
                    testfireResult.classList.add('error-message');
                }
            })
            .catch(error => {
                loadingIndicator.classList.remove('active');
                console.error('Error:', error);
                testfireResult.innerHTML = `<p>${error.message}</p>`;
                testfireResult.classList.add('error-message');
            });
        }
    </script>
</body>
</html>
