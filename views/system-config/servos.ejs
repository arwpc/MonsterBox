<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Servo Configuration</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .servo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .servo-card {
            border: 1px solid #00ff00;
            padding: 15px;
            background-color: #003300;
            border-radius: 5px;
        }
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }
        .form-group {
            margin-bottom: 10px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #00ff00;
        }
        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #00ff00;
            background-color: #002200;
            color: #00ff00;
            border-radius: 4px;
        }
        .form-group select[multiple] {
            height: 100px;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .edit-button, .delete-button {
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        .edit-button {
            background-color: #004400;
            color: #00ff00;
        }
        .delete-button {
            background-color: #440000;
            color: #ff0000;
        }
        #newServoForm {
            margin-top: 20px;
            padding: 20px;
            border: 1px solid #00ff00;
            border-radius: 5px;
            background-color: #002200;
        }
    </style>
</head>
<body>
    <h1>Servo Configuration</h1>
    
    <div class="servo-grid">
        <% servoConfigs.forEach(function(servo, index) { %>
            <div class="servo-card" 
                 id="servo-<%= index %>"
                 data-servo="<%= encodeURIComponent(JSON.stringify(servo)) %>"
                 data-index="<%= index %>">
                <h3><%= servo.name %></h3>
                <p><strong>Model:</strong> <%= servo.model %></p>
                <p><strong>Manufacturer:</strong> <%= servo.manufacturer %></p>
                <p><strong>Modes:</strong> <%= servo.mode.join(', ') %></p>
                <p><strong>Max Torque:</strong> <%= servo.max_torque_kg_cm %> kg/cm</p>
                <p><strong>Waterproof:</strong> <%= servo.waterproof ? 'Yes' : 'No' %></p>
                <p><strong>Gear Material:</strong> <%= servo.gear_material %></p>
                <p><strong>Pulse Width:</strong> <%= servo.min_pulse_width_us %>-<%= servo.max_pulse_width_us %>μs</p>
                <p><strong>Default Angle:</strong> <%= servo.default_angle_deg %>°</p>
                <p><strong>Rotation Range:</strong> <%= servo.rotation_range_deg %>°</p>
                <p><strong>Feedback:</strong> <%= servo.feedback ? 'Yes' : 'No' %></p>
                <p><strong>Control Types:</strong> <%= servo.control_type.join(', ') %></p>
                <p><strong>Notes:</strong> <%= servo.notes %></p>
                <div class="button-group">
                    <button class="edit-button" onclick="editServo(this)">Edit</button>
                    <button class="delete-button" onclick="deleteServo(this)">Delete</button>
                </div>
            </div>
        <% }); %>
    </div>

    <form id="newServoForm" action="/system-config/servos" method="POST">
        <h2 id="formTitle">Add New Servo Configuration</h2>
        <input type="hidden" id="editIndex" name="editIndex" value="">
        <div class="form-grid">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" required>
            </div>
            <div class="form-group">
                <label for="model">Model:</label>
                <input type="text" id="model" name="model" required>
            </div>
            <div class="form-group">
                <label for="manufacturer">Manufacturer:</label>
                <input type="text" id="manufacturer" name="manufacturer" required>
            </div>
            <div class="form-group">
                <label for="mode">Operating Modes:</label>
                <select id="mode" name="mode" multiple required>
                    <option value="Standard">Standard</option>
                    <option value="Continuous">Continuous</option>
                    <option value="Digital">Digital</option>
                    <option value="Feedback">Feedback</option>
                </select>
            </div>
            <div class="form-group">
                <label for="max_torque_kg_cm">Max Torque (kg/cm):</label>
                <input type="number" id="max_torque_kg_cm" name="max_torque_kg_cm" step="0.1" required>
            </div>
            <div class="form-group">
                <label for="waterproof">Waterproof:</label>
                <select id="waterproof" name="waterproof" required>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
            <div class="form-group">
                <label for="gear_material">Gear Material:</label>
                <input type="text" id="gear_material" name="gear_material" required>
            </div>
            <div class="form-group">
                <label for="min_pulse_width_us">Min Pulse Width (μs):</label>
                <input type="number" id="min_pulse_width_us" name="min_pulse_width_us" required>
            </div>
            <div class="form-group">
                <label for="max_pulse_width_us">Max Pulse Width (μs):</label>
                <input type="number" id="max_pulse_width_us" name="max_pulse_width_us" required>
            </div>
            <div class="form-group">
                <label for="neutral_pulse_us">Neutral Pulse Width (μs):</label>
                <input type="number" id="neutral_pulse_us" name="neutral_pulse_us" required>
            </div>
            <div class="form-group">
                <label for="default_angle_deg">Default Angle (degrees):</label>
                <input type="number" id="default_angle_deg" name="default_angle_deg" required>
            </div>
            <div class="form-group">
                <label for="rotation_range_deg">Rotation Range (degrees):</label>
                <input type="number" id="rotation_range_deg" name="rotation_range_deg" required>
            </div>
            <div class="form-group">
                <label for="feedback">Position Feedback:</label>
                <select id="feedback" name="feedback" required>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
            <div class="form-group">
                <label for="control_type">Control Types:</label>
                <select id="control_type" name="control_type" multiple required>
                    <option value="PWM">PWM</option>
                    <option value="Digital">Digital</option>
                    <option value="Analog">Analog</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <label for="notes">Notes:</label>
            <textarea id="notes" name="notes" rows="3"></textarea>
        </div>
        <button type="submit" class="button" id="submitButton">Add Servo Configuration</button>
        <button type="button" class="button" onclick="resetForm()" style="display: none;" id="cancelButton">Cancel</button>
    </form>

    <a href="/system-config" class="button">Back to System Config</a>

    <script>
        function editServo(button) {
            const card = button.closest('.servo-card');
            const servo = JSON.parse(decodeURIComponent(card.dataset.servo));
            const index = card.dataset.index;
            const form = document.getElementById('newServoForm');
            
            // Update form title and button text
            document.getElementById('formTitle').textContent = 'Edit Servo Configuration';
            document.getElementById('submitButton').textContent = 'Update Servo Configuration';
            document.getElementById('cancelButton').style.display = 'inline-block';
            document.getElementById('editIndex').value = index;
            
            // Populate form fields
            form.name.value = servo.name;
            form.model.value = servo.model;
            form.manufacturer.value = servo.manufacturer;
            form.max_torque_kg_cm.value = servo.max_torque_kg_cm;
            form.waterproof.value = servo.waterproof.toString();
            form.gear_material.value = servo.gear_material;
            form.min_pulse_width_us.value = servo.min_pulse_width_us;
            form.max_pulse_width_us.value = servo.max_pulse_width_us;
            form.neutral_pulse_us.value = servo.neutral_pulse_us;
            form.default_angle_deg.value = servo.default_angle_deg;
            form.rotation_range_deg.value = servo.rotation_range_deg;
            form.feedback.value = servo.feedback.toString();
            form.notes.value = servo.notes || '';

            // Handle multiple select fields
            Array.from(form.mode.options).forEach(option => {
                option.selected = servo.mode.includes(option.value);
            });
            Array.from(form.control_type.options).forEach(option => {
                option.selected = servo.control_type.includes(option.value);
            });

            // Change form action and method
            form.action = `/system-config/servos/${index}`;
            form.method = 'POST';
            
            // Scroll to form
            form.scrollIntoView({ behavior: 'smooth' });
        }

        function resetForm() {
            const form = document.getElementById('newServoForm');
            form.reset();
            form.action = '/system-config/servos';
            form.method = 'POST';
            document.getElementById('formTitle').textContent = 'Add New Servo Configuration';
            document.getElementById('submitButton').textContent = 'Add Servo Configuration';
            document.getElementById('cancelButton').style.display = 'none';
            document.getElementById('editIndex').value = '';
        }

        function deleteServo(button) {
            const card = button.closest('.servo-card');
            const index = card.dataset.index;
            
            if (confirm('Are you sure you want to delete this servo configuration?')) {
                fetch(`/system-config/servos/${index}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete servo configuration');
                    }
                })
                .catch(error => {
                    console.error('Error deleting servo:', error);
                    alert('Error deleting servo configuration');
                });
            }
        }

        // Handle form submission
        document.getElementById('newServoForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const editIndex = formData.get('editIndex');
            const data = {};
            
            formData.forEach((value, key) => {
                if (key === 'mode' || key === 'control_type') {
                    data[key] = Array.from(this.elements[key].selectedOptions).map(opt => opt.value);
                } else {
                    data[key] = value;
                }
            });

            try {
                const url = editIndex !== '' ? `/system-config/servos/${editIndex}` : '/system-config/servos';
                const method = editIndex !== '' ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Failed to save servo configuration');
                }
            } catch (error) {
                console.error('Error saving servo:', error);
                alert('Error saving servo configuration');
            }
        });
    </script>
</body>
</html>
