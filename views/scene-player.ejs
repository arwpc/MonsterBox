<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #log-box {
            border: 1px solid #00ff00;
            padding: 10px;
            height: 300px;
            overflow-y: scroll;
            background-color: #001100;
            color: #00ff00;
            font-family: 'Courier New', monospace;
            margin-bottom: 20px;
        }
        #controls {
            margin-top: 20px;
        }
        #controls button {
            margin-right: 10px;
        }
        .step {
            margin-bottom: 10px;
            padding: 5px;
            border: 1px solid #00ff00;
        }
        .current-step {
            background-color: #003300;
        }
        .error-message {
            color: #ff0000;
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>
    <h2><%= scene.scene_name %></h2>
    
    <div id="scene-overview">
        <h3>Scene Steps:</h3>
        <% if (scene && scene.steps && scene.steps.length > 0) { %>
            <% scene.steps.forEach((step, index) => { %>
                <div class="step" id="step-<%= index %>">
                    <strong>Step <%= index + 1 %>:</strong> <%= step.name %> (<%= step.type %>)
                </div>
            <% }); %>
        <% } else { %>
            <p>No steps found for this scene.</p>
        <% } %>
    </div>
    
    <div id="log-box"></div>
    
    <div id="controls">
        <button id="backward-btn">Backward</button>
        <button id="run-btn">Run</button>
        <button id="forward-btn">Forward</button>
        <button id="stop-btn" disabled>Stop All Steps</button>
    </div>
    
    <a href="/scenes?characterId=<%= characterId %>" class="button">Back to Scenes</a>

    <script>
        const sceneData = <%- JSON.stringify(scene) %>;
        const characterId = "<%= characterId %>";
        let currentStep = 0;
        let eventSource = null;

        function logToServer(message) {
            console.log("Logging to server:", message);
            $.post('/log', { message: message })
                .fail(function(xhr, status, error) {
                    console.error('Failed to log to server:', error);
                });
        }

        function logMessage(message, isError = false) {
            const logBox = $("#log-box");
            const className = isError ? 'error-message' : '';
            logBox.append(`<p class="${className}">${new Date().toLocaleTimeString()} - ${message}</p>`);
            logBox.scrollTop(logBox[0].scrollHeight);
            console.log(message);
            logToServer(message);
        }

        function updateCurrentStep(index) {
            $(".step").removeClass("current-step");
            $(`#step-${index}`).addClass("current-step");
        }

        $(document).ready(function() {
            logToServer('Document ready');
            console.log('Document ready');

            $("#backward-btn").on("click", function() {
                console.log("Backward button clicked");
                logMessage("Backward button clicked");
                if (currentStep > 0) {
                    currentStep--;
                    updateCurrentStep(currentStep);
                }
            });

            $("#forward-btn").on("click", function() {
                console.log("Forward button clicked");
                logMessage("Forward button clicked");
                if (currentStep < sceneData.steps.length - 1) {
                    currentStep++;
                    updateCurrentStep(currentStep);
                }
            });

            $("#run-btn").on("click", function() {
                console.log("Run button clicked");
                logMessage("Run button clicked");
                runScene();
            });

            $("#stop-btn").on("click", function() {
                console.log("Stop button clicked");
                logMessage("Stop button clicked");
                stopScene();
            });

            // Initial scene overview
            logMessage(`Scene Overview: "${sceneData.scene_name}"`);
            logMessage(`Total steps: ${sceneData.steps.length}`);
            sceneData.steps.forEach((step, index) => {
                logMessage(`Step ${index + 1}: ${step.name} (Type: ${step.type}${step.concurrent ? ', Concurrent' : ''})`);
            });

            console.log("Scene player initialization complete");
            logToServer("Scene player initialization complete");
        });

        function runScene() {
            if (eventSource) {
                eventSource.close();
            }

            $("#run-btn").prop('disabled', true);
            $("#stop-btn").prop('disabled', false);

            eventSource = new EventSource(`/scenes/${sceneData.id}/play?characterId=${characterId}&startStep=${currentStep}`);

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);
                handleSceneExecutionUpdate(data);
            };

            eventSource.onerror = function(error) {
                console.error('EventSource error:', error);
                logMessage(`EventSource error: ${error.message || 'Connection lost'}`, true);
                if (eventSource.readyState === EventSource.CLOSED) {
                    resetButtons();
                }
            };

            logMessage("Scene execution started");
        }

        function stopScene() {
            if (eventSource) {
                eventSource.close();
            }

            $.post(`/scenes/${sceneData.id}/stop?characterId=${characterId}`)
                .done(function(data) {
                    logMessage("Scene execution stopped");
                })
                .fail(function(xhr, status, error) {
                    logMessage(`Error stopping scene: ${error}`, true);
                })
                .always(function() {
                    resetButtons();
                });
        }

        function handleSceneExecutionUpdate(data) {
            if (data.error) {
                logMessage(`Error: ${data.error}`, true);
            } else if (data.message) {
                logMessage(data.message);
            }

            if (data.currentStep !== undefined) {
                currentStep = data.currentStep;
                updateCurrentStep(currentStep);
            }

            if (data.message === 'Scene execution completed') {
                resetButtons();
            }
        }

        function resetButtons() {
            $("#run-btn").prop('disabled', false);
            $("#stop-btn").prop('disabled', true);
        }
    </script>
</body>
</html>