<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Config</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>System Config</h1>

    <div class="config-section">
        <h2>Quick Links</h2>
        <div class="button-group">
            <a href="/system-config/servos" class="button primary-btn">Servo Configurations</a>
            <a href="/logs" class="button primary-btn">View Logs</a>
            <button id="rebootBtn" class="button primary-btn">Reboot System</button>
            <a href="/" class="button primary-btn">Back to Main Menu</a>
        </div>
        <!-- Reboot confirmation modal -->
        <div id="rebootModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); z-index: 1000; display: flex; align-items: center; justify-content: center;">
            <div style="background: #000; border: 2px solid #00ff00; padding: 20px; border-radius: 5px; width: 300px; text-align: center;">
                <h3 style="color: #00ff00;">Confirm System Reboot</h3>
                <p style="color: #00ff00;">Are you sure you want to reboot the system? This will disconnect all users and stop all running processes.</p>
                <div style="margin-top: 20px;">
                    <button id="confirmRebootBtn" class="button primary-btn">Yes, Reboot Now</button>
                    <button id="cancelRebootBtn" class="button primary-btn" style="background-color: #550000; margin-left: 10px;">Cancel</button>
                </div>
            </div>
        </div>
        <div id="rebootResult" style="margin-top: 10px; color: #00ff00;"></div>
    </div>

    <div class="config-section">
        <h2>System Information</h2>
        <ul class="info-list">
            <li><strong>Platform:</strong> <%= systemInfo.platform %></li>
            <li><strong>Architecture:</strong> <%= systemInfo.arch %></li>
            <li><strong>Hostname:</strong> <%= systemInfo.hostname %></li>
            <li><strong>Total Memory:</strong> <%= systemInfo.totalMem %></li>
            <li><strong>Free Memory:</strong> <%= systemInfo.freeMem %></li>
            <li><strong>CPUs:</strong> <%= systemInfo.cpus %></li>
            <li><strong>Uptime:</strong> <%= systemInfo.uptime %></li>
        </ul>
    </div>

    <div class="config-section">
        <h2>Network Information</h2>
        <ul class="info-list">
            <li><strong>IP Address:</strong> <%= ipAddress %></li>
            <li><strong>Wi-Fi Signal Strength:</strong> <%= wifiSignal %></li>
        </ul>
    </div>

    <div class="config-section">
        <h2>Power Information</h2>
        <ul class="info-list">
            <li><strong>Current Power:</strong> <%= power %></li>
        </ul>
    </div>

    <div class="config-section">
        <h2>Drive Space Information</h2>
        <% if (driveInfo.length > 0 && !driveInfo[0].error) { %>
            <div class="table-container">
                <table>
                    <tr>
                        <th>Filesystem</th>
                        <th>Size</th>
                        <th>Used</th>
                        <th>Available</th>
                        <th>Mount Point</th>
                    </tr>
                    <% driveInfo.forEach(function(drive) { %>
                        <tr>
                            <td><%= drive.filesystem %></td>
                            <td><%= drive.size %></td>
                            <td><%= drive.used %></td>
                            <td><%= drive.available %></td>
                            <td><%= drive.mountpoint %></td>
                        </tr>
                    <% }); %>
                </table>
            </div>
        <% } else { %>
            <p class="error-message">Unable to retrieve drive information.</p>
        <% } %>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // Reboot button functionality
        document.addEventListener('DOMContentLoaded', function() {
            const rebootBtn = document.getElementById('rebootBtn');
            const rebootModal = document.getElementById('rebootModal');
            const confirmRebootBtn = document.getElementById('confirmRebootBtn');
            const cancelRebootBtn = document.getElementById('cancelRebootBtn');
            const rebootResult = document.getElementById('rebootResult');

            if (rebootBtn) {
                rebootBtn.addEventListener('click', function() {
                    // Show confirmation modal
                    rebootModal.style.display = 'flex';
                });
            }

            if (cancelRebootBtn) {
                cancelRebootBtn.addEventListener('click', function() {
                    // Hide modal on cancel
                    rebootModal.style.display = 'none';
                });
            }

            if (confirmRebootBtn) {
                confirmRebootBtn.addEventListener('click', async function() {
                    try {
                        // Disable button to prevent multiple clicks
                        confirmRebootBtn.disabled = true;
                        confirmRebootBtn.textContent = 'Rebooting...';
                        
                        // Send reboot request
                        const response = await axios.post('/system-config/reboot');
                        
                        // Hide modal
                        rebootModal.style.display = 'none';
                        
                        // Show message to user
                        rebootResult.textContent = response.data.message || 'System is rebooting now...';
                        
                        // Add countdown
                        let countdown = 5;
                        const interval = setInterval(function() {
                            rebootResult.textContent = `System is rebooting now... Disconnecting in ${countdown} seconds.`;
                            countdown--;
                            
                            if (countdown < 0) {
                                clearInterval(interval);
                                rebootResult.textContent = 'Disconnected. Please wait for system to restart.';
                            }
                        }, 1000);
                        
                    } catch (error) {
                        // Enable button again
                        confirmRebootBtn.disabled = false;
                        confirmRebootBtn.textContent = 'Yes, Reboot Now';
                        
                        // Hide modal
                        rebootModal.style.display = 'none';
                        
                        // Show error message
                        rebootResult.textContent = 'Error: Failed to reboot system. ' + 
                            (error.response?.data?.error || error.message || 'Unknown error');
                        rebootResult.style.color = '#ff0000';
                    }
                });
            }
        });
    </script>
</body>
</html>
