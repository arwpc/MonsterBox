<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Active Mode</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/jsmpeg@1.0.3/jsmpeg.min.js"></script>
</head>
<body>
    <h1>Active Mode</h1>
    
    <div class="character-section">
        <img id="characterImage" class="character-image" src="/images/placeholder.jpg" alt="Character Image">
        <div class="character-info">
            <label for="characterSelect">Character:</label>
            <select id="characterSelect">
                <option value="">Select a character</option>
                <% characters.forEach(function(character) { %>
                    <option value="<%= character.id %>"><%= character.char_name %></option>
                <% }); %>
            </select>
            <div id="characterInfo"></div>
        </div>
    </div>

    <div class="scene-container">
        <div class="scene-box">
            <h2>Available Scenes</h2>
            <select id="availableScenes" multiple></select>
        </div>
        <div class="scene-controls">
            <button id="addScenes">&gt;&gt;</button>
            <button id="removeScenes">&lt;&lt;</button>
        </div>
        <div class="scene-box">
            <h2>ACTIVE Scenes</h2>
            <ul id="activatedScenes"></ul>
        </div>
    </div>

    <div class="monitoring-section">
        <h2>Monitoring: <span id="armStatus">DISARMED</span></h2>
        <button id="armButton">Arm</button>
        <button id="disarmButton" disabled>Disarm</button>
        <button id="stopAllSteps">Stop All Steps</button>
    </div>

    <div id="armedModeOutput" class="output-section">
        <h3>Armed Mode Output</h3>
    </div>

    <div class="monitoring-section">
        <h2>Camera Stream</h2>
        <canvas id="cameraStream"></canvas>
        <div class="camera-controls">
            <button id="toggleNightMode">Toggle Night Mode</button>
            <label>
                <input type="checkbox" id="audioToggle" checked> Enable Audio
            </label>
            <label>
                Mic Volume: <input type="range" id="micVolume" min="0" max="2" step="0.1" value="1">
            </label>
            <select id="resolution">
                <option value="320x240">320x240</option>
                <option value="640x480" selected>640x480</option>
                <option value="800x600">800x600</option>
                <option value="1280x720">1280x720</option>
            </select>
            <select id="framerate">
                <option value="15">15 fps</option>
                <option value="30" selected>30 fps</option>
                <option value="60">60 fps</option>
            </select>
        </div>
    </div>

    <a href="/" class="button">Back to Main Menu</a>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script src="/scripts/active-mode.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const canvas = document.getElementById('cameraStream');
            const toggleNightModeBtn = document.getElementById('toggleNightMode');
            const audioToggle = document.getElementById('audioToggle');
            const micVolumeSlider = document.getElementById('micVolume');
            const resolutionSelect = document.getElementById('resolution');
            const framerateSelect = document.getElementById('framerate');

            const player = new JSMpeg.Player(`ws://${window.location.hostname}:${window.location.port}`, {
                canvas: canvas,
                audio: audioToggle.checked,
                videoBufferSize: 512 * 1024,
                audioBufferSize: 128 * 1024,
            });

            toggleNightModeBtn.addEventListener('click', () => {
                fetch('/camera/toggle-night-mode', { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Night mode:', data.nightMode ? 'ON' : 'OFF');
                    })
                    .catch(error => console.error('Error:', error));
            });

            audioToggle.addEventListener('change', (e) => {
                player.audioEnabled = e.target.checked;
            });

            micVolumeSlider.addEventListener('input', (e) => {
                const volume = parseFloat(e.target.value);
                fetch('/camera/set-mic-volume', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ volume: volume }),
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Mic volume set to:', data.volume);
                })
                .catch(error => console.error('Error:', error));
            });

            resolutionSelect.addEventListener('change', (e) => {
                fetch('/camera/set-resolution', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ resolution: e.target.value }),
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Resolution set to:', data.resolution);
                    player.destroy();
                    player = new JSMpeg.Player(`ws://${window.location.hostname}:${window.location.port}`, {
                        canvas: canvas,
                        audio: audioToggle.checked,
                        videoBufferSize: 512 * 1024,
                        audioBufferSize: 128 * 1024,
                    });
                })
                .catch(error => console.error('Error:', error));
            });

            framerateSelect.addEventListener('change', (e) => {
                fetch('/camera/set-framerate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ framerate: e.target.value }),
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Framerate set to:', data.framerate);
                    player.destroy();
                    player = new JSMpeg.Player(`ws://${window.location.hostname}:${window.location.port}`, {
                        canvas: canvas,
                        audio: audioToggle.checked,
                        videoBufferSize: 512 * 1024,
                        audioBufferSize: 128 * 1024,
                    });
                })
                .catch(error => console.error('Error:', error));
            });
        });
    </script>
</body>
</html>