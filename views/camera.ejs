<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <style>
        /* Previous styles remain unchanged */
        body {
            background-color: black;
            color: #00ff00;
            font-family: monospace;
            margin: 0;
            padding: 20px;
        }
        .camera-container {
            display: flex;
            gap: 20px;
        }
        .camera-view {
            flex: 1;
            border: 2px solid #00ff00;
            padding: 10px;
            position: relative;
            min-height: 240px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .camera-view img {
            max-width: 100%;
            height: auto;
        }
        .controls {
            width: 300px;
            border: 2px solid #00ff00;
            padding: 10px;
        }
        h2 {
            color: #00ff00;
            margin-top: 0;
        }
        select, button {
            width: 100%;
            background-color: black;
            color: #00ff00;
            border: 1px solid #00ff00;
            padding: 5px;
            margin: 5px 0;
            cursor: pointer;
        }
        button:hover {
            background-color: #003300;
        }
        button.active {
            background-color: #004400;
            border-color: #00ff00;
            box-shadow: 0 0 10px #00ff00;
        }
        .status {
            color: #00ff00;
            margin: 10px 0;
            padding: 5px;
            border: 1px solid #00ff00;
        }
        .error {
            color: #ff0000;
            border-color: #ff0000;
        }
        .connected {
            color: #00ff00;
        }
        .disconnected {
            color: #ff0000;
        }
        .status-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        .status-dot.connected {
            background-color: #00ff00;
        }
        .status-dot.disconnected {
            background-color: #ff0000;
        }
        .section {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #00ff00;
        }
        .section h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }
        #statusMessage {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            padding: 10px;
            border: 1px solid #00ff00;
            color: #00ff00;
            text-align: center;
            z-index: 100;
            display: none;
        }
        .loading {
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        #motionData, #headTrackData {
            margin-top: 10px;
            padding: 5px;
            border: 1px solid #00ff00;
            min-height: 20px;
            font-family: monospace;
            position: relative;
            overflow: hidden;
        }
        .active {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { border-color: #00ff00; }
            50% { border-color: #004400; }
            100% { border-color: #00ff00; }
        }
        .coordinates {
            color: #00ff00;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="camera-container">
        <div class="camera-view">
            <img id="cameraStream" src="/images/no-stream.jpg" alt="Camera Stream">
            <div id="statusMessage"></div>
        </div>
        <div class="controls">
            <div class="section">
                <h3>Camera Selection</h3>
                <select id="cameraSelect">
                    <option value="">Select Camera...</option>
                </select>
                <button onclick="applyCameraSelection()">Apply Camera Selection</button>
                <div class="status">
                    <span class="status-dot disconnected"></span>
                    <span id="connectionStatus">Disconnected</span>
                </div>
            </div>

            <div class="section">
                <h3>Camera Settings</h3>
                <select id="resolutionSelect">
                    <option value="1280x720">1280x720 (HD, Default)</option>
                    <option value="1920x1080">1920x1080 (Full HD)</option>
                    <option value="1280x1024">1280x1024</option>
                    <option value="1280x960">1280x960</option>
                    <option value="1024x768">1024x768</option>
                    <option value="848x480">848x480</option>
                    <option value="800x600">800x600</option>
                    <option value="640x480">640x480</option>
                    <option value="320x240">320x240</option>
                </select>
                <select id="fpsSelect">
                    <option value="30">30 FPS (Default)</option>
                    <option value="25">25 FPS</option>
                    <option value="20">20 FPS</option>
                    <option value="15">15 FPS</option>
                    <option value="10">10 FPS</option>
                    <option value="5">5 FPS</option>
                </select>
                <button onclick="applySettings()">Apply Settings</button>
            </div>

            <div class="section">
                <h3>Motion Detection</h3>
                <button id="motionButton" onclick="toggleMotionDetection()">Start Motion Detection</button>
                <div id="motionData">No motion data</div>
            </div>

            <div class="section">
                <h3>Head Tracking</h3>
                <select id="panServoSelect">
                    <option value="">Select Pan Servo...</option>
                </select>
                <select id="tiltServoSelect">
                    <option value="">Select Tilt Servo...</option>
                </select>
                <button id="headTrackButton" onclick="toggleHeadTracking()">Start Head Tracking</button>
                <div id="headTrackData">No tracking data</div>
            </div>
        </div>
    </div>

    <script>
        let streamUrl = null;
        let motionDetectionActive = false;
        let headTrackingActive = false;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 3;
        const reconnectDelay = 5000;
        let motionDetectionController = null;
        let headTrackingController = null;

        function showStatus(message, isLoading = false) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            if (isLoading) {
                statusEl.classList.add('loading');
            } else {
                statusEl.classList.remove('loading');
            }
        }

        function hideStatus() {
            const statusEl = document.getElementById('statusMessage');
            statusEl.style.display = 'none';
        }

        function updateConnectionStatus(connected) {
            const dot = document.querySelector('.status-dot');
            const status = document.getElementById('connectionStatus');
            if (connected) {
                dot.classList.remove('disconnected');
                dot.classList.add('connected');
                status.textContent = 'Connected';
                status.className = 'connected';
            } else {
                dot.classList.remove('connected');
                dot.classList.add('disconnected');
                status.textContent = 'Disconnected';
                status.className = 'disconnected';
            }
        }

        async function loadCameras() {
            try {
                showStatus('Loading cameras...', true);
                const response = await fetch('/camera/list');
                const cameras = await response.json();
                const select = document.getElementById('cameraSelect');
                select.innerHTML = '<option value="">Select Camera...</option>';
                cameras.forEach(camera => {
                    camera.devices.forEach(device => {
                        const option = document.createElement('option');
                        option.value = device.id;
                        option.textContent = `${camera.name} (${device.path})`;
                        select.appendChild(option);
                    });
                });
                hideStatus();
            } catch (error) {
                showStatus('Error loading cameras');
                console.error('Error loading cameras:', error);
            }
        }

        async function loadServos() {
            try {
                const response = await fetch('/parts');
                const data = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(data, 'text/html');
                const servos = Array.from(doc.querySelectorAll('[data-type="servo"]')).map(el => ({
                    id: el.dataset.id,
                    name: el.dataset.name
                }));

                const panSelect = document.getElementById('panServoSelect');
                const tiltSelect = document.getElementById('tiltServoSelect');
                
                panSelect.innerHTML = '<option value="">Select Pan Servo...</option>';
                tiltSelect.innerHTML = '<option value="">Select Tilt Servo...</option>';
                
                servos.forEach(servo => {
                    const panOption = document.createElement('option');
                    panOption.value = servo.id;
                    panOption.textContent = servo.name;
                    panSelect.appendChild(panOption);

                    const tiltOption = document.createElement('option');
                    tiltOption.value = servo.id;
                    tiltOption.textContent = servo.name;
                    tiltSelect.appendChild(tiltOption);
                });
            } catch (error) {
                console.error('Error loading servos:', error);
            }
        }

        async function applyCameraSelection() {
            const select = document.getElementById('cameraSelect');
            const cameraId = parseInt(select.value);
            if (!cameraId && cameraId !== 0) {
                showStatus('Please select a camera');
                return;
            }

            try {
                showStatus('Initializing camera...', true);
                const response = await fetch('/camera/select', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cameraId })
                });

                if (!response.ok) {
                    throw new Error('Failed to select camera');
                }

                showStatus('Camera initialized, starting stream...', true);
                startStream();
            } catch (error) {
                showStatus('Error initializing camera');
                console.error('Error selecting camera:', error);
            }
        }

        function startStream() {
            const img = document.getElementById('cameraStream');
            const [width, height] = document.getElementById('resolutionSelect').value.split('x');
            const fps = document.getElementById('fpsSelect').value;
            
            streamUrl = `/camera/stream?width=${width}&height=${height}&fps=${fps}&t=${Date.now()}`;
            img.src = streamUrl;
            showStatus('Starting stream...', true);

            img.onload = () => {
                hideStatus();
                updateConnectionStatus(true);
                reconnectAttempts = 0;
            };

            img.onerror = () => {
                if (reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    showStatus(`Stream error, attempting to reconnect (${reconnectAttempts}/${maxReconnectAttempts})...`, true);
                    setTimeout(() => {
                        img.src = streamUrl + '&retry=' + reconnectAttempts;
                    }, reconnectDelay);
                } else {
                    showStatus('Failed to connect to stream');
                    updateConnectionStatus(false);
                    img.src = '/images/no-stream.jpg';
                }
            };
        }

        async function applySettings() {
            const [width, height] = document.getElementById('resolutionSelect').value.split('x');
            const fps = document.getElementById('fpsSelect').value;
            try {
                showStatus('Applying camera settings...', true);
                const response = await fetch('/camera/control', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        command: 'settings',
                        params: {
                            width: parseInt(width),
                            height: parseInt(height),
                            fps: parseInt(fps)
                        }
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to apply settings');
                }

                showStatus('Settings applied, restarting stream...', true);
                startStream();
            } catch (error) {
                showStatus('Error applying settings');
                console.error('Error applying settings:', error);
            }
        }

        async function toggleMotionDetection() {
            const button = document.getElementById('motionButton');
            const motionData = document.getElementById('motionData');
            
            if (!motionDetectionActive) {
                try {
                    showStatus('Starting motion detection...', true);
                    button.textContent = 'Stop Motion Detection';
                    button.classList.add('active');
                    motionData.classList.add('active');
                    
                    // Create AbortController for the fetch
                    motionDetectionController = new AbortController();
                    
                    // Start continuous motion detection
                    motionDetectionActive = true;
                    const response = await fetch('/camera/control', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ command: 'motion' }),
                        signal: motionDetectionController.signal
                    });

                    if (!response.ok) {
                        throw new Error('Motion detection failed');
                    }

                    // Create reader for streaming response
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    let buffer = '';

                    while (motionDetectionActive) {
                        const { value, done } = await reader.read();
                        if (done) break;

                        // Append new data to buffer
                        buffer += decoder.decode(value, { stream: true });

                        // Process complete JSON objects
                        let newlineIndex;
                        while ((newlineIndex = buffer.indexOf('\n')) !== -1) {
                            const jsonStr = buffer.slice(0, newlineIndex);
                            buffer = buffer.slice(newlineIndex + 1);

                            try {
                                const result = JSON.parse(jsonStr);
                                if (result.success) {
                                    if (result.motion_detected) {
                                        const coords = `(${result.center_x.toFixed(1)}, ${result.center_y.toFixed(1)})`;
                                        motionData.innerHTML = 
                                            `Motion detected at <span class="coordinates">${coords}</span>`;
                                    } else {
                                        motionData.textContent = 'No motion detected';
                                    }
                                    document.getElementById('cameraStream').src = `data:image/jpeg;base64,${result.frame}`;
                                    hideStatus();
                                }
                            } catch (e) {
                                console.error('Error parsing motion data:', e);
                            }
                        }
                    }
                    
                } catch (error) {
                    if (error.name === 'AbortError') {
                        console.log('Motion detection stopped');
                    } else {
                        showStatus('Error in motion detection');
                        console.error('Motion detection error:', error);
                        motionDetectionActive = false;
                        button.textContent = 'Start Motion Detection';
                        button.classList.remove('active');
                        motionData.classList.remove('active');
                    }
                }
            } else {
                motionDetectionActive = false;
                if (motionDetectionController) {
                    motionDetectionController.abort();
                    motionDetectionController = null;
                }
                button.textContent = 'Start Motion Detection';
                button.classList.remove('active');
                motionData.classList.remove('active');
                motionData.textContent = 'No motion data';
                startStream();
            }
        }

        async function toggleHeadTracking() {
            const button = document.getElementById('headTrackButton');
            const headTrackData = document.getElementById('headTrackData');
            const panServoId = document.getElementById('panServoSelect').value;
            const tiltServoId = document.getElementById('tiltServoSelect').value;
            
            if (!headTrackingActive) {
                if (!panServoId || !tiltServoId) {
                    showStatus('Please select both pan and tilt servos');
                    return;
                }

                try {
                    showStatus('Starting head tracking...', true);
                    button.textContent = 'Stop Head Tracking';
                    button.classList.add('active');
                    headTrackData.classList.add('active');
                    
                    // Create AbortController for the fetch
                    headTrackingController = new AbortController();
                    
                    // Start head tracking
                    headTrackingActive = true;
                    const response = await fetch('/camera/head-track', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ panServoId, tiltServoId }),
                        signal: headTrackingController.signal
                    });

                    if (!response.ok) {
                        throw new Error('Head tracking failed');
                    }

                    // Create reader for streaming response
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    let buffer = '';

                    while (headTrackingActive) {
                        const { value, done } = await reader.read();
                        if (done) break;

                        // Append new data to buffer
                        buffer += decoder.decode(value, { stream: true });

                        // Process complete JSON objects
                        let newlineIndex;
                        while ((newlineIndex = buffer.indexOf('\n')) !== -1) {
                            const jsonStr = buffer.slice(0, newlineIndex);
                            buffer = buffer.slice(newlineIndex + 1);

                            try {
                                const result = JSON.parse(jsonStr);
                                if (result.success) {
                                    if (result.face_detected) {
                                        const pos = result.position;
                                        const angles = result.servo_angles;
                                        headTrackData.innerHTML = 
                                            `Face at <span class="coordinates">(${pos.x.toFixed(1)}, ${pos.y.toFixed(1)})</span><br>` +
                                            `Servos: Pan ${angles.x.toFixed(1)}°, Tilt ${angles.y.toFixed(1)}°`;
                                    } else {
                                        headTrackData.textContent = 'No face detected';
                                    }
                                    hideStatus();
                                }
                            } catch (e) {
                                console.error('Error parsing head tracking data:', e);
                            }
                        }
                    }
                    
                } catch (error) {
                    if (error.name === 'AbortError') {
                        console.log('Head tracking stopped');
                    } else {
                        showStatus('Error in head tracking');
                        console.error('Head tracking error:', error);
                        headTrackingActive = false;
                        button.textContent = 'Start Head Tracking';
                        button.classList.remove('active');
                        headTrackData.classList.remove('active');
                    }
                }
            } else {
                headTrackingActive = false;
                if (headTrackingController) {
                    headTrackingController.abort();
                    headTrackingController = null;
                }
                button.textContent = 'Start Head Tracking';
                button.classList.remove('active');
                headTrackData.classList.remove('active');
                headTrackData.textContent = 'No tracking data';
                startStream();
            }
        }

        // Load cameras and servos on page load
        document.addEventListener('DOMContentLoaded', () => {
            loadCameras();
            loadServos();
        });
    </script>
</body>
</html>
