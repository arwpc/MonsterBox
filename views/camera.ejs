<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <style>
        body {
            background-color: black;
            color: #00ff00;
            font-family: monospace;
            margin: 0;
            padding: 20px;
        }
        .camera-container {
            display: flex;
            gap: 20px;
        }
        .camera-view {
            flex: 1;
            border: 2px solid #00ff00;
            padding: 10px;
            position: relative;
            min-height: 240px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .camera-view img {
            max-width: 100%;
            height: auto;
        }
        .controls {
            width: 300px;
            border: 2px solid #00ff00;
            padding: 10px;
        }
        h2 {
            color: #00ff00;
            margin-top: 0;
        }
        select, button {
            width: 100%;
            background-color: black;
            color: #00ff00;
            border: 1px solid #00ff00;
            padding: 5px;
            margin: 5px 0;
            cursor: pointer;
        }
        button:hover {
            background-color: #003300;
        }
        .status {
            color: #00ff00;
            margin: 10px 0;
            padding: 5px;
            border: 1px solid #00ff00;
        }
        .error {
            color: #ff0000;
            border-color: #ff0000;
        }
        .connected {
            color: #00ff00;
        }
        .disconnected {
            color: #ff0000;
        }
        .status-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        .status-dot.connected {
            background-color: #00ff00;
        }
        .status-dot.disconnected {
            background-color: #ff0000;
        }
        .section {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #00ff00;
        }
        .section h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }
        #statusMessage {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            padding: 10px;
            border: 1px solid #00ff00;
            color: #00ff00;
            text-align: center;
            z-index: 100;
            display: none;
        }
        .loading {
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="camera-container">
        <div class="camera-view">
            <img id="cameraStream" src="/images/no-stream.jpg" alt="Camera Stream">
            <div id="statusMessage"></div>
        </div>
        <div class="controls">
            <div class="section">
                <h3>Camera Selection</h3>
                <select id="cameraSelect">
                    <option value="">Select Camera...</option>
                </select>
                <button onclick="applyCameraSelection()">Apply Camera Selection</button>
                <div class="status">
                    <span class="status-dot disconnected"></span>
                    <span id="connectionStatus">Disconnected</span>
                </div>
            </div>

            <div class="section">
                <h3>Camera Settings</h3>
                <select id="resolutionSelect">
                    <option value="320x240">320x240 (Default)</option>
                    <option value="640x480">640x480</option>
                    <option value="800x600">800x600</option>
                    <option value="848x480">848x480</option>
                    <option value="1024x768">1024x768</option>
                    <option value="1280x720">1280x720 (HD)</option>
                    <option value="1280x960">1280x960</option>
                    <option value="1280x1024">1280x1024</option>
                    <option value="1920x1080">1920x1080 (Full HD)</option>
                </select>
                <select id="fpsSelect">
                    <option value="15">15 FPS (Default)</option>
                    <option value="30">30 FPS</option>
                    <option value="25">25 FPS</option>
                    <option value="20">20 FPS</option>
                    <option value="10">10 FPS</option>
                    <option value="5">5 FPS</option>
                </select>
                <button onclick="applySettings()">Apply Settings</button>
            </div>

            <div class="section">
                <h3>Motion Detection</h3>
                <button id="motionButton" onclick="startMotionDetection()">Start Motion Detection</button>
                <div id="motionData">No motion data</div>
            </div>

            <div class="section">
                <h3>Head Tracking</h3>
                <select id="servoSelect">
                    <option value="">Select Servo...</option>
                </select>
                <button onclick="startHeadTracking()">Start Head Tracking</button>
            </div>
        </div>
    </div>

    <script>
        let streamUrl = null;
        let motionDetectionActive = false;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 3;
        const reconnectDelay = 5000;

        function showStatus(message, isLoading = false) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            if (isLoading) {
                statusEl.classList.add('loading');
            } else {
                statusEl.classList.remove('loading');
            }
        }

        function hideStatus() {
            const statusEl = document.getElementById('statusMessage');
            statusEl.style.display = 'none';
        }

        function updateConnectionStatus(connected) {
            const dot = document.querySelector('.status-dot');
            const status = document.getElementById('connectionStatus');
            if (connected) {
                dot.classList.remove('disconnected');
                dot.classList.add('connected');
                status.textContent = 'Connected';
                status.className = 'connected';
            } else {
                dot.classList.remove('connected');
                dot.classList.add('disconnected');
                status.textContent = 'Disconnected';
                status.className = 'disconnected';
            }
        }

        async function loadCameras() {
            try {
                showStatus('Loading cameras...', true);
                const response = await fetch('/camera/list');
                const cameras = await response.json();
                const select = document.getElementById('cameraSelect');
                select.innerHTML = '<option value="">Select Camera...</option>';
                cameras.forEach(camera => {
                    camera.devices.forEach(device => {
                        const option = document.createElement('option');
                        option.value = device.id;
                        option.textContent = `${camera.name} (${device.path})`;
                        select.appendChild(option);
                    });
                });
                hideStatus();
            } catch (error) {
                showStatus('Error loading cameras');
                console.error('Error loading cameras:', error);
            }
        }

        async function applyCameraSelection() {
            const select = document.getElementById('cameraSelect');
            const cameraId = parseInt(select.value);
            if (!cameraId && cameraId !== 0) {
                showStatus('Please select a camera');
                return;
            }

            try {
                showStatus('Initializing camera...', true);
                const response = await fetch('/camera/select', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cameraId })
                });

                if (!response.ok) {
                    throw new Error('Failed to select camera');
                }

                showStatus('Camera initialized, starting stream...', true);
                startStream();
            } catch (error) {
                showStatus('Error initializing camera');
                console.error('Error selecting camera:', error);
            }
        }

        function startStream() {
            const img = document.getElementById('cameraStream');
            const [width, height] = document.getElementById('resolutionSelect').value.split('x');
            const fps = document.getElementById('fpsSelect').value;
            
            streamUrl = `/camera/stream?width=${width}&height=${height}&fps=${fps}&t=${Date.now()}`;
            img.src = streamUrl;
            showStatus('Starting stream...', true);

            img.onload = () => {
                hideStatus();
                updateConnectionStatus(true);
                reconnectAttempts = 0;
            };

            img.onerror = () => {
                if (reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    showStatus(`Stream error, attempting to reconnect (${reconnectAttempts}/${maxReconnectAttempts})...`, true);
                    setTimeout(() => {
                        img.src = streamUrl + '&retry=' + reconnectAttempts;
                    }, reconnectDelay);
                } else {
                    showStatus('Failed to connect to stream');
                    updateConnectionStatus(false);
                    img.src = '/images/no-stream.jpg';
                }
            };
        }

        async function applySettings() {
            const [width, height] = document.getElementById('resolutionSelect').value.split('x');
            const fps = document.getElementById('fpsSelect').value;
            try {
                showStatus('Applying camera settings...', true);
                const response = await fetch('/camera/control', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        command: 'settings',
                        params: {
                            width: parseInt(width),
                            height: parseInt(height),
                            fps: parseInt(fps)
                        }
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to apply settings');
                }

                showStatus('Settings applied, restarting stream...', true);
                startStream();
            } catch (error) {
                showStatus('Error applying settings');
                console.error('Error applying settings:', error);
            }
        }

        async function startMotionDetection() {
            const button = document.getElementById('motionButton');
            const motionData = document.getElementById('motionData');
            
            if (!motionDetectionActive) {
                try {
                    showStatus('Starting motion detection...', true);
                    const response = await fetch('/camera/control', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ command: 'motion' })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to start motion detection');
                    }

                    const result = await response.json();
                    if (result.success) {
                        motionDetectionActive = true;
                        button.textContent = 'Stop Motion Detection';
                        if (result.motion_detected) {
                            motionData.textContent = `Motion detected at (${result.center_x.toFixed(1)}, ${result.center_y.toFixed(1)})`;
                        } else {
                            motionData.textContent = 'No motion detected';
                        }
                        document.getElementById('cameraStream').src = `data:image/jpeg;base64,${result.frame}`;
                        hideStatus();
                    } else {
                        throw new Error(result.error || 'Motion detection failed');
                    }
                } catch (error) {
                    showStatus('Error starting motion detection');
                    console.error('Error starting motion detection:', error);
                    motionDetectionActive = false;
                }
            } else {
                motionDetectionActive = false;
                button.textContent = 'Start Motion Detection';
                motionData.textContent = 'No motion data';
                startStream();
            }
        }

        async function startHeadTracking() {
            // Head tracking implementation
        }

        // Load cameras on page load
        document.addEventListener('DOMContentLoaded', loadCameras);
    </script>
</body>
</html>
