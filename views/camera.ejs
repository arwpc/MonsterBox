<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <style>
        body {
            background-color: black;
            color: #00ff00;
            font-family: monospace;
            margin: 0;
            padding: 20px;
        }
        h1 {
            color: #00ff00;
            text-shadow: 0 0 10px #00ff00;
        }
        .camera-feed {
            position: relative;
            margin-bottom: 20px;
        }
        .camera-feed img {
            max-width: 100%;
            border: 2px solid #00ff00;
            box-shadow: 0 0 10px #00ff00;
        }
        .error-message {
            color: #ff0000;
            background-color: rgba(255, 0, 0, 0.1);
            border: 1px solid #ff0000;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }
        .info-message {
            color: #00ff00;
            background-color: rgba(0, 255, 0, 0.1);
            border: 1px solid #00ff00;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }
        .control-panel {
            background-color: rgba(0, 255, 0, 0.1);
            border: 1px solid #00ff00;
            padding: 20px;
            margin-top: 20px;
            border-radius: 4px;
            max-width: 400px;
        }
        select, button {
            background-color: black;
            color: #00ff00;
            border: 1px solid #00ff00;
            padding: 5px 10px;
            margin: 5px 0;
            width: 100%;
            cursor: pointer;
        }
        select:hover, button:hover {
            background-color: #003300;
        }
        .status {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .connected {
            background-color: #00ff00;
            box-shadow: 0 0 10px #00ff00;
        }
        .disconnected {
            background-color: #ff0000;
            box-shadow: 0 0 10px #ff0000;
        }
        .motion-data {
            font-family: monospace;
            white-space: pre-wrap;
            margin-top: 10px;
            padding: 10px;
            background-color: rgba(0, 255, 0, 0.1);
            border: 1px solid #00ff00;
            border-radius: 4px;
        }
        h2 {
            color: #00ff00;
            margin-top: 20px;
            text-shadow: 0 0 5px #00ff00;
        }
        .section {
            margin-bottom: 30px;
        }
        .loading {
            color: #00ff00;
            text-align: center;
            padding: 20px;
            display: none;
        }
        @keyframes pulse {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }
        .loading.active {
            display: block;
            animation: pulse 1s infinite;
        }
    </style>
</head>
<body>
    <h1><%= title %></h1>

    <div class="camera-feed">
        <img id="cameraStream" src="/images/no-stream.jpg" alt="Camera Stream">
        <div id="loadingOverlay" class="loading">Loading...</div>
    </div>

    <div id="errorMessage" class="error-message" style="display: none;"></div>
    <div id="infoMessage" class="info-message" style="display: none;"></div>

    <div class="control-panel">
        <div class="section">
            <h2>Camera Selection</h2>
            <select id="cameraSelect">
                <option value="">Select Camera...</option>
            </select>
            <button onclick="applyCameraSelection()">Apply Camera Selection</button>
            <div class="status">
                <div id="connectionStatus" class="status-indicator disconnected"></div>
                <span id="connectionText">Disconnected</span>
            </div>
        </div>

        <div class="section">
            <h2>Camera Settings</h2>
            <div>Resolution:</div>
            <select id="resolution" onchange="applySettings()">
                <option value="320x240" selected>320x240 (Recommended)</option>
                <option value="640x480">640x480</option>
                <option value="800x600">800x600</option>
                <option value="1280x720">1280x720</option>
            </select>
            <button onclick="applySettings()">Apply Settings</button>
        </div>

        <div class="section">
            <h2>Motion Detection</h2>
            <button id="motionButton" onclick="toggleMotion()">Start Motion Detection</button>
            <div id="motionData" class="motion-data">No motion data</div>
        </div>

        <div class="section">
            <h2>Head Tracking</h2>
            <select id="servoSelect">
                <option value="">Select Servo...</option>
            </select>
            <button id="trackingButton" onclick="toggleTracking()">Start Head Tracking</button>
        </div>
    </div>

    <script>
        let isStreaming = false;
        let isMotionDetecting = false;
        let isTracking = false;
        let streamCheckInterval;
        let motionCheckInterval;
        let reconnectAttempts = 0;
        const MAX_RECONNECT_ATTEMPTS = 3;
        const initialCamera = '<%= selectedCamera %>';
        const SELECTED_CAMERA = initialCamera === 'null' ? null : parseInt(initialCamera);

        async function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        async function showInfo(message) {
            const infoDiv = document.getElementById('infoMessage');
            infoDiv.textContent = message;
            infoDiv.style.display = 'block';
            setTimeout(() => {
                infoDiv.style.display = 'none';
            }, 5000);
        }

        async function fetchCameras() {
            try {
                document.getElementById('loadingOverlay').classList.add('active');
                const response = await fetch('/camera/list');
                if (!response.ok) {
                    throw new Error('Failed to fetch cameras');
                }
                const cameras = await response.json();
                const select = document.getElementById('cameraSelect');
                select.innerHTML = '<option value="">Select Camera...</option>';
                
                cameras.forEach(camera => {
                    camera.devices.forEach(device => {
                        const option = document.createElement('option');
                        option.value = device.id;
                        option.textContent = `${camera.name} (${device.path})`;
                        select.appendChild(option);
                    });
                });

                // Set previously selected camera if any
                if (SELECTED_CAMERA !== null) {
                    select.value = SELECTED_CAMERA;
                    await applyCameraSelection();
                }
            } catch (error) {
                showError('Failed to load cameras: ' + error.message);
            } finally {
                document.getElementById('loadingOverlay').classList.remove('active');
            }
        }

        async function applyCameraSelection() {
            const cameraId = document.getElementById('cameraSelect').value;
            if (!cameraId) {
                showError('Please select a camera');
                return;
            }

            try {
                document.getElementById('loadingOverlay').classList.add('active');
                const response = await fetch('/camera/select', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ cameraId: parseInt(cameraId) })
                });

                if (!response.ok) {
                    throw new Error('Failed to select camera');
                }

                showInfo('Camera selected successfully');
                startStream();
            } catch (error) {
                showError('Failed to select camera: ' + error.message);
            } finally {
                document.getElementById('loadingOverlay').classList.remove('active');
            }
        }

        async function applySettings() {
            const [width, height] = document.getElementById('resolution').value.split('x');
            
            try {
                document.getElementById('loadingOverlay').classList.add('active');
                const response = await fetch('/camera/control', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        command: 'settings',
                        params: {
                            width: parseInt(width),
                            height: parseInt(height)
                        }
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to apply settings');
                }

                showInfo('Settings applied successfully');
                startStream();
            } catch (error) {
                showError('Failed to apply settings: ' + error.message);
            } finally {
                document.getElementById('loadingOverlay').classList.remove('active');
            }
        }

        function updateConnectionStatus(connected) {
            const status = document.getElementById('connectionStatus');
            const text = document.getElementById('connectionText');
            if (connected) {
                status.className = 'status-indicator connected';
                text.textContent = 'Connected';
            } else {
                status.className = 'status-indicator disconnected';
                text.textContent = 'Disconnected';
            }
        }

        function startStream() {
            const img = document.getElementById('cameraStream');
            const [width, height] = document.getElementById('resolution').value.split('x');
            img.src = `/camera/stream?width=${width}&height=${height}&t=${Date.now()}`;
            isStreaming = true;
            updateConnectionStatus(true);
            
            // Clear any existing interval
            if (streamCheckInterval) {
                clearInterval(streamCheckInterval);
            }

            // Start monitoring stream health
            streamCheckInterval = setInterval(() => {
                if (!img.complete || img.naturalWidth === 0) {
                    handleStreamError();
                }
            }, 5000);

            img.onerror = handleStreamError;
        }

        function handleStreamError() {
            if (isStreaming) {
                reconnectAttempts++;
                if (reconnectAttempts <= MAX_RECONNECT_ATTEMPTS) {
                    showError(`Stream error, attempting to reconnect (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`);
                    setTimeout(startStream, 2000);
                } else {
                    isStreaming = false;
                    updateConnectionStatus(false);
                    showError('Failed to maintain stream connection');
                    document.getElementById('cameraStream').src = '/images/no-stream.jpg';
                    if (streamCheckInterval) {
                        clearInterval(streamCheckInterval);
                    }
                }
            }
        }

        async function toggleMotion() {
            const button = document.getElementById('motionButton');
            const motionData = document.getElementById('motionData');
            
            try {
                if (!isMotionDetecting) {
                    document.getElementById('loadingOverlay').classList.add('active');
                    isMotionDetecting = true;
                    button.textContent = 'Stop Motion Detection';
                    
                    // Start motion detection loop
                    motionCheckInterval = setInterval(async () => {
                        try {
                            const response = await fetch('/camera/control', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    command: 'motion'
                                })
                            });

                            if (!response.ok) {
                                throw new Error('Motion detection failed');
                            }

                            const result = await response.json();
                            if (result.success) {
                                document.getElementById('cameraStream').src = `data:image/jpeg;base64,${result.frame}`;
                                motionData.textContent = result.motion_detected ? 
                                    `Motion Detected!\nPosition: (${result.center_x.toFixed(1)}, ${result.center_y.toFixed(1)})\nArea: ${result.area}` :
                                    'No motion detected';
                            } else {
                                throw new Error(result.error);
                            }
                        } catch (error) {
                            showError('Motion detection error: ' + error.message);
                            stopMotion();
                        }
                    }, 100);
                } else {
                    stopMotion();
                }
            } catch (error) {
                showError('Failed to toggle motion detection: ' + error.message);
                stopMotion();
            } finally {
                document.getElementById('loadingOverlay').classList.remove('active');
            }
        }

        function stopMotion() {
            isMotionDetecting = false;
            document.getElementById('motionButton').textContent = 'Start Motion Detection';
            document.getElementById('motionData').textContent = 'No motion data';
            if (motionCheckInterval) {
                clearInterval(motionCheckInterval);
            }
            startStream();
        }

        async function toggleTracking() {
            const button = document.getElementById('trackingButton');
            const servoId = document.getElementById('servoSelect').value;
            
            try {
                if (!isTracking) {
                    if (!servoId) {
                        showError('Please select a servo');
                        return;
                    }

                    document.getElementById('loadingOverlay').classList.add('active');
                    const response = await fetch('/camera/control', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            command: 'head_track',
                            params: {
                                action: 'start',
                                'servo-id': parseInt(servoId)
                            }
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to start tracking');
                    }

                    isTracking = true;
                    button.textContent = 'Stop Head Tracking';
                } else {
                    const response = await fetch('/camera/control', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            command: 'head_track',
                            params: {
                                action: 'stop'
                            }
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to stop tracking');
                    }

                    isTracking = false;
                    button.textContent = 'Start Head Tracking';
                }
            } catch (error) {
                showError('Failed to toggle tracking: ' + error.message);
            } finally {
                document.getElementById('loadingOverlay').classList.remove('active');
            }
        }

        // Initialize
        fetchCameras();
    </script>
</body>
</html>
