{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MonsterBox","text":"<p>MonsterBox is a refactored scene builder application designed to manage scenes and steps efficiently for animatronic automation. It integrates hardware components (I2C, GPIO, servos, sensors, audio, cameras) and provides a web-based interface for easy control and configuration.</p>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/","title":"MonsterBox MCP Chrome Extension Integration","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#overview","title":"\ud83c\udfaf Overview","text":"<p>This document describes the integration between MonsterBox and the Chrome MCP extension for comprehensive browser debugging and log collection during streaming development and testing.</p>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#chrome-mcp-extension-details","title":"\ud83d\udd27 Chrome MCP Extension Details","text":"<ul> <li>Extension ID: <code>bjfgambnhccakkhmkepdoekmckoijdlc</code></li> <li>Version: 1.3.4</li> <li>Size: 2.4 MB</li> <li>Permissions: </li> <li>Access the page debugger backend</li> <li>Read and change all your data on all websites</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#mcp-servers-configured","title":"\ud83d\udccb MCP Servers Configured","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#1-monsterbox-browser-debug-server","title":"1. MonsterBox Browser Debug Server","text":"<ul> <li>Purpose: Comprehensive browser debugging for streaming issues</li> <li>Location: <code>mcp-servers/browser-debug-server.js</code></li> <li>Tools Available:</li> <li><code>collect_browser_logs</code> - Console logs, errors, warnings</li> <li><code>collect_network_logs</code> - Network requests and streaming connections</li> <li><code>debug_streaming_issues</code> - WebRTC and MJPEG stream debugging</li> <li><code>analyze_browser_performance</code> - Performance metrics collection</li> <li><code>collect_streaming_diagnostics</code> - Comprehensive streaming diagnostics</li> <li><code>generate_debug_report</code> - Consolidated debug reports</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#2-enhanced-browser-log-collector","title":"2. Enhanced Browser Log Collector","text":"<ul> <li>Purpose: Real-time browser log collection with MCP integration</li> <li>Location: <code>public/js/log-collector.js</code></li> <li>Features:</li> <li>Automatic streaming debug mode detection</li> <li>WebRTC connection monitoring</li> <li>Video element event tracking</li> <li>MCP Chrome extension communication</li> <li>Streaming API call monitoring</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#usage-instructions","title":"\ud83d\ude80 Usage Instructions","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#step-1-enable-mcp-chrome-extension","title":"Step 1: Enable MCP Chrome Extension","text":"<ol> <li>Ensure the Chrome MCP extension is installed and enabled</li> <li>Grant necessary permissions for all sites</li> <li>Pin the extension to the toolbar for easy access</li> </ol>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#step-2-start-monsterbox-with-mcp","title":"Step 2: Start MonsterBox with MCP","text":"<pre><code># Start MonsterBox server\nnpm start\n\n# In another terminal, test MCP integration\nnpm run mcp:browser-debug\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#step-3-access-streaming-test-pages","title":"Step 3: Access Streaming Test Pages","text":"<p>Navigate to any of these URLs to automatically enable streaming debug mode: - <code>http://192.168.8.120:3000/webrtc-test.html</code> - <code>http://192.168.8.120:3000/stream-test.html</code> - <code>http://192.168.8.120:3000/api/streaming/stream/1</code></p>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#step-4-use-mcp-tools-for-debugging","title":"Step 4: Use MCP Tools for Debugging","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#collect-browser-logs","title":"Collect Browser Logs","text":"<pre><code>// In Augment/Claude with MCP access\ncollect_browser_logs({\n  \"url\": \"http://192.168.8.120:3000/webrtc-test.html\",\n  \"logLevel\": \"all\",\n  \"duration\": 60\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#debug-streaming-issues","title":"Debug Streaming Issues","text":"<pre><code>debug_streaming_issues({\n  \"characterId\": 1,\n  \"testType\": \"both\",\n  \"collectPerformance\": true\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#analyze-performance","title":"Analyze Performance","text":"<pre><code>analyze_browser_performance({\n  \"url\": \"http://192.168.8.120:3000/stream-test.html\",\n  \"duration\": 120\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#debugging-workflow","title":"\ud83d\udd0d Debugging Workflow","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#1-initial-setup","title":"1. Initial Setup","text":"<ol> <li>Open Chrome DevTools (F12)</li> <li>Navigate to Console tab</li> <li>Enable all log levels (Verbose, Info, Warnings, Errors)</li> <li>Open Network tab and enable \"Preserve log\"</li> </ol>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#2-start-streaming-test","title":"2. Start Streaming Test","text":"<ol> <li>Visit: <code>http://192.168.8.120:3000/stream-test.html</code></li> <li>Select Orlok (Character ID: 1)</li> <li>Click \"Start Stream\" button</li> <li>Monitor console and network tabs</li> </ol>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#3-collect-mcp-data","title":"3. Collect MCP Data","text":"<p>Use MCP tools to collect comprehensive debugging data: - Browser console logs - Network request logs - WebRTC connection states - Video element events - Performance metrics</p>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#4-generate-debug-report","title":"4. Generate Debug Report","text":"<pre><code>generate_debug_report({\n  \"reportType\": \"streaming\",\n  \"timeRange\": \"1h\"\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#key-metrics-to-monitor","title":"\ud83d\udcca Key Metrics to Monitor","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#browser-console","title":"Browser Console","text":"<ul> <li>JavaScript errors (especially module loading)</li> <li>WebRTC connection failures</li> <li>Video element errors</li> <li>Network timeout errors</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#network-tab","title":"Network Tab","text":"<ul> <li>Failed requests (red status codes)</li> <li>Slow loading times (&gt;5s)</li> <li>CORS errors</li> <li>404 errors for JS modules</li> <li>Streaming connection timeouts</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#performance-tab","title":"Performance Tab","text":"<ul> <li>Memory usage stability</li> <li>CPU usage during streaming</li> <li>Frame rate consistency</li> <li>Video decode performance</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#streaming-specific-debugging","title":"\ud83c\udfa5 Streaming-Specific Debugging","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#webrtc-issues","title":"WebRTC Issues","text":"<ul> <li>Check RTCPeerConnection state changes</li> <li>Monitor ICE connection states</li> <li>Verify STUN/TURN server connectivity</li> <li>Analyze WebRTC statistics</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#mjpeg-stream-issues","title":"MJPEG Stream Issues","text":"<ul> <li>Verify stream endpoint accessibility</li> <li>Check MIME type headers</li> <li>Monitor frame delivery rate</li> <li>Analyze bandwidth utilization</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#video-element-issues","title":"Video Element Issues","text":"<ul> <li>Check video.canplay events</li> <li>Monitor video.error events</li> <li>Verify video dimensions</li> <li>Check video.readyState</li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#troubleshooting-common-issues","title":"\ud83d\udd27 Troubleshooting Common Issues","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#1-es6-module-loading-errors","title":"1. ES6 Module Loading Errors","text":"<p>Symptoms: <code>Failed to load module script</code> errors Solution: Check MIME types and file accessibility</p> <pre><code>collect_network_logs({\n  \"url\": \"http://192.168.8.120:3000/webrtc-test.html\",\n  \"includeHeaders\": true,\n  \"filterStreaming\": true\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#2-webrtc-connection-failures","title":"2. WebRTC Connection Failures","text":"<p>Symptoms: Connection state stuck in \"connecting\" Solution: Check STUN servers and network connectivity</p> <pre><code>debug_streaming_issues({\n  \"characterId\": 1,\n  \"testType\": \"webrtc\",\n  \"collectPerformance\": true\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#3-mjpeg-stream-not-loading","title":"3. MJPEG Stream Not Loading","text":"<p>Symptoms: Image not displaying or constant loading Solution: Verify streaming service and camera availability</p> <pre><code>collect_streaming_diagnostics({\n  \"characterId\": 1,\n  \"includeServerLogs\": true,\n  \"includeBrowserLogs\": true\n})\n</code></pre>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#log-file-locations","title":"\ud83d\udcc1 Log File Locations","text":""},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#browser-debug-logs","title":"Browser Debug Logs","text":"<ul> <li>Location: <code>log/browser-debug/</code></li> <li>Files: <code>browser-logs-*.json</code>, <code>network-logs-*.json</code>, <code>streaming-debug-*.json</code></li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#monsterbox-application-logs","title":"MonsterBox Application Logs","text":"<ul> <li>Location: <code>log/</code></li> <li>Files: <code>monsterbox.log</code>, <code>streaming.log</code>, <code>error.log</code></li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#mcp-debug-reports","title":"MCP Debug Reports","text":"<ul> <li>Location: <code>log/browser-debug/</code></li> <li>Files: <code>debug-report-*.json</code>, <code>diagnostics-*.json</code></li> </ul>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#integration-benefits","title":"\ud83c\udfaf Integration Benefits","text":"<ol> <li>Real-time Debugging: Immediate feedback on streaming issues</li> <li>Comprehensive Logging: All browser and server events captured</li> <li>Performance Monitoring: Detailed metrics for optimization</li> <li>Automated Collection: MCP tools automate complex debugging tasks</li> <li>Centralized Analysis: All logs aggregated for easy analysis</li> </ol>"},{"location":"MCP-CHROME-EXTENSION-INTEGRATION/#continuous-monitoring","title":"\ud83d\udd04 Continuous Monitoring","text":"<p>The enhanced log collector automatically: - Detects streaming pages and enables debug mode - Connects to MCP Chrome extension - Monitors video elements and WebRTC connections - Sends real-time data to MCP servers - Generates periodic debug reports</p> <p>This integration provides comprehensive visibility into MonsterBox streaming functionality for rapid issue identification and resolution.</p>"},{"location":"MCP-REMOTE-CAPABILITIES/","title":"\ud83c\udf83 MonsterBox MCP Remote Capabilities","text":""},{"location":"MCP-REMOTE-CAPABILITIES/#overview","title":"Overview","text":"<p>The MonsterBox MCP (Model Context Protocol) system now includes two powerful capabilities for remote debugging and monitoring of animatronic RPI4b systems through VS Code and Augment AI:</p> <ol> <li>Remote Command Execution - Execute shell commands directly on Orlok and Coffin RPIs</li> <li>Comprehensive Log Collection - Collect both application and system logs from the RPIs</li> </ol>"},{"location":"MCP-REMOTE-CAPABILITIES/#supported-systems","title":"Supported Systems","text":"<ul> <li>Orlok - 192.168.8.120 \u2705</li> <li>Coffin - 192.168.8.140 \u2705  </li> <li>Pumpkinhead - 192.168.1.101 \u274c (Excluded as requested)</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#1-remote-command-execution","title":"1. Remote Command Execution","text":""},{"location":"MCP-REMOTE-CAPABILITIES/#mcp-tool-execute_remote_command","title":"MCP Tool: <code>execute_remote_command</code>","text":"<p>Execute shell commands on the animatronic RPI systems through automated SSH connections.</p>"},{"location":"MCP-REMOTE-CAPABILITIES/#parameters","title":"Parameters:","text":"<ul> <li><code>host</code> (required) - RPI IP address or name (<code>192.168.8.120</code>, <code>192.168.8.140</code>, <code>orlok</code>, <code>coffin</code>)</li> <li><code>command</code> (required) - Shell command to execute</li> <li><code>timeout</code> (optional) - Command timeout in seconds (default: 30)</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#safety-features","title":"Safety Features:","text":"<ul> <li>Only allows Orlok and Coffin systems</li> <li>Blocks dangerous commands (<code>rm -rf</code>, <code>dd</code>, <code>mkfs</code>, <code>shutdown</code>, etc.)</li> <li>Uses existing SSH credentials from <code>.env</code> file</li> <li>Automatic timeout protection</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#example-usage","title":"Example Usage:","text":"<pre><code>// Get system information\n{\n  \"name\": \"execute_remote_command\",\n  \"arguments\": {\n    \"host\": \"192.168.8.120\",\n    \"command\": \"uname -a\"\n  }\n}\n\n// Check disk usage\n{\n  \"name\": \"execute_remote_command\", \n  \"arguments\": {\n    \"host\": \"orlok\",\n    \"command\": \"df -h\"\n  }\n}\n\n// Check running processes\n{\n  \"name\": \"execute_remote_command\",\n  \"arguments\": {\n    \"host\": \"coffin\", \n    \"command\": \"ps aux | grep monsterbox\"\n  }\n}\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#2-comprehensive-log-collection","title":"2. Comprehensive Log Collection","text":""},{"location":"MCP-REMOTE-CAPABILITIES/#mcp-tool-collect_comprehensive_rpi_logs","title":"MCP Tool: <code>collect_comprehensive_rpi_logs</code>","text":"<p>Collect detailed logs from animatronic RPI systems including MonsterBox application logs and Linux system logs.</p>"},{"location":"MCP-REMOTE-CAPABILITIES/#parameters_1","title":"Parameters:","text":"<ul> <li><code>host</code> (required) - RPI IP address or name</li> <li><code>logTypes</code> (optional) - Array of log types to collect:</li> <li><code>application</code> - MonsterBox app logs and service logs</li> <li><code>system</code> - General system logs, kernel logs, SSH logs</li> <li><code>error</code> - Error logs, critical logs, dmesg errors</li> <li><code>service</code> - Service-specific logs (SSH, systemd, networking, cron)</li> <li><code>all</code> - Collect all log types</li> <li><code>lines</code> (optional) - Number of log lines per type (default: 100)</li> <li><code>since</code> (optional) - Time period to collect from (default: \"1 hour ago\")</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#example-usage_1","title":"Example Usage:","text":"<pre><code>// Collect all log types\n{\n  \"name\": \"collect_comprehensive_rpi_logs\",\n  \"arguments\": {\n    \"host\": \"192.168.8.120\",\n    \"logTypes\": [\"all\"],\n    \"lines\": 50,\n    \"since\": \"30 minutes ago\"\n  }\n}\n\n// Collect only application and error logs\n{\n  \"name\": \"collect_comprehensive_rpi_logs\",\n  \"arguments\": {\n    \"host\": \"orlok\",\n    \"logTypes\": [\"application\", \"error\"],\n    \"lines\": 100\n  }\n}\n\n// Quick system health check\n{\n  \"name\": \"collect_comprehensive_rpi_logs\",\n  \"arguments\": {\n    \"host\": \"coffin\",\n    \"logTypes\": [\"system\", \"error\"],\n    \"since\": \"1 hour ago\"\n  }\n}\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#authentication","title":"Authentication","text":"<p>Both capabilities use the existing SSH credentials stored in your <code>.env</code> file:</p> <pre><code># Orlok Animatronic SSH Credentials\nORLOK_SSH_USER=\"remote\"\nORLOK_SSH_PASSWORD=\"klrklr89!\"\n\n# Coffin Animatronic SSH Credentials  \nCOFFIN_SSH_USER=\"remote\"\nCOFFIN_SSH_PASSWORD=\"klrklr89!\"\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#testing","title":"Testing","text":"<p>Test the new capabilities:</p> <pre><code># Test both remote command execution and log collection\nnpm run test:mcp-remote\n\n# Test the full MCP system\nnpm run test:mcp\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#usage-in-vs-code-with-augment","title":"Usage in VS Code with Augment","text":"<p>These MCP tools are automatically available in VS Code when using Augment AI. You can:</p> <ol> <li>Debug Issues: Execute diagnostic commands on the RPIs</li> <li>Monitor Logs: Collect comprehensive logs for troubleshooting</li> <li>System Health: Check disk usage, memory, processes</li> <li>Error Analysis: Collect error logs and system events</li> </ol>"},{"location":"MCP-REMOTE-CAPABILITIES/#example-augment-requests","title":"Example Augment Requests:","text":"<ul> <li>\"Check the disk usage on Orlok\"</li> <li>\"Collect error logs from Coffin for the last hour\"</li> <li>\"Show me the running processes on the Orlok RPI\"</li> <li>\"Get comprehensive logs from both animatronic systems\"</li> <li>\"Execute 'systemctl status ssh' on the Coffin RPI\"</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#security-notes","title":"Security Notes","text":"<ul> <li>Commands are executed with the <code>remote</code> user privileges</li> <li>Dangerous system commands are blocked for safety</li> <li>SSH connections use password authentication (not keys)</li> <li>Only Orlok and Coffin systems are accessible</li> <li>All commands have timeout protection</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#troubleshooting","title":"Troubleshooting","text":"<p>If remote capabilities fail:</p> <ol> <li>Check Network: Ensure RPIs are reachable (<code>ping 192.168.8.120</code>)</li> <li>Verify Credentials: Confirm SSH credentials in <code>.env</code> file</li> <li>Test SSH: Try manual SSH connection to verify access</li> <li>Check Logs: Review MCP server logs for detailed error messages</li> </ol>"},{"location":"MCP-REMOTE-CAPABILITIES/#integration-with-existing-mcp-tools","title":"Integration with Existing MCP Tools","text":"<p>These new capabilities work alongside existing MCP tools:</p> <ul> <li><code>collect_browser_logs</code> - Browser console logs and errors</li> <li><code>collect_github_logs</code> - GitHub API logs and repository events  </li> <li><code>collect_rpi_console_logs</code> - Basic RPI console logs</li> <li><code>collect_ubuntu_system_logs</code> - Ubuntu system logs</li> <li><code>collect_monsterbox_logs</code> - Local MonsterBox application logs</li> <li><code>analyze_logs</code> - Log analysis and pattern detection</li> <li><code>setup_log_monitoring</code> - Continuous log monitoring setup</li> </ul> <p>Your MonsterBox MCP system now provides comprehensive remote debugging and monitoring capabilities for your animatronic systems! \ud83c\udf83\ud83d\udc7b\ud83e\udd16</p>"},{"location":"MonsterBox-Technical-Overview/","title":"\ud83c\udf83 MonsterBox Technical Overview &amp; Setup Guide","text":""},{"location":"MonsterBox-Technical-Overview/#executive-summary","title":"Executive Summary","text":"<p>MonsterBox is a sophisticated animatronic control system built with Node.js/Express, designed for managing distributed Raspberry Pi-based animatronic systems in haunted attraction environments. The platform features enterprise-level architecture, comprehensive testing, and professional development practices.</p>"},{"location":"MonsterBox-Technical-Overview/#1-codebase-statistics","title":"1. Codebase Statistics","text":"<ul> <li>Total Files: 19,127 files (including node_modules)</li> <li>Source Code Files: ~350 files (excluding node_modules, .git, site)</li> <li>Estimated Total Lines of Code: ~25,000-30,000 lines</li> <li>Project Structure Depth: 4-5 levels deep</li> <li>Main Directories: 15 primary directories</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#2-programming-languages-lines-of-code-distribution","title":"2. Programming Languages &amp; Lines of Code Distribution","text":""},{"location":"MonsterBox-Technical-Overview/#primary-languages-22000-lines-85","title":"Primary Languages (~22,000 lines, 85%):","text":"Language Lines of Code Percentage Files JavaScript (Node.js) ~15,000 60% ~80 Python ~4,000 15% ~25 EJS Templates ~1,500 5% ~20 JSON ~1,500 5% ~15"},{"location":"MonsterBox-Technical-Overview/#secondary-languages-4000-lines-15","title":"Secondary Languages (~4,000 lines, 15%):","text":"Language Lines of Code Percentage Files Markdown ~2,000 7% ~50 CSS ~800 3% ~5 Shell Scripts ~800 3% ~10 PowerShell ~400 2% ~5 <p>Total: ~25,000 lines across ~210 source files</p>"},{"location":"MonsterBox-Technical-Overview/#3-technology-stack","title":"3. Technology Stack","text":""},{"location":"MonsterBox-Technical-Overview/#backend-framework","title":"Backend Framework","text":"<ul> <li>Node.js: v18.0.0+ (Runtime Environment)</li> <li>Express.js: v4.21.1 (Web Application Framework)</li> <li>EJS: v3.1.9 (Embedded JavaScript Templating)</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#frontend-technologies","title":"Frontend Technologies","text":"<ul> <li>EJS Templating: Server-side rendering with dynamic content</li> <li>CSS3: Custom styling with Google Fonts (Creepster theme)</li> <li>JavaScript (Client-side): jQuery 3.6.0, Axios for AJAX</li> <li>WebSocket: Real-time audio/video streaming (ws v8.14.2)</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#databasestorage-solutions","title":"Database/Storage Solutions","text":"<ul> <li>JSON File-based Storage: Character, scene, part, and sound configurations</li> <li>Session Storage: Express-session v1.17.3 for user sessions</li> <li>File System: Direct file operations for media and logs</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#hardware-integration-libraries","title":"Hardware Integration Libraries","text":"<ul> <li>GPIO Control: <code>onoff</code> v6.0.3 (Raspberry Pi GPIO)</li> <li>I2C Communication: <code>i2c-bus</code> v5.2.3 (Sensor and device communication)</li> <li>Audio Playback: <code>mpg123</code> v0.2.3 (Sound system integration)</li> <li>System Information: <code>node-disk-info</code> v1.3.0 (Hardware monitoring)</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#4-key-dependencies","title":"4. Key Dependencies","text":""},{"location":"MonsterBox-Technical-Overview/#core-framework-dependencies","title":"Core Framework Dependencies","text":"<pre><code>{\n  \"express\": \"^4.21.1\",           // Web framework\n  \"ejs\": \"^3.1.9\",                // Templating engine\n  \"express-session\": \"^1.17.3\",   // Session management\n  \"dotenv\": \"^16.4.5\",            // Environment configuration\n  \"winston\": \"^3.11.0\",           // Logging framework\n  \"ws\": \"^8.14.2\"                 // WebSocket support\n}\n</code></pre>"},{"location":"MonsterBox-Technical-Overview/#hardware-control-libraries","title":"Hardware Control Libraries","text":"<pre><code>{\n  \"i2c-bus\": \"^5.2.3\",            // I2C device communication\n  \"onoff\": \"^6.0.3\",              // GPIO control for RPi\n  \"mpg123\": \"^0.2.3\",             // Audio playback\n  \"node-disk-info\": \"^1.3.0\"      // System monitoring\n}\n</code></pre>"},{"location":"MonsterBox-Technical-Overview/#aiml-integrations","title":"AI/ML Integrations","text":"<pre><code>{\n  \"task-master-ai\": \"^0.16.1\",    // AI-powered task management\n  \"@ai-sdk/openai\": \"1.3.22\",     // OpenAI integration\n  \"@anthropic-ai/sdk\": \"0.39.0\",  // Claude AI integration\n  \"openai\": \"^4.104.0\"            // OpenAI API client\n}\n</code></pre>"},{"location":"MonsterBox-Technical-Overview/#testing-frameworks","title":"Testing Frameworks","text":"<pre><code>{\n  \"mocha\": \"^10.7.3\",             // Test runner\n  \"chai\": \"^4.5.0\",               // Assertion library\n  \"chai-http\": \"^4.3.0\",          // HTTP testing\n  \"cross-env\": \"^7.0.3\"           // Environment management\n}\n</code></pre>"},{"location":"MonsterBox-Technical-Overview/#5-architecture-overview","title":"5. Architecture Overview","text":""},{"location":"MonsterBox-Technical-Overview/#mvc-structure","title":"MVC Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 app.js                 # Main application entry point (280 lines)\n\u251c\u2500\u2500 controllers/           # Business logic layer (~2,500 lines)\n\u2502   \u251c\u2500\u2500 sceneController.js\n\u2502   \u251c\u2500\u2500 partController.js\n\u2502   \u251c\u2500\u2500 soundController.js\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 services/              # Service layer (~1,500 lines)\n\u2502   \u251c\u2500\u2500 characterService.js\n\u2502   \u251c\u2500\u2500 sceneService.js\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 routes/                # API endpoints (~3,500 lines)\n\u2502   \u251c\u2500\u2500 characterRoutes.js\n\u2502   \u251c\u2500\u2500 sceneRoutes.js\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 views/                 # EJS templates (~1,500 lines)\n    \u251c\u2500\u2500 index.ejs\n    \u251c\u2500\u2500 scenes.ejs\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"MonsterBox-Technical-Overview/#api-endpoints-structure","title":"API Endpoints Structure","text":"<ul> <li>Character Management: <code>/characters</code> - CRUD operations for animatronic characters</li> <li>Scene Builder: <code>/scenes</code> - Scene creation, editing, and execution</li> <li>Hardware Control: <code>/parts/*</code> - GPIO, servo, LED, sensor control</li> <li>Audio System: <code>/sounds</code> - Sound management and playback</li> <li>Real-time Control: <code>/active-mode</code> - Live performance automation</li> <li>System Monitoring: <code>/health</code>, <code>/logs</code> - Health checks and log viewing</li> <li>Configuration: <code>/system-config</code> - System-wide settings</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#hardware-integration-patterns","title":"Hardware Integration Patterns","text":"<ol> <li>Python Script Execution: Node.js spawns Python processes for hardware control</li> <li>JSON Configuration: Hardware settings stored in character-specific JSON files</li> <li>SSH Remote Control: Secure communication with distributed RPi systems</li> <li>Real-time WebSocket: Live streaming for audio/video feeds</li> </ol>"},{"location":"MonsterBox-Technical-Overview/#distributed-architecture","title":"Distributed Architecture","text":"<ul> <li>Development Workstation: Windows-based control center</li> <li>Orlok RPi (192.168.8.120): Vampire animatronic with servo/GPIO control</li> <li>Coffin RPi (192.168.8.140): Coffin mechanism with linear actuators</li> <li>Pumpkinhead RPi (192.168.1.101): Currently offline/disabled</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#6-development-tools","title":"6. Development Tools","text":""},{"location":"MonsterBox-Technical-Overview/#build-tools","title":"Build Tools","text":"<ul> <li>npm scripts: 20+ predefined scripts for development, testing, and deployment</li> <li>nodemon: Hot-reload development server</li> <li>cross-env: Cross-platform environment variable management</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#testing-setup","title":"Testing Setup","text":"<ul> <li>Mocha + Chai: Unit and integration testing (~2,000 lines)</li> <li>Custom Test Reporter: Clean output formatting</li> <li>Environment-specific Testing: Separate test configurations</li> <li>Hardware Test Isolation: RPI-specific tests excluded on non-RPI environments</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#documentation-system-mkdocs","title":"Documentation System (MkDocs)","text":"<ul> <li>Material Theme: Modern, responsive documentation</li> <li>57 documentation files (~2,000 lines) organized in structured navigation</li> <li>Automated GitHub Pages Deployment</li> <li>Comprehensive Coverage: Setup guides, API docs, character sheets, security</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#project-management","title":"Project Management","text":"<ul> <li>Task Master AI: v0.16.1 integrated for project management</li> <li>15 main tasks with 45+ subtasks currently tracked</li> <li>Remote Agent Support: 3 specialized agents working in parallel</li> <li>Automated Task Generation: PRD-based task creation and management</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>Winston Logging: Structured application logging (~800 lines)</li> <li>MCP Log Collection: Distributed log aggregation from RPi systems (~1,200 lines)</li> <li>Sematext Integration: External monitoring and alerting</li> <li>Health Monitoring: Real-time system status endpoints</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#monsterbox-development-environment-setup-script","title":"MonsterBox Development Environment Setup Script","text":"<p>The following script provides automated setup for the MonsterBox development environment on Ubuntu/Debian systems:</p> <pre><code>#!/bin/bash\n\n# MonsterBox Development Environment Setup Script\n# For Ubuntu/Debian systems including Raspberry Pi\n\necho \"\ud83c\udf83 Setting up MonsterBox Development Environment...\"\n\n# Update system packages\necho \"\ud83d\udce6 Updating system packages...\"\nsudo apt-get update\n\n# Install Node.js and npm if not present\necho \"\ud83d\udce6 Installing Node.js and npm...\"\nsudo apt-get install -y curl\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install Python and pip\necho \"\ud83d\udc0d Installing Python and pip...\"\nsudo apt-get install -y python3 python3-pip python3-dev python3-venv\n\n# Install system dependencies for MonsterBox\necho \"\ud83d\udd27 Installing system dependencies...\"\nsudo apt-get install -y \\\n    build-essential \\\n    git \\\n    ffmpeg \\\n    mpg123 \\\n    libmp3lame0 \\\n    libmp3lame-dev \\\n    alsa-utils \\\n    libasound2 \\\n    libasound2-dev \\\n    v4l-utils \\\n    i2c-tools\n\n# Install hardware-specific packages (for RPI compatibility)\necho \"\ud83d\udd0c Installing hardware packages...\"\nsudo apt-get install -y \\\n    python3-numpy \\\n    python3-opencv \\\n    python3-setuptools \\\n    python3-wheel \\\n    libopencv-dev \\\n    libatlas-base-dev \\\n    libhdf5-dev \\\n    libgtk-3-0 \\\n    libavcodec-dev \\\n    libavformat-dev \\\n    libswscale-dev \\\n    libv4l-dev \\\n    libxvidcore-dev \\\n    libx264-dev\n\n# Navigate to project directory\ncd /mnt/persist/workspace\n\n# Install Node.js dependencies\necho \"\ud83d\udce6 Installing Node.js dependencies...\"\nnpm install\n\n# Install Python dependencies\necho \"\ud83d\udc0d Installing Python dependencies...\"\nif [ -f scripts/requirements.txt ]; then\n    python3 -m pip install --user -r scripts/requirements.txt\nfi\n\n# Create necessary directories\necho \"\ud83d\udcc1 Creating necessary directories...\"\nmkdir -p log\nmkdir -p public/sounds\nmkdir -p data\n\n# Set up environment variables for testing\necho \"\ud83d\udd27 Setting up test environment...\"\nexport NODE_ENV=test\nexport PORT=3000\nexport SESSION_SECRET=test-session-secret-for-setup\nexport ANTHROPIC_API_KEY=your_anthropic_api_key_here\nexport OPENAI_API_KEY=your_openai_api_key_here\nexport GOOGLE_API_KEY=your_google_api_key_here\nexport REPLICA_API_KEY=your_replica_api_key_here\nexport PERPLEXITY_API_KEY=your_perplexity_api_key_here\nexport MISTRAL_API_KEY=your_mistral_key_here\nexport XAI_API_KEY=YOUR_XAI_KEY_HERE\nexport AZURE_OPENAI_API_KEY=your_azure_key_here\nexport OLLAMA_API_KEY=your_ollama_api_key_here\nexport SKIP_CI_INTEGRATION=true\n\n# Add environment variables to profile\necho \"\ud83d\udcdd Adding environment variables to profile...\"\ncat &gt;&gt; $HOME/.profile &lt;&lt; 'EOF'\n\n# MonsterBox environment variables\nexport NODE_ENV=test\nexport PORT=3000\nexport SESSION_SECRET=test-session-secret-for-setup\nexport ANTHROPIC_API_KEY=your_anthropic_api_key_here\nexport OPENAI_API_KEY=your_openai_api_key_here\nexport GOOGLE_API_KEY=your_google_api_key_here\nexport REPLICA_API_KEY=your_replica_api_key_here\nexport PERPLEXITY_API_KEY=your_perplexity_api_key_here\nexport MISTRAL_API_KEY=your_mistral_key_here\nexport XAI_API_KEY=YOUR_XAI_KEY_HERE\nexport AZURE_OPENAI_API_KEY=your_azure_key_here\nexport OLLAMA_API_KEY=your_ollama_api_key_here\nexport SKIP_CI_INTEGRATION=true\n\n# Add npm global bin to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\nEOF\n\n# Source the profile to make variables available\nsource $HOME/.profile\n\necho \"\u2705 MonsterBox development environment setup complete!\"\necho \"\ud83e\uddea Ready to run tests...\"\necho \"\"\necho \"Next steps:\"\necho \"1. Update API keys in .env file\"\necho \"2. Run 'npm test' to verify installation\"\necho \"3. Run 'npm start' to launch MonsterBox\"\necho \"4. Access web interface at http://localhost:3000\"\n</code></pre>"},{"location":"MonsterBox-Technical-Overview/#setup-script-features","title":"Setup Script Features","text":""},{"location":"MonsterBox-Technical-Overview/#system-dependencies","title":"System Dependencies","text":"<ul> <li>Node.js 20.x: Latest LTS version for optimal performance</li> <li>Python 3: Required for hardware control scripts</li> <li>Build Tools: Essential compilation tools for native modules</li> <li>Audio/Video: FFmpeg, MPG123 for multimedia processing</li> <li>Hardware: I2C tools, V4L utilities for RPI integration</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#development-environment","title":"Development Environment","text":"<ul> <li>Automated Dependency Installation: Both Node.js and Python packages</li> <li>Directory Structure: Creates necessary project directories</li> <li>Environment Configuration: Sets up all required environment variables</li> <li>Profile Integration: Persists settings across sessions</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#security-considerations","title":"Security Considerations","text":"<ul> <li>Placeholder API Keys: Requires manual configuration of actual keys</li> <li>Test Environment: Configured for development/testing by default</li> <li>CI Integration: Includes flags for continuous integration</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#7-remote-agent-task-management-system","title":"7. Remote Agent Task Management System","text":""},{"location":"MonsterBox-Technical-Overview/#current-active-agents","title":"Current Active Agents","text":"<p>The MonsterBox project utilizes Task Master AI v0.16.1 with three specialized remote agents working in parallel:</p>"},{"location":"MonsterBox-Technical-Overview/#remote-agent-1-security-authentication-specialist","title":"\ud83d\udd10 Remote Agent 1: Security &amp; Authentication Specialist","text":"<p>Primary Task: Task 11 - Implement Secure Remote Access System Status: ACTIVE - 4 subtasks in progress - JWT Authentication Architecture Design - Role-Based Access Control (RBAC) Framework - SSH Infrastructure Integration - Multi-Factor Authentication (MFA)</p>"},{"location":"MonsterBox-Technical-Overview/#remote-agent-2-monitoring-logging-specialist","title":"\ud83d\udcca Remote Agent 2: Monitoring &amp; Logging Specialist","text":"<p>Primary Task: Task 4 - Implement MCP Log Collection System Status: ACTIVE - 4 subtasks in progress - MCP Log Collection Protocol Design - Server Log Collection Components - Automated Log Analysis System - Real-time Monitoring Dashboard</p>"},{"location":"MonsterBox-Technical-Overview/#remote-agent-3-testing-quality-assurance-specialist","title":"\ud83e\uddea Remote Agent 3: Testing &amp; Quality Assurance Specialist","text":"<p>Primary Task: Task 15 - Implement Comprehensive Testing Suite Status: ACTIVE - 4 subtasks in progress - Current Test Coverage Analysis - Unit Test Framework Enhancement - Integration Test Suite Implementation - Continuous Integration Pipeline Configuration</p>"},{"location":"MonsterBox-Technical-Overview/#project-progress-metrics","title":"Project Progress Metrics","text":"<ul> <li>Total Tasks: 15</li> <li>Completed: 2 (13.3%)</li> <li>In Progress: 4 (26.7%)</li> <li>Subtask Completion: 42.2% (19/45 completed)</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#8-hardware-configuration","title":"8. Hardware Configuration","text":""},{"location":"MonsterBox-Technical-Overview/#target-systems","title":"Target Systems","text":"<ul> <li>Orlok RPi (192.168.8.120): Operational - Vampire animatronic</li> <li>Coffin RPi (192.168.8.140): Operational - Coffin mechanism</li> <li>Pumpkinhead RPi (192.168.1.101): Offline - Excluded from testing</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#hardware-components","title":"Hardware Components","text":"<ul> <li>GPIO Control: Direct pin manipulation for basic I/O</li> <li>I2C Communication: Sensor and advanced device integration</li> <li>Servo Motors: Precise movement control with PCA9685 support</li> <li>Linear Actuators: Heavy-duty movement mechanisms</li> <li>Audio System: Multi-channel sound playback</li> <li>LED Control: Lighting effects and indicators</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#9-security-features","title":"9. Security Features","text":""},{"location":"MonsterBox-Technical-Overview/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>JWT-based Authentication: Secure token-based access control</li> <li>Role-Based Access Control: Granular permission management</li> <li>Multi-Factor Authentication: Enhanced security for remote access</li> <li>SSH Key Management: Secure inter-system communication</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#network-security","title":"Network Security","text":"<ul> <li>Private Network: MonsterNet WiFi (192.168.8.x range)</li> <li>IP Whitelisting: Restricted access to authorized devices</li> <li>Encrypted Communication: TLS/SSL for all web traffic</li> <li>Audit Logging: Comprehensive activity tracking</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#10-monitoring-observability","title":"10. Monitoring &amp; Observability","text":""},{"location":"MonsterBox-Technical-Overview/#logging-infrastructure","title":"Logging Infrastructure","text":"<ul> <li>Winston Logging: Structured application logs</li> <li>MCP Log Collection: Distributed log aggregation</li> <li>Sematext Integration: External monitoring service</li> <li>Real-time Streaming: Live log monitoring capabilities</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#health-monitoring","title":"Health Monitoring","text":"<ul> <li>System Health Endpoints: <code>/health</code> API for status checks</li> <li>Performance Metrics: CPU, memory, disk usage tracking</li> <li>Service Monitoring: Individual component health checks</li> <li>Alert System: Automated notification for critical issues</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#11-development-workflow","title":"11. Development Workflow","text":""},{"location":"MonsterBox-Technical-Overview/#version-control","title":"Version Control","text":"<ul> <li>Git Repository: GitHub-hosted with automated workflows</li> <li>Branch Strategy: Feature branches with pull request reviews</li> <li>Automated Testing: CI/CD pipeline with comprehensive test suite</li> <li>Documentation: Automated MkDocs deployment</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#code-quality","title":"Code Quality","text":"<ul> <li>ESLint: JavaScript code linting and formatting</li> <li>Mocha/Chai Testing: Unit and integration test coverage</li> <li>Custom Test Reporter: Clean, readable test output</li> <li>Code Coverage: Tracking and enforcement of test coverage</li> </ul>"},{"location":"MonsterBox-Technical-Overview/#deployment","title":"Deployment","text":"<ul> <li>Automated Scripts: Shell and PowerShell deployment automation</li> <li>Environment Management: Separate dev/test/production configurations</li> <li>Remote Deployment: SSH-based deployment to RPi systems</li> <li>Health Checks: Post-deployment verification</li> </ul> <p>This document provides a comprehensive overview of the MonsterBox animatronic control system, including detailed technical specifications, automated setup procedures, and current development status with active remote agent task management.</p>"},{"location":"augment-deployment-checklist/","title":"\ud83d\ude80 Augment Code Deployment Checklist - MonsterBox","text":""},{"location":"augment-deployment-checklist/#pre-deployment-status","title":"\u2705 Pre-Deployment Status","text":"<ul> <li>[x] GitHub repository ready: https://github.com/arwpc/MonsterBox</li> <li>[x] Three feature branches created and pushed</li> <li>[x] Environment variables configured in .env</li> <li>[x] Task Master AI configured and operational</li> <li>[x] Implementation packages prepared</li> <li>[x] Augment Code account created and logged in</li> </ul>"},{"location":"augment-deployment-checklist/#current-step-platform-navigation-repository-connection","title":"\ud83c\udfaf Current Step: Platform Navigation &amp; Repository Connection","text":""},{"location":"augment-deployment-checklist/#what-to-look-for-in-augment-code-interface","title":"What to Look For in Augment Code Interface:","text":"<ol> <li>Main Dashboard/Projects Area</li> <li>Look for \"Dashboard\", \"Projects\", or \"Repositories\" navigation</li> <li> <p>Try URLs: <code>/dashboard</code>, <code>/projects</code>, <code>/repositories</code></p> </li> <li> <p>Repository Connection Options</p> </li> <li>\"Connect Repository\" or \"Add Repository\" button</li> <li>GitHub integration settings</li> <li> <p>Repository import/sync options</p> </li> <li> <p>Agent Management Section</p> </li> <li>\"Agents\", \"Remote Agents\", or \"Workers\" menu</li> <li>Agent deployment or configuration options</li> <li>Project assignment capabilities</li> </ol>"},{"location":"augment-deployment-checklist/#deployment-sequence-once-platform-access-is-established","title":"\ud83d\udccb Deployment Sequence (Once Platform Access is Established)","text":""},{"location":"augment-deployment-checklist/#phase-1-repository-connection","title":"Phase 1: Repository Connection","text":"<ol> <li>Connect GitHub repository: <code>https://github.com/arwpc/MonsterBox</code></li> <li>Configure branch access permissions</li> <li>Verify repository sync and file access</li> </ol>"},{"location":"augment-deployment-checklist/#phase-2-agent-deployment-priority-order","title":"Phase 2: Agent Deployment (Priority Order)","text":""},{"location":"augment-deployment-checklist/#agent-1-security-specialist","title":"\ud83d\udd10 Agent 1: Security Specialist","text":"<ul> <li>Target Branch: <code>feature/secure-remote-access-system</code></li> <li>Package: <code>remote-agent-security-package.md</code></li> <li>Task: Implement JWT Auth + RBAC (Task 11)</li> <li>Priority: HIGH</li> </ul>"},{"location":"augment-deployment-checklist/#agent-2-testing-specialist","title":"\ud83e\uddea Agent 2: Testing Specialist","text":"<ul> <li>Target Branch: <code>feature/comprehensive-testing-suite</code></li> <li>Package: <code>remote-agent-testing-package.md</code></li> <li>Task: Comprehensive Testing Suite (Task 15)</li> <li>Priority: HIGH</li> </ul>"},{"location":"augment-deployment-checklist/#agent-3-mcp-specialist","title":"\ud83d\udcca Agent 3: MCP Specialist","text":"<ul> <li>Target Branch: <code>feature/enhanced-mcp-log-collection</code></li> <li>Package: <code>remote-agent-mcp-package.md</code></li> <li>Task: Enhanced MCP Log Collection (Task 4)</li> <li>Priority: MEDIUM</li> </ul>"},{"location":"augment-deployment-checklist/#phase-3-monitoring-setup","title":"Phase 3: Monitoring Setup","text":"<ol> <li>Configure progress tracking</li> <li>Set up commit monitoring</li> <li>Establish communication channels</li> </ol>"},{"location":"augment-deployment-checklist/#ready-to-deploy-packages","title":"\ud83d\udd27 Ready-to-Deploy Packages","text":""},{"location":"augment-deployment-checklist/#security-agent-package","title":"Security Agent Package","text":"<pre><code>File: remote-agent-security-package.md\nContent: Complete JWT authentication and RBAC implementation\nDependencies: Express.js, existing session middleware\nEnvironment: All JWT_* variables configured in .env\n</code></pre>"},{"location":"augment-deployment-checklist/#testing-agent-package","title":"Testing Agent Package","text":"<pre><code>File: remote-agent-testing-package.md\nContent: Comprehensive test suite with 80%+ coverage\nDependencies: Mocha, Winston, existing test infrastructure\nEnvironment: All TEST_* variables configured in .env\n</code></pre>"},{"location":"augment-deployment-checklist/#mcp-agent-package","title":"MCP Agent Package","text":"<pre><code>File: remote-agent-mcp-package.md  \nContent: Enhanced MCP log collection with real-time monitoring\nDependencies: Existing MCP servers, Sematext integration\nEnvironment: All MCP_* variables configured in .env\n</code></pre>"},{"location":"augment-deployment-checklist/#success-metrics","title":"\ud83d\udcca Success Metrics","text":""},{"location":"augment-deployment-checklist/#week-1-targets","title":"Week 1 Targets:","text":"<ul> <li>[ ] All three agents deployed and active</li> <li>[ ] Initial commits visible on feature branches</li> <li>[ ] Task Master integration confirmed</li> </ul>"},{"location":"augment-deployment-checklist/#week-2-3-targets","title":"Week 2-3 Targets:","text":"<ul> <li>[ ] Core implementations completed</li> <li>[ ] Integration testing passed</li> <li>[ ] Documentation updated</li> </ul>"},{"location":"augment-deployment-checklist/#week-4-targets","title":"Week 4 Targets:","text":"<ul> <li>[ ] Pull requests created and reviewed</li> <li>[ ] Features merged to main branch</li> <li>[ ] Task Master tasks marked complete</li> </ul>"},{"location":"augment-deployment-checklist/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"augment-deployment-checklist/#if-repository-connection-fails","title":"If Repository Connection Fails:","text":"<ol> <li>Check GitHub permissions and access tokens</li> <li>Verify repository visibility (public/private settings)</li> <li>Ensure Augment Code has necessary OAuth permissions</li> </ol>"},{"location":"augment-deployment-checklist/#if-agent-deployment-fails","title":"If Agent Deployment Fails:","text":"<ol> <li>Verify branch exists and is accessible</li> <li>Check package file format and content</li> <li>Confirm environment variables are properly set</li> </ol>"},{"location":"augment-deployment-checklist/#if-progress-monitoring-issues","title":"If Progress Monitoring Issues:","text":"<ol> <li>Check commit history on feature branches</li> <li>Verify Task Master integration</li> <li>Monitor agent status in Augment Code dashboard</li> </ol>"},{"location":"augment-deployment-checklist/#next-actions-required","title":"\ud83d\udcde Next Actions Required","text":"<ol> <li>Navigate to main Augment Code interface</li> <li>Locate repository connection options</li> <li>Connect MonsterBox GitHub repository</li> <li>Deploy first agent (Security Specialist)</li> <li>Monitor initial progress and provide feedback</li> </ol> <p>Status: Ready for platform connection and agent deployment Estimated Time to Complete: 30 minutes setup + 2-3 weeks implementation Expected Outcome: Three parallel remote agents implementing core MonsterBox features</p>"},{"location":"augment-remote-agents-setup/","title":"\ud83d\ude80 Augment Code Remote Agents Setup Guide - MonsterBox","text":""},{"location":"augment-remote-agents-setup/#immediate-action-required","title":"\ud83c\udfaf IMMEDIATE ACTION REQUIRED","text":"<p>All preparation work is complete. Only missing: Augment Code platform connection.</p> <p>To complete setup: 1. Visit https://augmentcode.com and create/login to account 2. Connect GitHub repository: https://github.com/arwpc/MonsterBox 3. Upload the three implementation packages (security, testing, MCP) 4. Deploy remote agents to the three feature branches 5. Monitor progress and provide feedback</p>"},{"location":"augment-remote-agents-setup/#overview","title":"Overview","text":"<p>This guide provides step-by-step instructions for setting up Augment Code cloud-based remote agents to work on your MonsterBox project tasks automatically.</p>"},{"location":"augment-remote-agents-setup/#current-status-ready-for-platform-connection","title":"\ud83d\udccb Current Status: Ready for Platform Connection","text":"<p>\u2705 COMPLETED: All implementation packages and configuration are ready \u274c MISSING: Augment Code platform connection and agent deployment</p> <p>Three comprehensive implementation packages are ready for remote agents:</p>"},{"location":"augment-remote-agents-setup/#1-security-agent-package","title":"1. Security Agent Package \ud83d\udd10","text":"<ul> <li>File: <code>remote-agent-security-package.md</code></li> <li>Task: Implement Secure Remote Access System (Task 11)</li> <li>Priority: HIGH - JWT Auth, RBAC, SSH Integration, MFA</li> <li>Estimated Time: 2-3 weeks</li> <li>Complexity: High (8/10)</li> </ul>"},{"location":"augment-remote-agents-setup/#2-testing-agent-package","title":"2. Testing Agent Package \ud83e\uddea","text":"<ul> <li>File: <code>remote-agent-testing-package.md</code></li> <li>Task: Implement Comprehensive Testing Suite (Task 15)</li> <li>Priority: HIGH - Coverage analysis, CI/CD, framework enhancement</li> <li>Estimated Time: 2-3 weeks</li> <li>Complexity: High (7/10)</li> </ul>"},{"location":"augment-remote-agents-setup/#3-mcp-log-collection-agent-package","title":"3. MCP Log Collection Agent Package \ud83d\udcca","text":"<ul> <li>File: <code>remote-agent-mcp-package.md</code></li> <li>Task: Implement MCP Log Collection System (Task 4)</li> <li>Priority: MEDIUM - Protocol enhancement, real-time monitoring</li> <li>Estimated Time: 2-3 weeks</li> <li>Complexity: High (8/10)</li> </ul>"},{"location":"augment-remote-agents-setup/#step-by-step-setup-process","title":"\ud83c\udfaf Step-by-Step Setup Process","text":""},{"location":"augment-remote-agents-setup/#step-1-prepare-your-repository","title":"Step 1: Prepare Your Repository","text":"<p>First, let's prepare your GitHub repository for remote agent work:</p> <pre><code># Ensure your repo is up to date\ngit pull origin main\n\n# Create feature branches for each agent\ngit checkout -b feature/secure-remote-access-system\ngit push -u origin feature/secure-remote-access-system\ngit checkout main\n\ngit checkout -b feature/comprehensive-testing-suite\ngit push -u origin feature/comprehensive-testing-suite\ngit checkout main\n\ngit checkout -b feature/enhanced-mcp-log-collection\ngit push -u origin feature/enhanced-mcp-log-collection\ngit checkout main\n</code></pre>"},{"location":"augment-remote-agents-setup/#step-2-set-up-augment-code-platform","title":"Step 2: Set Up Augment Code Platform","text":"<p>STATUS: \u26a0\ufe0f INCOMPLETE - This is the missing step</p> <ol> <li>Sign up/Login to Augment Code: Visit https://augmentcode.com</li> <li>Connect your GitHub repository: https://github.com/arwpc/MonsterBox</li> <li>Configure repository access and permissions for the three feature branches</li> <li>Set up your development environment preferences</li> <li>Upload implementation packages to the platform for each agent</li> </ol>"},{"location":"augment-remote-agents-setup/#step-3-configure-environment-variables","title":"Step 3: Configure Environment Variables","text":"<p>Add these to your <code>.env</code> file for the remote agents:</p> <pre><code># JWT Authentication (Security Agent)\nJWT_SECRET=your-super-secret-jwt-key-here-generate-strong-key\nJWT_EXPIRES_IN=24h\nJWT_REFRESH_SECRET=your-refresh-token-secret-generate-different-key\nJWT_REFRESH_EXPIRES_IN=7d\nMFA_ISSUER=MonsterBox\nBCRYPT_ROUNDS=12\n\n# MCP Configuration (MCP Agent)\nMCP_SERVER_PORT=3001\nMCP_LOG_BUFFER_SIZE=1000\nMCP_RECONNECT_INTERVAL=5000\nSEMATEXT_LOGS_TOKEN=d3994e09-bc6e-4090-abe3-4ccaa9037cf4\nALERT_EMAIL_ENABLED=true\nALERT_EMAIL_RECIPIENTS=admin@monsterbox.local\n\n# Testing Configuration (Testing Agent)\nNODE_ENV=test\nTEST_PORT=3001\nTEST_SESSION_SECRET=test-session-secret\nSKIP_HARDWARE_TESTS=true\nSKIP_SSH_TESTS=true\nCOVERAGE_THRESHOLD=80\n</code></pre>"},{"location":"augment-remote-agents-setup/#step-4-hand-off-to-remote-agents","title":"Step 4: Hand Off to Remote Agents","text":""},{"location":"augment-remote-agents-setup/#security-agent-handoff","title":"Security Agent Handoff \ud83d\udd10","text":"<pre><code>Platform: Augment Code\nRepository: https://github.com/arwpc/MonsterBox\nBranch: feature/secure-remote-access-system\nPackage: remote-agent-security-package.md\n\nInstructions:\n\"Implement the complete JWT authentication and RBAC system for MonsterBox as specified in the attached package. Focus on security best practices and integration with existing Express.js infrastructure. Ensure all deliverables are completed with comprehensive testing. This is HIGH PRIORITY.\"\n</code></pre>"},{"location":"augment-remote-agents-setup/#testing-agent-handoff","title":"Testing Agent Handoff \ud83e\uddea","text":"<pre><code>Platform: Augment Code\nRepository: https://github.com/arwpc/MonsterBox\nBranch: feature/comprehensive-testing-suite\nPackage: remote-agent-testing-package.md\n\nInstructions:\n\"Implement comprehensive testing infrastructure with 80%+ coverage as specified. Set up CI/CD pipeline with GitHub Actions. Ensure tests work reliably in both development and CI environments. Handle RPI hardware test exclusions properly. This is HIGH PRIORITY.\"\n</code></pre>"},{"location":"augment-remote-agents-setup/#mcp-agent-handoff","title":"MCP Agent Handoff \ud83d\udcca","text":"<pre><code>Platform: Augment Code\nRepository: https://github.com/arwpc/MonsterBox\nBranch: feature/enhanced-mcp-log-collection\nPackage: remote-agent-mcp-package.md\n\nInstructions:\n\"Enhance the existing MCP log collection system as specified. Maintain compatibility with current Sematext integration while adding real-time monitoring capabilities. Focus on performance and reliability for distributed RPi systems (Orlok and Coffin only).\"\n</code></pre>"},{"location":"augment-remote-agents-setup/#monitoring-progress","title":"\ud83d\udcca Monitoring Progress","text":""},{"location":"augment-remote-agents-setup/#track-implementation-progress","title":"Track Implementation Progress","text":"<pre><code># Check branch status\ngit fetch --all\ngit branch -r\n\n# Monitor commits from remote agents\ngit log --oneline --graph --all\n\n# Check specific branch progress\ngit checkout feature/secure-remote-access-system\ngit log --oneline -10\n\ngit checkout feature/comprehensive-testing-suite\ngit log --oneline -10\n\ngit checkout feature/enhanced-mcp-log-collection\ngit log --oneline -10\n</code></pre>"},{"location":"augment-remote-agents-setup/#update-task-master-as-work-completes","title":"Update Task Master as Work Completes","text":"<pre><code># Update task status as agents complete work\ntask-master set-status --id=11.1 --status=done\ntask-master update-subtask --id=11.1 --prompt=\"Implemented by Augment Code remote agent - JWT architecture complete\"\n\ntask-master set-status --id=15.1 --status=done\ntask-master update-subtask --id=15.1 --prompt=\"Implemented by Augment Code remote agent - Test coverage analysis complete\"\n\ntask-master set-status --id=4.1 --status=done\ntask-master update-subtask --id=4.1 --prompt=\"Implemented by Augment Code remote agent - MCP protocol design complete\"\n</code></pre>"},{"location":"augment-remote-agents-setup/#expected-timeline","title":"\ud83d\udd04 Expected Timeline","text":""},{"location":"augment-remote-agents-setup/#week-1-setup-and-initial-implementation","title":"Week 1: Setup and Initial Implementation","text":"<ul> <li>Configure Augment Code platform and repository access</li> <li>Hand off implementation packages to remote agents</li> <li>Monitor initial progress and provide feedback</li> </ul>"},{"location":"augment-remote-agents-setup/#week-2-3-core-implementation","title":"Week 2-3: Core Implementation","text":"<ul> <li>Security Agent: Implements JWT, RBAC, SSH integration, MFA</li> <li>Testing Agent: Builds comprehensive test suite and CI/CD pipeline</li> <li>MCP Agent: Enhances MCP system with real-time monitoring</li> </ul>"},{"location":"augment-remote-agents-setup/#week-4-integration-and-testing","title":"Week 4: Integration and Testing","text":"<ul> <li>Merge completed features from remote agents</li> <li>Integration testing across all systems</li> <li>Bug fixes and refinements</li> <li>Documentation updates</li> </ul>"},{"location":"augment-remote-agents-setup/#week-5-deployment-and-validation","title":"Week 5: Deployment and Validation","text":"<ul> <li>Deploy to RPi systems (Orlok and Coffin)</li> <li>End-to-end testing with actual hardware</li> <li>Performance validation</li> <li>Task Master completion and documentation</li> </ul>"},{"location":"augment-remote-agents-setup/#success-criteria","title":"\u2705 Success Criteria","text":""},{"location":"augment-remote-agents-setup/#security-agent-success","title":"Security Agent Success","text":"<ul> <li>[ ] JWT authentication system fully functional</li> <li>[ ] RBAC system restricting access appropriately</li> <li>[ ] SSH integration maintains existing functionality</li> <li>[ ] MFA enrollment and verification working</li> <li>[ ] All security tests passing with &gt;90% coverage</li> </ul>"},{"location":"augment-remote-agents-setup/#testing-agent-success","title":"Testing Agent Success","text":"<ul> <li>[ ] Test coverage &gt;80% across all components</li> <li>[ ] CI/CD pipeline running automatically on GitHub Actions</li> <li>[ ] Unit, integration, and e2e tests comprehensive</li> <li>[ ] Performance testing baseline established</li> <li>[ ] Test documentation complete</li> </ul>"},{"location":"augment-remote-agents-setup/#mcp-agent-success","title":"MCP Agent Success","text":"<ul> <li>[ ] Enhanced MCP protocol operational</li> <li>[ ] Real-time log collection from Orlok and Coffin RPi systems</li> <li>[ ] Automated log analysis identifying issues</li> <li>[ ] Monitoring dashboard displaying system health</li> <li>[ ] Integration with existing Sematext preserved</li> </ul>"},{"location":"augment-remote-agents-setup/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"augment-remote-agents-setup/#if-remote-agents-get-stuck","title":"If Remote Agents Get Stuck","text":"<ol> <li>Provide More Context: Add additional documentation or examples</li> <li>Break Down Tasks: Split complex subtasks into smaller pieces</li> <li>Manual Intervention: Complete blocking issues manually</li> <li>Agent Communication: Provide feedback and guidance through the platform</li> </ol>"},{"location":"augment-remote-agents-setup/#integration-issues","title":"Integration Issues","text":"<ol> <li>Merge Conflicts: Resolve conflicts between agent implementations</li> <li>API Compatibility: Ensure all systems work together</li> <li>Performance Issues: Optimize implementations if needed</li> <li>Testing Failures: Debug and fix test issues</li> </ol>"},{"location":"augment-remote-agents-setup/#next-steps","title":"\ud83d\udcde Next Steps","text":"<ol> <li>\u2705 Packages Created: Implementation packages are ready</li> <li>\ud83d\udd04 Set Up Augment Code: Create account and configure repository access</li> <li>\ud83d\ude80 Hand Off Packages: Upload packages and start remote agents</li> <li>\ud83d\udc40 Monitor Progress: Track commits and communicate with agents</li> <li>\ud83d\udd17 Integration: Plan for merging and testing all implementations</li> </ol>"},{"location":"augment-remote-agents-setup/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ul> <li>Start with Security Agent - It's foundational for other systems</li> <li>Monitor Daily - Check progress and provide feedback regularly</li> <li>Test Early - Run integration tests as features are completed</li> <li>Document Changes - Keep track of what agents implement</li> <li>Stay Involved - Provide guidance when agents need clarification</li> </ul> <p>This approach will give you actual code implementation from your Task Master tasks, with Augment Code remote agents doing the heavy lifting while you maintain oversight and integration control!</p>"},{"location":"character_coffin_breaker/","title":"Coffin Breaker \u2014 Cyberpunk Character SheetCoffin Breaker","text":"Description: Our spanish lady has been trapped in the coffin for a thousand years, and now she's breaking out! Hardware Overview: Coffin Sensor (sensor), GPIO: 16 Coffin door (linear-actuator), DIR: 5, PWM: 13 Burning Rose (light), GPIO: 16 Sound List: Coffin Creaking (1729640529230-coffin_door_creaking.mp3) Coffin Background (1729640707787-07 - The Coffin.mp3) Coffin Breathing (1729640735282-11 - Breathing (In Terror).mp3) Welcome to Coralville, Where it's colder than Hell! (1730419782061-Welcome_to_Coralville__Where_i.mp3) I'm stuck in this coffin, please help me out little Iowan (1730419838788-I_m_stuck_in_this_coffin__plea.mp3) Here in Iowa's fertile ground (1730419956496-Here_in_Iowa_s_fertile_ground_.mp3) Welcome to Coralville, Where it's colder than Hell! (1730505246291-Welcome_to_Coralville__Where_i.mp3) I'm stuck in this coffin, please help me out little Iowan (1730505257581-I_m_stuck_in_this_coffin__plea.mp3) Alex's Curse (1730505311236-Alex_s_Curse_Alex_scorned_a_wi.mp3)  Alex scorned a witch's heart, Now frozen deep, worlds apart. Poor Alex lies in Iowa's ground, While tractors make their rumbling sound. A thousand years must Alex wait, Until time unlocks his frozen fate. (1730505326248-_Alex_scorned_a_witch_s_heart_.mp3) In the graveyard (1730505527562-In_the_graveyard_late_at_night.mp3) Help? Is someone out there?  (1730505661219-Help__Is_someone_out_there__Pl.mp3) Background Stormy Weather (1747082672361-converted-rain-thunder.mp3) Notes/Improvements: \u2013"},{"location":"character_orlok/","title":"Orlok \u2014 Cyberpunk Character SheetOrlok","text":"Description: A mysterious nobleman and vampire who lives alone in his ruined castle, who wants to acquire a new property in Germany. He was once a Solomonar who was cursed by the Devil to become a vampire. Hardware Overview: Right Arm of Satan (linear-actuator), DIR: 23, PWM: 12 Left Arm of Manipulation (linear-actuator), DIR: 18, PWM: 13 Hand of Azura (light), GPIO: 26 Eye of Orlok (sensor), GPIO: 16 Elbow (servo), Pin: 3 Forearm (servo), Pin: 3 Head on a Swivel (servo), Pin: 3 Hand Light: 26 Motor1: DIR=18, PWM=13 Motor2: DIR=23, PWM=12 PIR Sensor: 16 LED: 17 Servo: 6 Sound List: Satanas Lucifer (1729639570661-satanas-lucifer.mp3) Speaking in tongues (1729639678184-gibberish words.mp3) My Head Is Spinning (1730416580678-My_Head_Is_Spinning.mp3) Scary Latin (1730421695207-Audite__dulces_pueri_Iovenses_.mp3) Background Stormy Weather (1747082672361-converted-rain-thunder.mp3) Notes/Improvements: \u2013"},{"location":"character_pumpkinhead/","title":"PumpkinHead \u2014 Cyberpunk Character SheetPumpkinHead","text":"Description: The pumpkin patch has been full of the little guys, but who minds them? Pumpkinhead! Hardware Overview: Punkin Motion Detector (sensor), GPIO: 16 Head Light (led), GPIO: 17 Body Move (motor), DIR: 6, PWM: 13 Sound List: Monster Howl (1729640808280-monster-howl-85304.mp3) Monster Snarl (1729640824676-monster-snarl-5-69062.mp3) Big Roar (1729640841292-Roar.mp3) Random Growling Sounds (1729640860311-random-monster-sounds-29328.mp3) Background Stormy Weather (1747082672361-converted-rain-thunder.mp3) Notes/Improvements: \u2013"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#configuration-details","title":"Configuration Details","text":"<ul> <li><code>.env</code> defines environment variables</li> <li>JSON files in <code>data/</code> hold persistent settings</li> <li>Match GPIO/I2C pin numbers to your hardware setup</li> <li>Place custom scripts in <code>scripts/</code> directory</li> </ul>"},{"location":"faq/","title":"FAQ / Troubleshooting","text":""},{"location":"faq/#faq-troubleshooting","title":"FAQ / Troubleshooting","text":"<p>Q: Interface not loading? A: Ensure dependencies are installed and <code>.env</code> is set up.</p> <p>Q: Hardware unresponsive? A: Check GPIO/I2C pin config and wiring.</p> <p>Q: How to add characters or parts? A: Use the web UI.</p> <p>Q: Where are logs? A: Accessible via web UI or in <code>log/</code> dir.</p>"},{"location":"install/","title":"Installation Guide","text":"<p>MonsterBox supports easy setup on a Raspberry Pi 4B. Follow these steps for a fresh install or major redeployment.</p>"},{"location":"install/#1-prepare-your-raspberry-pi-4b","title":"1. Prepare Your Raspberry Pi 4B","text":"<ul> <li>Install the latest Raspberry Pi OS (Lite or Desktop) on your microSD card using the Raspberry Pi Imager.</li> <li>Boot the Pi, connect to your network, and perform initial setup (locale, WiFi, etc.).</li> <li>Ensure your Pi is connected to the Internet.</li> </ul>"},{"location":"install/#2-set-up-github-access","title":"2. Set Up GitHub Access","text":"<ul> <li>Install Git:   <code>bash   sudo apt-get update   sudo apt-get install -y git</code></li> <li>(Optional but recommended) Generate SSH keys and add them to your GitHub account for secure access:   <code>bash   ssh-keygen -t ed25519 -C \"your_email@example.com\"   cat ~/.ssh/id_ed25519.pub   # Copy this key to your GitHub SSH keys</code></li> </ul>"},{"location":"install/#3-download-monsterbox-files","title":"3. Download MonsterBox Files","text":"<ul> <li>Clone the repository:   <code>bash   git clone https://github.com/yourusername/monsterbox.git   cd monsterbox</code></li> </ul>"},{"location":"install/#4-run-the-installation-script","title":"4. Run the Installation Script","text":"<ul> <li>The install script will upgrade your OS, install all system and Python/Node dependencies, configure hardware interfaces, and set permissions:   <code>bash   sudo bash install.sh</code> <p>Note: This may take several minutes. The script will prompt if any errors occur.</p> </li> </ul>"},{"location":"install/#5-set-up-environment-variables","title":"5. Set Up Environment Variables","text":"<ul> <li>Create a <code>.env</code> file in the project root. See <code>.env.example</code> for required variables (e.g., PORT, NODE_ENV, hardware settings).</li> </ul>"},{"location":"install/#6-start-the-application","title":"6. Start the Application","text":"<ul> <li>Launch MonsterBox:   <code>bash   npm start</code></li> <li>Access the web interface at <code>http://&lt;your-pi-ip&gt;:3000</code> from your browser.</li> </ul>"},{"location":"install/#update-guide","title":"Update Guide","text":"<p>Routine updates keep your MonsterBox system and dependencies current without a full OS upgrade.</p>"},{"location":"install/#1-update-monsterbox-files","title":"1. Update MonsterBox Files","text":"<ul> <li>Pull the latest changes from GitHub:   <code>bash   git pull origin main</code></li> </ul>"},{"location":"install/#2-run-the-update-script","title":"2. Run the Update Script","text":"<ul> <li>This updates project dependencies and ensures required services are running:   <code>bash   sudo bash update.sh</code> <p>Note: No OS upgrade is performed. For major upgrades or after long periods, re-run the full install script.</p> </li> </ul> <p>For troubleshooting, see the FAQ or contact the project maintainer.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>MIT License. See <code>LICENSE</code> file for details.</p>"},{"location":"networking/","title":"Networking","text":""},{"location":"networking/#monsterbox-traveling-network","title":"MonsterBox Traveling Network","text":"<p>Private Networks: - <code>MonsterNet5g</code> / <code>MonsterNet2.4g</code> - Password: <code>VampiresSuck2025!</code></p> <p>Animatronic IPs: - Pumpkinhead: <code>192.168.8.200</code> - Coffin: <code>192.168.8.140</code> - Orlok: <code>192.168.8.120</code> - Login: <code>remote</code> / Password: <code>klrklr89!</code></p> <p>SMB File Sharing: - Accessible via Windows Explorer: <code>\\192.168.8.200</code> - Username: <code>remote</code>, Password: <code>klrklr89!</code></p> <p>SSH Access:</p> <pre><code>ssh -l remote 192.168.8.200\n</code></pre> <p>GitHub Repo: https://github.com/arwpc/MonsterBox</p>"},{"location":"remote-agent-mcp-package/","title":"\ud83d\udcca Augment Code Remote Agent Package - MCP Log Collection","text":""},{"location":"remote-agent-mcp-package/#project-context","title":"Project Context","text":"<p>MonsterBox animatronic control system with distributed Raspberry Pi systems. Current MCP (Model Context Protocol) system needs enhancement for comprehensive log collection and real-time monitoring.</p>"},{"location":"remote-agent-mcp-package/#task-assignment-implement-mcp-log-collection-system-task-4","title":"Task Assignment: Implement MCP Log Collection System (Task 4)","text":""},{"location":"remote-agent-mcp-package/#repository-information","title":"Repository Information","text":"<ul> <li>GitHub: https://github.com/arwpc/MonsterBox</li> <li>Branch: Create <code>feature/enhanced-mcp-log-collection</code></li> <li>Current MCP Setup: /mcp-servers/ directory with existing log-collector-server.js</li> <li>Existing Logging: Winston logging in scripts/logger.js</li> </ul>"},{"location":"remote-agent-mcp-package/#current-mcp-infrastructure-analysis","title":"Current MCP Infrastructure Analysis","text":"<ul> <li>Log Collector Server: /mcp-servers/log-collector-server.js</li> <li>Test Scripts: scripts/test-mcp-*.js</li> <li>Sematext Integration: Already configured for Orlok and Coffin RPis</li> <li>Target Systems: </li> <li>Orlok (192.168.8.120) - Active</li> <li>Coffin (192.168.8.140) - Active</li> <li>Pumpkinhead (192.168.1.101) - Excluded from testing</li> </ul>"},{"location":"remote-agent-mcp-package/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"remote-agent-mcp-package/#41-design-mcp-log-collection-protocol-high-priority","title":"4.1: Design MCP Log Collection Protocol \u26a1 HIGH PRIORITY","text":"<p>Status: Ready for implementation Dependencies: None</p> <p>Requirements: - Enhance existing MCP protocol for distributed log collection - Support for multiple log sources (application, system, hardware) - Real-time streaming capabilities - Authentication and security for log transmission - Message format standardization</p> <p>Deliverables: 1. <code>/docs/mcp/protocol-specification.md</code> - Complete protocol documentation 2. <code>/mcp-servers/protocol/</code> - Protocol implementation modules 3. <code>/config/mcp-config.js</code> - Enhanced MCP configuration 4. Protocol message schemas and validation</p>"},{"location":"remote-agent-mcp-package/#42-implement-mcp-server-log-collection-components","title":"4.2: Implement MCP Server Log Collection Components","text":"<p>Status: Ready for implementation Dependencies: 4.1</p> <p>Requirements: - Enhance existing log-collector-server.js - Support for multiple concurrent RPi connections - Log aggregation and buffering capabilities - Integration with existing Sematext agents - Fault tolerance and reconnection logic</p> <p>Deliverables: 1. Enhanced <code>/mcp-servers/log-collector-server.js</code> 2. <code>/mcp-servers/components/logAggregator.js</code> 3. <code>/mcp-servers/components/connectionManager.js</code> 4. <code>/mcp-servers/components/bufferManager.js</code> 5. <code>/services/mcpLogService.js</code> - Integration service</p>"},{"location":"remote-agent-mcp-package/#44-implement-automated-log-analysis-system","title":"4.4: Implement Automated Log Analysis System","text":"<p>Status: Ready for implementation Dependencies: 4.2</p> <p>Requirements: - Pattern recognition for common issues - Automated alerting for critical events - Log correlation across multiple systems - Performance metrics extraction - Integration with existing Winston logging</p> <p>Deliverables: 1. <code>/services/logAnalysisService.js</code> - Core analysis engine 2. <code>/analyzers/</code> - Directory with specific log analyzers 3. <code>/config/analysis-rules.json</code> - Configurable analysis rules 4. <code>/routes/analysisRoutes.js</code> - API endpoints for analysis results 5. Alert system integration</p>"},{"location":"remote-agent-mcp-package/#45-create-real-time-monitoring-dashboard","title":"4.5: Create Real-time Monitoring Dashboard","text":"<p>Status: Ready for implementation Dependencies: 4.2, 4.4</p> <p>Requirements: - Web-based dashboard for real-time log monitoring - Integration with existing EJS templating system - Customizable alerts and notifications - System health visualization - Multi-system view for all RPi systems</p> <p>Deliverables: 1. <code>/views/monitoring/</code> - Dashboard EJS templates 2. <code>/public/js/monitoring-dashboard.js</code> - Frontend JavaScript 3. <code>/public/css/monitoring-dashboard.css</code> - Dashboard styling 4. <code>/routes/monitoringRoutes.js</code> - Dashboard API endpoints 5. WebSocket integration for real-time updates</p>"},{"location":"remote-agent-mcp-package/#technical-implementation-details","title":"Technical Implementation Details","text":""},{"location":"remote-agent-mcp-package/#technology-stack","title":"Technology Stack","text":"<ul> <li>MCP Framework: @modelcontextprotocol/sdk v1.12.1</li> <li>FastMCP: fastmcp v1.27.7 for server framework</li> <li>WebSocket: ws v8.14.2 for real-time communication</li> <li>Winston: v3.11.0 for logging integration</li> <li>Axios: v1.7.7 for HTTP client functionality</li> </ul>"},{"location":"remote-agent-mcp-package/#dependencies-to-add","title":"Dependencies to Add","text":"<pre><code>{\n  \"@modelcontextprotocol/sdk\": \"^1.12.1\",\n  \"fastmcp\": \"^1.27.7\",\n  \"socket.io\": \"^4.7.2\",\n  \"moment\": \"^2.29.4\",\n  \"lodash\": \"^4.17.21\",\n  \"node-cron\": \"^3.0.2\"\n}\n</code></pre>"},{"location":"remote-agent-mcp-package/#environment-variables-required","title":"Environment Variables Required","text":"<pre><code>MCP_SERVER_PORT=3001\nMCP_LOG_BUFFER_SIZE=1000\nMCP_RECONNECT_INTERVAL=5000\nSEMATEXT_LOGS_TOKEN=d3994e09-bc6e-4090-abe3-4ccaa9037cf4\nALERT_EMAIL_ENABLED=true\nALERT_EMAIL_RECIPIENTS=admin@monsterbox.local\n</code></pre>"},{"location":"remote-agent-mcp-package/#file-structure-to-createmodify","title":"File Structure to Create/Modify","text":"<pre><code>/mcp-servers/\n  \u251c\u2500\u2500 log-collector-server.js (enhance existing)\n  \u251c\u2500\u2500 protocol/\n  \u2502   \u251c\u2500\u2500 messageTypes.js (new)\n  \u2502   \u251c\u2500\u2500 authentication.js (new)\n  \u2502   \u2514\u2500\u2500 validation.js (new)\n  \u2514\u2500\u2500 components/\n      \u251c\u2500\u2500 logAggregator.js (new)\n      \u251c\u2500\u2500 connectionManager.js (new)\n      \u2514\u2500\u2500 bufferManager.js (new)\n\n/services/\n  \u251c\u2500\u2500 mcpLogService.js (new)\n  \u251c\u2500\u2500 logAnalysisService.js (new)\n  \u2514\u2500\u2500 alertService.js (new)\n\n/analyzers/\n  \u251c\u2500\u2500 errorAnalyzer.js (new)\n  \u251c\u2500\u2500 performanceAnalyzer.js (new)\n  \u251c\u2500\u2500 securityAnalyzer.js (new)\n  \u2514\u2500\u2500 hardwareAnalyzer.js (new)\n\n/routes/\n  \u251c\u2500\u2500 monitoringRoutes.js (new)\n  \u2514\u2500\u2500 analysisRoutes.js (new)\n\n/views/monitoring/\n  \u251c\u2500\u2500 dashboard.ejs (new)\n  \u251c\u2500\u2500 logs.ejs (new)\n  \u251c\u2500\u2500 alerts.ejs (new)\n  \u2514\u2500\u2500 system-health.ejs (new)\n\n/public/\n  \u251c\u2500\u2500 js/monitoring-dashboard.js (new)\n  \u251c\u2500\u2500 css/monitoring-dashboard.css (new)\n  \u2514\u2500\u2500 js/log-viewer.js (new)\n\n/config/\n  \u251c\u2500\u2500 mcp-config.js (new)\n  \u251c\u2500\u2500 analysis-rules.json (new)\n  \u2514\u2500\u2500 alert-config.json (new)\n\n/docs/mcp/\n  \u251c\u2500\u2500 protocol-specification.md (new)\n  \u251c\u2500\u2500 log-analysis-guide.md (new)\n  \u2514\u2500\u2500 dashboard-user-guide.md (new)\n\n/tests/mcp/\n  \u251c\u2500\u2500 protocol.test.js (new)\n  \u251c\u2500\u2500 log-collection.test.js (new)\n  \u251c\u2500\u2500 analysis.test.js (new)\n  \u2514\u2500\u2500 dashboard.test.js (new)\n</code></pre>"},{"location":"remote-agent-mcp-package/#integration-with-existing-systems","title":"Integration with Existing Systems","text":""},{"location":"remote-agent-mcp-package/#sematext-integration","title":"Sematext Integration","text":"<ul> <li>Maintain existing st-agent functionality on RPi systems</li> <li>Enhance with additional log collection capabilities</li> <li>Preserve existing metrics collection (token: d3994e09-bc6e-4090-abe3-4ccaa9037cf4)</li> </ul>"},{"location":"remote-agent-mcp-package/#winston-logging-enhancement","title":"Winston Logging Enhancement","text":"<ul> <li>Extend scripts/logger.js with MCP integration</li> <li>Add structured logging for better analysis</li> <li>Maintain existing log file formats</li> </ul>"},{"location":"remote-agent-mcp-package/#mcp-remote-capabilities","title":"MCP Remote Capabilities","text":"<ul> <li>Integrate with existing remote command execution</li> <li>Enhance docs/MCP-REMOTE-CAPABILITIES.md</li> <li>Maintain compatibility with current SSH-based operations</li> </ul>"},{"location":"remote-agent-mcp-package/#performance-requirements","title":"Performance Requirements","text":"<ul> <li>Handle 1000+ log messages per minute per RPi</li> <li>Real-time dashboard updates within 1 second</li> <li>Log analysis processing within 5 seconds</li> <li>99.9% uptime for log collection service</li> <li>Efficient memory usage with configurable buffering</li> </ul>"},{"location":"remote-agent-mcp-package/#security-requirements","title":"Security Requirements","text":"<ul> <li>Secure authentication for MCP connections</li> <li>Encrypted log transmission</li> <li>Access control for monitoring dashboard</li> <li>Rate limiting for log collection endpoints</li> </ul>"},{"location":"remote-agent-mcp-package/#success-criteria","title":"Success Criteria","text":"<ol> <li>\u2705 Enhanced MCP protocol supporting real-time log streaming</li> <li>\u2705 Robust log collection from Orlok and Coffin RPi systems</li> <li>\u2705 Automated analysis identifying patterns and issues</li> <li>\u2705 Real-time monitoring dashboard with customizable alerts</li> <li>\u2705 Integration with existing Sematext and Winston logging</li> <li>\u2705 Comprehensive test coverage for all MCP components</li> <li>\u2705 Documentation updated and user-friendly</li> <li>\u2705 No disruption to existing animatronic control functionality</li> </ol>"},{"location":"remote-agent-mcp-package/#git-workflow","title":"Git Workflow","text":"<ol> <li>Create feature branch: <code>feature/enhanced-mcp-log-collection</code></li> <li>Implement each subtask with detailed commits</li> <li>Reference Task Master IDs in commit messages</li> <li>Comprehensive testing before pull request</li> <li>Update existing documentation and create new guides</li> </ol>"},{"location":"remote-agent-mcp-package/#notes-for-remote-agent","title":"Notes for Remote Agent","text":"<ul> <li>Preserve existing MCP functionality while enhancing capabilities</li> <li>Consider network reliability between development workstation and RPi systems</li> <li>Ensure log collection doesn't impact animatronic performance</li> <li>Design for scalability to support additional RPi systems in the future</li> <li>Use existing MonsterBox code style and conventions</li> <li>Integrate with existing Winston logging for all MCP events</li> <li>Test only with active systems (Orlok and Coffin), exclude Pumpkinhead</li> </ul>"},{"location":"remote-agent-security-package/","title":"\ud83d\udd10 Augment Code Remote Agent Package - Security System","text":""},{"location":"remote-agent-security-package/#project-context","title":"Project Context","text":"<p>MonsterBox animatronic control system with distributed Raspberry Pi systems (Orlok, Coffin, Pumpkinhead). Current system uses Express.js with EJS templating and JSON file storage.</p>"},{"location":"remote-agent-security-package/#task-assignment-implement-secure-remote-access-system-task-11","title":"Task Assignment: Implement Secure Remote Access System (Task 11)","text":""},{"location":"remote-agent-security-package/#repository-information","title":"Repository Information","text":"<ul> <li>GitHub: https://github.com/arwpc/MonsterBox</li> <li>Branch: Create <code>feature/secure-remote-access-system</code></li> <li>Project Root: C:\\Users\\arwpe\\CodeBase\\MonsterBox-1</li> <li>Technology Stack: Node.js 18+, Express 4.21.1, EJS 3.1.9</li> </ul>"},{"location":"remote-agent-security-package/#current-architecture-analysis","title":"Current Architecture Analysis","text":"<ul> <li>Main App: app.js (Express server with session middleware)</li> <li>Routes: 17 route files in /routes/ directory</li> <li>Controllers: 7 controllers in /controllers/ directory</li> <li>Services: 5 services in /services/ directory</li> <li>Configuration: JSON files in /data/ directory</li> <li>Existing Auth: express-session middleware only</li> </ul>"},{"location":"remote-agent-security-package/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"remote-agent-security-package/#111-jwt-authentication-architecture-high-priority","title":"11.1: JWT Authentication Architecture \u26a1 HIGH PRIORITY","text":"<p>Status: Ready for implementation Dependencies: None</p> <p>Requirements: - Implement JWT-based authentication using jsonwebtoken v9.0.0 - Support for MonsterBox's three RPi systems:   - Orlok (192.168.8.120)   - Coffin (192.168.8.140)    - Pumpkinhead (192.168.1.101) - Integration with existing express-session middleware - Secure token storage and rotation mechanisms</p> <p>Deliverables: 1. <code>/middleware/auth.js</code> - JWT middleware implementation 2. <code>/config/jwt-config.js</code> - JWT configuration module 3. <code>/services/authService.js</code> - Authentication service 4. <code>/routes/authRoutes.js</code> - Authentication endpoints 5. Update app.js with JWT middleware integration</p>"},{"location":"remote-agent-security-package/#112-role-based-access-control-rbac-framework","title":"11.2: Role-Based Access Control (RBAC) Framework","text":"<p>Status: Ready for implementation Dependencies: 11.1</p> <p>Requirements: - Create flexible RBAC system with roles: admin, operator, viewer, maintenance - Permission-based access to animatronic systems - Integration with existing route structure - Granular control over animatronic functions</p> <p>Deliverables: 1. <code>/middleware/rbac.js</code> - RBAC middleware 2. <code>/models/roles.js</code> - Role definitions and permissions 3. <code>/services/authorizationService.js</code> - Authorization logic 4. <code>/data/roles.json</code> - Default role configurations 5. Update all existing routes with RBAC decorators</p>"},{"location":"remote-agent-security-package/#113-ssh-integration-with-jwt-authentication","title":"11.3: SSH Integration with JWT Authentication","text":"<p>Status: Ready for implementation Dependencies: 11.1</p> <p>Requirements: - Secure SSH credential management using JWT tokens - Integration with existing SSH functionality in scripts/ - Support for character-specific SSH credentials from JSON files - Maintain compatibility with existing MCP remote capabilities</p> <p>Deliverables: 1. <code>/services/sshAuthService.js</code> - SSH authentication service 2. <code>/middleware/sshAuth.js</code> - SSH authentication middleware 3. Update existing SSH scripts for JWT integration 4. Integration with MCP remote command execution</p>"},{"location":"remote-agent-security-package/#115-multi-factor-authentication-mfa","title":"11.5: Multi-Factor Authentication (MFA)","text":"<p>Status: Ready for implementation Dependencies: 11.1</p> <p>Requirements: - Time-based one-time passwords (TOTP) support using speakeasy - Email verification options - Recovery mechanisms for lost devices - User-friendly enrollment and verification flows</p> <p>Deliverables: 1. <code>/services/mfaService.js</code> - MFA service implementation 2. <code>/routes/mfaRoutes.js</code> - MFA API endpoints 3. <code>/views/mfa/</code> - MFA enrollment and verification views 4. <code>/public/js/mfa.js</code> - Frontend MFA functionality</p>"},{"location":"remote-agent-security-package/#technical-implementation-details","title":"Technical Implementation Details","text":""},{"location":"remote-agent-security-package/#dependencies-to-add","title":"Dependencies to Add","text":"<pre><code>{\n  \"jsonwebtoken\": \"^9.0.0\",\n  \"bcrypt\": \"^5.1.0\",\n  \"speakeasy\": \"^2.0.0\",\n  \"qrcode\": \"^1.5.3\",\n  \"express-rate-limit\": \"^6.7.0\",\n  \"helmet\": \"^6.1.5\"\n}\n</code></pre>"},{"location":"remote-agent-security-package/#environment-variables-required","title":"Environment Variables Required","text":"<pre><code>JWT_SECRET=your-super-secret-jwt-key-here\nJWT_EXPIRES_IN=24h\nJWT_REFRESH_SECRET=your-refresh-token-secret\nJWT_REFRESH_EXPIRES_IN=7d\nMFA_ISSUER=MonsterBox\nBCRYPT_ROUNDS=12\n</code></pre>"},{"location":"remote-agent-security-package/#file-structure-to-create","title":"File Structure to Create","text":"<pre><code>/middleware/\n  \u251c\u2500\u2500 auth.js (new)\n  \u251c\u2500\u2500 rbac.js (new)\n  \u2514\u2500\u2500 sshAuth.js (new)\n\n/services/\n  \u251c\u2500\u2500 authService.js (new)\n  \u251c\u2500\u2500 authorizationService.js (new)\n  \u251c\u2500\u2500 mfaService.js (new)\n  \u2514\u2500\u2500 sshAuthService.js (new)\n\n/routes/\n  \u251c\u2500\u2500 authRoutes.js (new)\n  \u251c\u2500\u2500 mfaRoutes.js (new)\n  \u2514\u2500\u2500 [update existing routes with RBAC]\n\n/views/\n  \u251c\u2500\u2500 auth/ (new directory)\n  \u2502   \u251c\u2500\u2500 login.ejs\n  \u2502   \u251c\u2500\u2500 register.ejs\n  \u2502   \u2514\u2500\u2500 profile.ejs\n  \u2514\u2500\u2500 mfa/ (new directory)\n      \u251c\u2500\u2500 setup.ejs\n      \u251c\u2500\u2500 verify.ejs\n      \u2514\u2500\u2500 recovery.ejs\n\n/config/\n  \u251c\u2500\u2500 jwt-config.js (new)\n  \u2514\u2500\u2500 auth-config.js (new)\n\n/data/\n  \u251c\u2500\u2500 roles.json (new)\n  \u2514\u2500\u2500 permissions.json (new)\n</code></pre>"},{"location":"remote-agent-security-package/#integration-points","title":"Integration Points","text":"<ul> <li>Maintain compatibility with existing express-session</li> <li>Integrate with Winston logging system (scripts/logger.js)</li> <li>Support existing character JSON configuration format</li> <li>Work with current MCP log collection system</li> <li>Preserve existing SSH functionality in scripts/</li> </ul>"},{"location":"remote-agent-security-package/#security-requirements","title":"Security Requirements","text":"<ul> <li>Use RS256 algorithm for JWT signing</li> <li>Implement secure password hashing with bcrypt</li> <li>Follow OWASP security guidelines</li> <li>Include rate limiting for authentication endpoints</li> <li>Implement proper CORS policies</li> <li>Use helmet for security headers</li> </ul>"},{"location":"remote-agent-security-package/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Unit tests for all authentication functions</li> <li>Integration tests for RBAC middleware</li> <li>Security tests for JWT token validation</li> <li>End-to-end tests for complete authentication flows</li> <li>Test files should be created in /tests/auth/ directory</li> </ul>"},{"location":"remote-agent-security-package/#success-criteria","title":"Success Criteria","text":"<ol> <li>\u2705 JWT authentication system fully functional</li> <li>\u2705 RBAC system properly restricting access based on roles</li> <li>\u2705 SSH integration maintains existing functionality while adding security</li> <li>\u2705 MFA enrollment and verification working smoothly</li> <li>\u2705 All tests passing with &gt;90% coverage</li> <li>\u2705 No breaking changes to existing MonsterBox functionality</li> <li>\u2705 Comprehensive documentation and user guides</li> </ol>"},{"location":"remote-agent-security-package/#git-workflow","title":"Git Workflow","text":"<ol> <li>Create feature branch: <code>feature/secure-remote-access-system</code></li> <li>Implement each subtask in separate commits</li> <li>Include comprehensive commit messages referencing Task Master IDs</li> <li>Create pull request with detailed description</li> <li>Ensure all tests pass before merging</li> </ol>"},{"location":"remote-agent-security-package/#notes-for-remote-agent","title":"Notes for Remote Agent","text":"<ul> <li>Maintain backward compatibility with existing MonsterBox features</li> <li>Consider the distributed nature of the RPi systems</li> <li>Ensure security measures don't interfere with real-time animatronic control</li> <li>Document any changes to existing APIs or configurations</li> <li>Use existing MonsterBox code style and conventions</li> <li>Integrate with existing Winston logging for all security events</li> </ul>"},{"location":"remote-agent-testing-package/","title":"\ud83e\uddea Augment Code Remote Agent Package - Testing Suite","text":""},{"location":"remote-agent-testing-package/#project-context","title":"Project Context","text":"<p>MonsterBox animatronic control system requires comprehensive testing enhancement. Current test suite uses Mocha/Chai but needs expansion for better coverage and CI/CD integration.</p>"},{"location":"remote-agent-testing-package/#task-assignment-implement-comprehensive-testing-suite-task-15","title":"Task Assignment: Implement Comprehensive Testing Suite (Task 15)","text":""},{"location":"remote-agent-testing-package/#repository-information","title":"Repository Information","text":"<ul> <li>GitHub: https://github.com/arwpc/MonsterBox</li> <li>Branch: Create <code>feature/comprehensive-testing-suite</code></li> <li>Current Testing: /tests/ directory with Mocha/Chai setup</li> <li>Test Runner: Mocha v10.7.3, Chai v4.5.0, Chai-HTTP v4.3.0</li> </ul>"},{"location":"remote-agent-testing-package/#current-test-infrastructure-analysis","title":"Current Test Infrastructure Analysis","text":"<ul> <li>Test Directory: /tests/ with existing test files</li> <li>Existing Tests: characterRoutes.test.js, partRoutes.test.js, sceneRoutes.test.js</li> <li>Test Reporter: Custom clean output formatting in cleanReporter.js</li> <li>Environment: cross-env v7.0.3 for environment management</li> <li>Hardware Tests: gpio-hardware.test.js (expected to fail on non-RPI environments)</li> </ul>"},{"location":"remote-agent-testing-package/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"remote-agent-testing-package/#151-analyze-current-test-coverage-high-priority","title":"15.1: Analyze Current Test Coverage \u26a1 HIGH PRIORITY","text":"<p>Status: Ready for implementation Dependencies: None</p> <p>Requirements: - Comprehensive analysis of existing test coverage - Generate detailed coverage reports with metrics - Identify gaps in unit, integration, and end-to-end testing - Document recommendations for improvement</p> <p>Deliverables: 1. <code>/scripts/coverage-analysis.js</code> - Automated coverage analysis tool 2. <code>/config/coverage-config.js</code> - Coverage configuration 3. <code>/reports/test-coverage-analysis.md</code> - Comprehensive coverage report 4. Coverage metrics dashboard integration 5. Test gap identification and prioritization</p>"},{"location":"remote-agent-testing-package/#152-enhance-unit-test-framework","title":"15.2: Enhance Unit Test Framework","text":"<p>Status: Ready for implementation Dependencies: 15.1</p> <p>Requirements: - Improve existing Mocha/Chai setup - Add better mocking capabilities for hardware components - Enhance test utilities and helpers - Implement test data factories - Add snapshot testing capabilities</p> <p>Deliverables: 1. Enhanced <code>/tests/helpers/</code> - Test utility functions 2. <code>/tests/mocks/</code> - Mock implementations for hardware/external services 3. <code>/tests/factories/</code> - Test data factories 4. Enhanced <code>/tests/setupTests.js</code> - Improved test setup and teardown 5. Improved test configuration and reporting</p>"},{"location":"remote-agent-testing-package/#153-implement-integration-test-suite","title":"15.3: Implement Integration Test Suite","text":"<p>Status: Ready for implementation Dependencies: 15.1, 15.2</p> <p>Requirements: - Test component interactions and API endpoints - Database integration testing (JSON file operations) - Service layer integration testing - Middleware integration testing - Cross-component communication testing</p> <p>Deliverables: 1. <code>/tests/integration/</code> - Complete integration test suite 2. <code>/tests/integration/api/</code> - API endpoint integration tests 3. <code>/tests/integration/services/</code> - Service integration tests 4. <code>/tests/integration/middleware/</code> - Middleware integration tests 5. Integration test configuration and utilities</p>"},{"location":"remote-agent-testing-package/#155-configure-continuous-integration-pipeline","title":"15.5: Configure Continuous Integration Pipeline","text":"<p>Status: Ready for implementation Dependencies: 15.2, 15.3, 15.4</p> <p>Requirements: - GitHub Actions CI/CD pipeline configuration - Automated testing on pull requests and commits - Test result reporting and notifications - Coverage reporting integration - Multi-environment testing support</p> <p>Deliverables: 1. <code>/.github/workflows/ci.yml</code> - Main CI pipeline 2. <code>/.github/workflows/test-coverage.yml</code> - Coverage reporting workflow 3. <code>/.github/workflows/integration-tests.yml</code> - Integration test workflow 4. CI configuration documentation 5. Badge integration for README</p>"},{"location":"remote-agent-testing-package/#technical-implementation-details","title":"Technical Implementation Details","text":""},{"location":"remote-agent-testing-package/#technology-stack-enhancement","title":"Technology Stack Enhancement","text":"<ul> <li>Core Framework: Mocha v10.7.3, Chai v4.5.0 (keep existing)</li> <li>Coverage: nyc (Istanbul) for code coverage</li> <li>Mocking: Sinon.js for advanced mocking</li> <li>API Testing: Supertest for HTTP endpoint testing</li> <li>Performance Testing: Artillery for load testing</li> </ul>"},{"location":"remote-agent-testing-package/#dependencies-to-add","title":"Dependencies to Add","text":"<pre><code>{\n  \"nyc\": \"^15.1.0\",\n  \"sinon\": \"^15.2.0\",\n  \"supertest\": \"^6.3.3\",\n  \"artillery\": \"^2.0.0\",\n  \"mock-fs\": \"^5.2.0\",\n  \"nock\": \"^13.3.1\"\n}\n</code></pre>"},{"location":"remote-agent-testing-package/#packagejson-scripts-to-addupdate","title":"Package.json Scripts to Add/Update","text":"<pre><code>{\n  \"scripts\": {\n    \"test:unit\": \"cross-env NODE_ENV=test mocha tests/unit/**/*.test.js\",\n    \"test:integration\": \"cross-env NODE_ENV=test mocha tests/integration/**/*.test.js\",\n    \"test:e2e\": \"cross-env NODE_ENV=test mocha tests/e2e/**/*.test.js\",\n    \"test:coverage\": \"nyc npm run test\",\n    \"test:watch\": \"npm run test -- --watch\",\n    \"test:performance\": \"artillery run tests/performance/load-test.yml\",\n    \"coverage:report\": \"nyc report --reporter=html --reporter=text\",\n    \"coverage:check\": \"nyc check-coverage --lines 80 --functions 80 --branches 80\"\n  }\n}\n</code></pre>"},{"location":"remote-agent-testing-package/#file-structure-to-create","title":"File Structure to Create","text":"<pre><code>/tests/\n  \u251c\u2500\u2500 unit/\n  \u2502   \u251c\u2500\u2500 controllers/ (new)\n  \u2502   \u251c\u2500\u2500 services/ (new)\n  \u2502   \u251c\u2500\u2500 middleware/ (new)\n  \u2502   \u2514\u2500\u2500 utils/ (new)\n  \u251c\u2500\u2500 integration/\n  \u2502   \u251c\u2500\u2500 api/ (new)\n  \u2502   \u251c\u2500\u2500 services/ (new)\n  \u2502   \u251c\u2500\u2500 middleware/ (new)\n  \u2502   \u2514\u2500\u2500 database/ (new)\n  \u251c\u2500\u2500 e2e/\n  \u2502   \u251c\u2500\u2500 user-workflows/ (new)\n  \u2502   \u251c\u2500\u2500 scene-management/ (new)\n  \u2502   \u2514\u2500\u2500 system-health/ (new)\n  \u251c\u2500\u2500 helpers/\n  \u2502   \u251c\u2500\u2500 testUtils.js (enhance existing)\n  \u2502   \u251c\u2500\u2500 mockData.js (new)\n  \u2502   \u2514\u2500\u2500 testServer.js (new)\n  \u251c\u2500\u2500 mocks/\n  \u2502   \u251c\u2500\u2500 hardwareMocks.js (new)\n  \u2502   \u251c\u2500\u2500 sshMocks.js (new)\n  \u2502   \u251c\u2500\u2500 mcpMocks.js (new)\n  \u2502   \u2514\u2500\u2500 apiMocks.js (new)\n  \u251c\u2500\u2500 factories/\n  \u2502   \u251c\u2500\u2500 characterFactory.js (new)\n  \u2502   \u251c\u2500\u2500 sceneFactory.js (new)\n  \u2502   \u2514\u2500\u2500 partFactory.js (new)\n  \u2514\u2500\u2500 performance/\n      \u2514\u2500\u2500 load-test.yml (new)\n\n/.github/workflows/\n  \u251c\u2500\u2500 ci.yml (new)\n  \u251c\u2500\u2500 test-coverage.yml (new)\n  \u2514\u2500\u2500 integration-tests.yml (new)\n\n/scripts/\n  \u251c\u2500\u2500 test-runner.js (new)\n  \u251c\u2500\u2500 coverage-analysis.js (new)\n  \u2514\u2500\u2500 test-data-setup.js (new)\n\n/config/\n  \u251c\u2500\u2500 test-config.js (new)\n  \u251c\u2500\u2500 coverage-config.js (new)\n  \u2514\u2500\u2500 ci-config.js (new)\n\n/reports/\n  \u251c\u2500\u2500 test-coverage-analysis.md (new)\n  \u2514\u2500\u2500 performance-benchmarks.md (new)\n</code></pre>"},{"location":"remote-agent-testing-package/#environment-variables-for-testing","title":"Environment Variables for Testing","text":"<pre><code>NODE_ENV=test\nTEST_PORT=3001\nTEST_SESSION_SECRET=test-session-secret\nSKIP_HARDWARE_TESTS=true\nSKIP_SSH_TESTS=true\nSKIP_CI_INTEGRATION=true\nTEST_TIMEOUT=10000\nCOVERAGE_THRESHOLD=80\n</code></pre>"},{"location":"remote-agent-testing-package/#special-considerations","title":"Special Considerations","text":""},{"location":"remote-agent-testing-package/#hardware-test-handling","title":"Hardware Test Handling","text":"<ul> <li>Mock GPIO and I2C operations for non-RPI environments</li> <li>Skip hardware-specific tests in CI using environment flags</li> <li>Preserve existing gpio-hardware.test.js behavior</li> <li>Provide clear documentation for running hardware tests on actual RPi systems</li> </ul>"},{"location":"remote-agent-testing-package/#ssh-and-network-testing","title":"SSH and Network Testing","text":"<ul> <li>Mock SSH connections for security and reliability</li> <li>Test SSH functionality without requiring actual remote connections</li> <li>Provide integration tests that can run against real RPi systems when available</li> </ul>"},{"location":"remote-agent-testing-package/#performance-testing","title":"Performance Testing","text":"<ul> <li>Establish baseline performance metrics</li> <li>Test critical paths like scene execution and real-time control</li> <li>Monitor for performance regressions in CI</li> </ul>"},{"location":"remote-agent-testing-package/#cicd-pipeline-features","title":"CI/CD Pipeline Features","text":"<ul> <li>Automated Testing: Run on every push and pull request</li> <li>Coverage Reporting: Generate and publish coverage reports</li> <li>Performance Testing: Run load tests on staging environment</li> <li>Multi-Environment: Test on Node.js 18, 20, and latest</li> <li>Hardware Test Exclusion: Skip RPI-specific tests in CI</li> <li>Parallel Execution: Run test suites in parallel for speed</li> </ul>"},{"location":"remote-agent-testing-package/#success-criteria","title":"Success Criteria","text":"<ol> <li>\u2705 Coverage: Achieve &gt;80% code coverage across all test types</li> <li>\u2705 CI/CD: Fully automated testing pipeline with GitHub Actions</li> <li>\u2705 Test Quality: Comprehensive unit, integration, and e2e tests</li> <li>\u2705 Performance: Load testing for critical endpoints</li> <li>\u2705 Documentation: Complete testing documentation and guides</li> <li>\u2705 Reliability: Stable test suite with minimal flaky tests</li> <li>\u2705 Speed: Test suite completes in under 5 minutes</li> <li>\u2705 Reporting: Clear, actionable test reports and coverage metrics</li> </ol>"},{"location":"remote-agent-testing-package/#git-workflow","title":"Git Workflow","text":"<ol> <li>Create feature branch: <code>feature/comprehensive-testing-suite</code></li> <li>Implement each subtask with focused commits</li> <li>Include test coverage improvements in each commit</li> <li>Reference Task Master IDs in commit messages</li> <li>Ensure all new code includes corresponding tests</li> <li>Update documentation with testing guidelines</li> </ol>"},{"location":"remote-agent-testing-package/#notes-for-remote-agent","title":"Notes for Remote Agent","text":"<ul> <li>Maintain compatibility with existing test structure</li> <li>Ensure tests can run reliably in both development and CI environments</li> <li>Design tests to be maintainable and easy to understand</li> <li>Consider the distributed nature of the MonsterBox system in test design</li> <li>Provide clear guidelines for writing new tests as the system evolves</li> <li>Use existing MonsterBox code style and conventions</li> <li>Integrate with existing Winston logging for test reporting</li> </ul>"},{"location":"secure-remote-access-system/","title":"MonsterBox Secure Remote Access System","text":""},{"location":"secure-remote-access-system/#overview","title":"Overview","text":"<p>The MonsterBox Secure Remote Access System provides JWT-based authentication and role-based access control for secure remote command execution across animatronic systems. This system enables authorized users to safely interact with the Orlok, Coffin, and Pumpkinhead animatronic systems through a secure API gateway.</p>"},{"location":"secure-remote-access-system/#architecture","title":"Architecture","text":""},{"location":"secure-remote-access-system/#core-components","title":"Core Components","text":"<ol> <li>JWT Authentication Service - Handles user authentication and token management</li> <li>RBAC (Role-Based Access Control) - Manages user roles and permissions</li> <li>SSH Authentication Service - Secure command execution with validation</li> <li>API Gateway - Centralized request routing and security enforcement</li> <li>Audit Logging - Comprehensive activity tracking and security monitoring</li> </ol>"},{"location":"secure-remote-access-system/#security-features","title":"Security Features","text":"<ul> <li>JWT-based authentication with refresh tokens</li> <li>Role-based access control with granular permissions</li> <li>SSH command validation and filtering</li> <li>Rate limiting and abuse prevention</li> <li>Comprehensive audit logging</li> <li>Session management integration</li> </ul>"},{"location":"secure-remote-access-system/#user-roles-and-permissions","title":"User Roles and Permissions","text":""},{"location":"secure-remote-access-system/#role-hierarchy","title":"Role Hierarchy","text":"Role Priority Description Permissions Admin 100 Full system access All permissions including user management Maintenance 60 Technical access with SSH view, control, configure, ssh, diagnostics, maintenance Operator 50 Standard operational access view, control, configure Viewer 10 Read-only access view"},{"location":"secure-remote-access-system/#specialized-roles","title":"Specialized Roles","text":"<ul> <li>orlok_operator - Limited to Orlok animatronic operations</li> <li>coffin_operator - Limited to Coffin animatronic operations  </li> <li>pumpkinhead_operator - Limited to Pumpkinhead animatronic operations</li> </ul>"},{"location":"secure-remote-access-system/#permission-types","title":"Permission Types","text":"Permission Category Description view basic Read-only access to system status control operational Control animatronic movements configure operational Modify system configurations ssh technical Remote shell access admin administrative Full administrative privileges user_management administrative Manage user accounts system_management administrative System-wide settings audit_access security Access to audit logs security_management security Security settings management diagnostics technical System diagnostics maintenance technical Maintenance functions"},{"location":"secure-remote-access-system/#api-endpoints","title":"API Endpoints","text":""},{"location":"secure-remote-access-system/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"secure-remote-access-system/#post-authlogin","title":"POST /auth/login","text":"<p>Authenticate user and receive JWT tokens.</p> <p>Request:</p> <pre><code>{\n  \"username\": \"admin\",\n  \"password\": \"MonsterBox2024!\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"user\": {\n    \"id\": \"admin-001\",\n    \"username\": \"admin\",\n    \"role\": \"admin\",\n    \"animatronicAccess\": [\"orlok\", \"coffin\", \"pumpkinhead\"],\n    \"permissions\": [\"view\", \"control\", \"configure\", \"ssh\", \"admin\"]\n  },\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresIn\": \"8h\"\n}\n</code></pre>"},{"location":"secure-remote-access-system/#post-authlogout","title":"POST /auth/logout","text":"<p>Logout user and invalidate session.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p>"},{"location":"secure-remote-access-system/#post-authrefresh","title":"POST /auth/refresh","text":"<p>Refresh access token using refresh token.</p>"},{"location":"secure-remote-access-system/#get-authme","title":"GET /auth/me","text":"<p>Get current user information.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p>"},{"location":"secure-remote-access-system/#get-authverify","title":"GET /auth/verify","text":"<p>Verify JWT token validity.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p>"},{"location":"secure-remote-access-system/#ssh-command-execution","title":"SSH Command Execution","text":""},{"location":"secure-remote-access-system/#post-sshexecuteanimatronicid","title":"POST /ssh/execute/:animatronicId","text":"<p>Execute SSH command on specific animatronic.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request:</p> <pre><code>{\n  \"command\": \"uptime\",\n  \"timeout\": 30,\n  \"validateCommand\": true\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"command\": \"uptime\",\n  \"stdout\": \"up 5 days, 12:34, load average: 0.15, 0.10, 0.05\",\n  \"stderr\": \"\",\n  \"exitCode\": 0,\n  \"duration\": 245,\n  \"host\": \"192.168.8.120\"\n}\n</code></pre>"},{"location":"secure-remote-access-system/#post-sshtestanimatronicid","title":"POST /ssh/test/:animatronicId","text":"<p>Test SSH connectivity to animatronic.</p>"},{"location":"secure-remote-access-system/#get-sshhistory","title":"GET /ssh/history","text":"<p>Get SSH command history for current user.</p>"},{"location":"secure-remote-access-system/#post-sshbatchanimatronicid","title":"POST /ssh/batch/:animatronicId","text":"<p>Execute multiple SSH commands in sequence.</p>"},{"location":"secure-remote-access-system/#get-sshstatus","title":"GET /ssh/status","text":"<p>Get SSH service status and connectivity information.</p>"},{"location":"secure-remote-access-system/#get-sshcommands","title":"GET /ssh/commands","text":"<p>Get list of allowed SSH commands for current user role.</p>"},{"location":"secure-remote-access-system/#post-sshvalidate","title":"POST /ssh/validate","text":"<p>Validate SSH command without executing it.</p>"},{"location":"secure-remote-access-system/#configuration","title":"Configuration","text":""},{"location":"secure-remote-access-system/#environment-variables","title":"Environment Variables","text":"<pre><code># JWT Configuration\nJWT_SECRET=MonsterBox-JWT-2024-SecureKey-f8e9d7c6b5a4-RemoteAccess-Auth\nJWT_EXPIRES_IN=8h\nJWT_REFRESH_SECRET=MonsterBox-Refresh-2024-SecureKey-a4b5c6d7e8f9-RemoteAccess-Refresh\nJWT_REFRESH_EXPIRES_IN=7d\nBCRYPT_ROUNDS=12\n\n# SSH Credentials\nORLOK_SSH_USER=remote\nORLOK_SSH_PASSWORD=klrklr89!\nCOFFIN_SSH_USER=remote\nCOFFIN_SSH_PASSWORD=klrklr89!\nPUMPKINHEAD_SSH_USER=remote\nPUMPKINHEAD_SSH_PASSWORD=klrklr89!\n</code></pre>"},{"location":"secure-remote-access-system/#default-admin-account","title":"Default Admin Account","text":"<ul> <li>Username: admin</li> <li>Password: MonsterBox2024!</li> <li>Role: admin</li> <li>Access: All animatronics and permissions</li> </ul>"},{"location":"secure-remote-access-system/#security-considerations","title":"Security Considerations","text":""},{"location":"secure-remote-access-system/#authentication-security","title":"Authentication Security","text":"<ol> <li>JWT Tokens - 8-hour expiration with secure refresh mechanism</li> <li>Password Hashing - bcrypt with 12 rounds</li> <li>Session Integration - Compatible with existing Express sessions</li> <li>Rate Limiting - 5 login attempts per 15 minutes</li> </ol>"},{"location":"secure-remote-access-system/#ssh-command-security","title":"SSH Command Security","text":"<ol> <li>Command Validation - Whitelist for non-admin users</li> <li>Dangerous Command Blocking - System-destructive commands blocked</li> <li>Path Traversal Protection - Prevents unauthorized file access</li> <li>Timeout Controls - 30-second default timeout</li> <li>Rate Limiting - 10 commands/minute (30 for admin)</li> </ol>"},{"location":"secure-remote-access-system/#audit-and-monitoring","title":"Audit and Monitoring","text":"<ol> <li>Comprehensive Logging - All authentication and SSH events</li> <li>User Attribution - Full user tracking with IP addresses</li> <li>Tamper-Proof Logs - Immutable audit trail</li> <li>Admin Access - Audit logs accessible via /auth/audit</li> </ol>"},{"location":"secure-remote-access-system/#usage-examples","title":"Usage Examples","text":""},{"location":"secure-remote-access-system/#basic-authentication-flow","title":"Basic Authentication Flow","text":"<pre><code>// 1. Login\nconst loginResponse = await fetch('/auth/login', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    username: 'admin',\n    password: 'MonsterBox2024!'\n  })\n});\n\nconst { accessToken } = await loginResponse.json();\n\n// 2. Execute SSH command\nconst sshResponse = await fetch('/ssh/execute/orlok', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    command: 'uptime'\n  })\n});\n\nconst result = await sshResponse.json();\nconsole.log(result.stdout);\n</code></pre>"},{"location":"secure-remote-access-system/#role-based-access-example","title":"Role-Based Access Example","text":"<pre><code>// Admin user - can execute any safe command\nawait fetch('/ssh/execute/orlok', {\n  method: 'POST',\n  headers: { 'Authorization': `Bearer ${adminToken}` },\n  body: JSON.stringify({ command: 'systemctl status monsterbox' })\n});\n\n// Operator user - limited to allowed commands\nawait fetch('/ssh/execute/orlok', {\n  method: 'POST',\n  headers: { 'Authorization': `Bearer ${operatorToken}` },\n  body: JSON.stringify({ command: 'uptime' })\n});\n</code></pre>"},{"location":"secure-remote-access-system/#troubleshooting","title":"Troubleshooting","text":""},{"location":"secure-remote-access-system/#common-issues","title":"Common Issues","text":"<ol> <li>Authentication Failures</li> <li>Check username/password combination</li> <li>Verify user account exists in /data/auth/users.json</li> <li> <p>Check rate limiting status</p> </li> <li> <p>SSH Command Failures</p> </li> <li>Verify SSH permissions for user role</li> <li>Check animatronic connectivity</li> <li> <p>Validate command against allowed list</p> </li> <li> <p>Token Expiration</p> </li> <li>Use refresh token to get new access token</li> <li>Re-authenticate if refresh token expired</li> </ol>"},{"location":"secure-remote-access-system/#error-codes","title":"Error Codes","text":"Code Description AUTH_REQUIRED Authentication token required INVALID_TOKEN JWT token invalid or expired INSUFFICIENT_PERMISSIONS User lacks required permissions SSH_PERMISSION_DENIED SSH access denied for user role ANIMATRONIC_ACCESS_DENIED No access to specified animatronic COMMAND_BLOCKED SSH command blocked by security policy RATE_LIMIT_EXCEEDED Too many requests"},{"location":"secure-remote-access-system/#maintenance","title":"Maintenance","text":""},{"location":"secure-remote-access-system/#log-management","title":"Log Management","text":"<ul> <li>Audit logs stored in <code>/data/auth/audit.json</code></li> <li>Automatic rotation (last 1000 events)</li> <li>Admin access via <code>/auth/audit</code> endpoint</li> </ul>"},{"location":"secure-remote-access-system/#user-management","title":"User Management","text":"<ul> <li>User accounts in <code>/data/auth/users.json</code></li> <li>Role definitions in <code>/data/auth/roles.json</code></li> <li>Session tracking in <code>/data/auth/sessions.json</code></li> </ul>"},{"location":"secure-remote-access-system/#security-updates","title":"Security Updates","text":"<ol> <li>Regularly rotate JWT secrets</li> <li>Update SSH credentials as needed</li> <li>Review audit logs for suspicious activity</li> <li>Monitor rate limiting effectiveness</li> </ol>"},{"location":"structure/","title":"Directory Structure","text":""},{"location":"structure/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>controllers/</code>: Business logic</li> <li><code>data/</code>: Configuration JSON</li> <li><code>public/</code>: Static assets</li> <li><code>routes/</code>: API and routing</li> <li><code>scripts/</code>: Python/JS scripts</li> <li><code>services/</code>: Core services</li> <li><code>tests/</code>: Automated tests</li> <li><code>views/</code>: EJS web templates</li> </ul>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#usage-instructions","title":"Usage Instructions","text":""},{"location":"usage/#steps","title":"Steps","text":"<ul> <li>Steps are the fundamental actions in MonsterBox. Each Step represents a single operation, such as moving a part, playing a sound, or turning on a light.</li> <li>Steps can be set to run serially (one after another) or concurrently (at the same time as the next step). For example, you can play a sound while a servo moves by marking both steps as concurrent.</li> </ul>"},{"location":"usage/#scenes","title":"Scenes","text":"<ul> <li>Scenes are ordered sequences of Steps. Scenes let you create complex behaviors by arranging Steps in the desired order.</li> <li>Scenes can include Steps that wait for sensor input before proceeding, allowing for interactive or reactive behaviors.</li> <li>Steps within a Scene can be run in sequence or concurrently, enabling synchronized actions.</li> </ul>"},{"location":"usage/#active-mode","title":"Active Mode","text":"<ul> <li>Active Mode allows you to select one or more Scenes to run automatically.</li> <li>In Active Mode, MonsterBox cycles through the selected Scenes with a configurable delay between each Scene. This enables unattended operation or looping performances.</li> <li> <p>Scenes in Active Mode can include sensor waits, so your animatronic can react to the environment before moving to the next Scene.</p> </li> <li> <p>Access the MonsterBox web interface at <code>http://localhost:3000</code> (or your configured port).</p> </li> <li>Select a character and navigate through Characters, Parts, Sounds, Scenes, etc.</li> <li>Trigger scenes, view logs, and control devices in real time.</li> </ul>"},{"location":"usage/#installation-updates","title":"Installation &amp; Updates","text":"<ul> <li>For full installation instructions\u2014including first-time setup, GitHub connection, and running the install script\u2014see install.md.</li> <li>For regular updates (dependencies/services), use the update script:   <code>bash   sudo bash update.sh</code></li> <li>For a major re-deployment or after long periods, use the install script:   <code>bash   sudo bash install.sh</code></li> </ul> <p>Refer to install.md for detailed steps and troubleshooting.</p>"},{"location":"animatronics/","title":"Animatronics Workshop Overview","text":"<p>This section contains guides for working with animatronic characters using the MonsterBox framework. Each subsection provides documentation on setup, hands-on challenges, and integration with AI tools.</p>"},{"location":"animatronics/familiarization/","title":"Familiarization","text":""},{"location":"animatronics/familiarization/#1-familiarization","title":"1. Familiarization","text":""},{"location":"animatronics/familiarization/#hardware","title":"Hardware","text":"<ul> <li>Servos</li> <li>Linear Actuators</li> <li>Camera / Sound / AV</li> </ul>"},{"location":"animatronics/familiarization/#software","title":"Software","text":"<ul> <li>Git Repo</li> <li>RPi4b</li> <li>MonsterBox</li> <li>AI APIs</li> </ul>"},{"location":"animatronics/familiarization/#integration","title":"Integration","text":"<ul> <li>Software Development (Codemium or Windsurf)</li> <li>CI/CD Demonstrations</li> </ul>"},{"location":"animatronics/hands_on/","title":"Hands-On Activities","text":""},{"location":"animatronics/hands_on/#3-hands-on-opportunities","title":"3. Hands-On Opportunities","text":"<ul> <li>Coffin: ChatGPT integration, customizable voices</li> <li>Count Orlok: OpenCV head tracking</li> <li>Pumpkinhead: ElevenLabs TTS echoing</li> <li>BigMouth Skull: ChatterPi (talking + GPT)</li> <li>SmallMouth Skull: ChatterPi (talking + GPT)</li> </ul>"},{"location":"animatronics/presentation/","title":"Final Presentation","text":""},{"location":"animatronics/presentation/#4-presentation-of-monsters","title":"4. Presentation of Monsters","text":"<ul> <li>Possible Contest or Awards</li> <li>Letting GPTs talk to each other</li> <li>Lessons Learned and Suggestions for Improvement</li> </ul>"},{"location":"animatronics/simple_steps/","title":"Simple Steps","text":""},{"location":"animatronics/simple_steps/#2-simple-steps","title":"2. Simple Steps","text":"<p>In MonsterBox, Steps are individual actions that can be performed by an animatronic character. Each Step may involve: - Movement (using linear actuators, servos, motors) - Playing sounds (including ElevenLabs AI voices) - Triggering lights or other effects</p> <p>Steps can be configured to run serially (one after the other) or concurrently (at the same time as the next step). For example, you can have a servo move while a sound plays, or trigger multiple actions together for synchronized effects.</p>"},{"location":"api/API-TESTING-SUMMARY/","title":"\ud83c\udf83 MonsterBox API Key Testing Suite - Complete Setup","text":""},{"location":"api/API-TESTING-SUMMARY/#what-was-created","title":"\u2705 What Was Created","text":""},{"location":"api/API-TESTING-SUMMARY/#comprehensive-test-suite","title":"\ud83e\uddea Comprehensive Test Suite","text":"<ul> <li><code>tests/api-keys.test.js</code> - Full Mocha test suite for all API services</li> <li><code>scripts/test-api-keys.js</code> - Standalone testing script with detailed reporting</li> <li><code>routes/healthRoutes.js</code> - Health check endpoints for production monitoring</li> <li><code>tests/README-API-TESTING.md</code> - Complete testing documentation</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#integration-features","title":"\ud83d\udd27 Integration Features","text":"<ul> <li>Winston Logger Integration - All tests log to your existing logging system</li> <li>Mocha Framework - Uses your current testing setup and reporters</li> <li>Environment Variable Validation - Checks all configuration settings</li> <li>Production Health Checks - Monitor API status in live environment</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#how-to-use","title":"\ud83d\ude80 How to Use","text":""},{"location":"api/API-TESTING-SUMMARY/#quick-test-all-api-keys","title":"Quick Test All API Keys","text":"<pre><code>npm run check-api-keys\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#check-configuration-only","title":"Check Configuration Only","text":"<pre><code>npm run check-config\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#run-with-mocha-reporter","title":"Run with Mocha Reporter","text":"<pre><code>npm run test:api-keys\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#verbose-test-output","title":"Verbose Test Output","text":"<pre><code>npm run test:api-keys-verbose\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#include-in-full-test-suite","title":"Include in Full Test Suite","text":"<pre><code>npm test  # Now includes API key tests\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#what-gets-tested","title":"\ud83d\udcca What Gets Tested","text":""},{"location":"api/API-TESTING-SUMMARY/#active-api-services","title":"\u2705 Active API Services","text":"<ul> <li>Anthropic Claude \u2705 - Your key is configured and tested</li> <li>OpenAI GPT \u2705 - Your key is configured and tested  </li> <li>Google Gemini \u2705 - Your key is configured and tested</li> <li>Replica Studios \u2705 - Your key is configured and tested</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#environment-variables","title":"\ud83d\udd27 Environment Variables","text":"<ul> <li>SESSION_SECRET \u2705 - Secure session key generated</li> <li>NODE_ENV \u2705 - Environment properly configured</li> <li>PORT \u2705 - Server port configured</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#optional-services-ready-for-future-use","title":"\ud83d\udccb Optional Services (Ready for future use)","text":"<ul> <li>Perplexity AI, Mistral AI, xAI, Azure OpenAI, Ollama</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#health-check-endpoints","title":"\ud83c\udf10 Health Check Endpoints","text":"<p>Your MonsterBox now includes health check endpoints:</p>"},{"location":"api/API-TESTING-SUMMARY/#basic-health","title":"Basic Health","text":"<pre><code>GET /health\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#api-key-status","title":"API Key Status","text":"<pre><code>GET /health/api-keys\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#environment-status","title":"Environment Status","text":"<pre><code>GET /health/environment\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#connectivity-test","title":"Connectivity Test","text":"<pre><code>GET /health/connectivity\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#full-system-status","title":"Full System Status","text":"<pre><code>GET /health/status\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#example-test-output","title":"\ud83d\udcc8 Example Test Output","text":"<pre><code>\ud83d\udd11 Testing API Key Integrations...\n\n\ud83e\udd16 Anthropic Claude API\n   \u2705 Anthropic Claude API - Connected\n\n\ud83e\udde0 OpenAI GPT API  \n   \u2705 OpenAI GPT API - Connected\n\n\ud83d\udd0d Google Gemini API\n   \u2705 Google Gemini API - Connected\n\n\ud83c\udfa4 Replica Studios API\n   \u2705 Replica Studios API - Connected (150 voices available)\n   \u2705 MonsterBox Replica Integration - Working (150 voices)\n\n\ud83d\udd27 Environment Variables\n   \u2705 SESSION_SECRET - Configured\n   \u2705 PORT - Configured (3000)\n   \u2705 NODE_ENV - Configured (development)\n\n\ud83d\udccb Optional API Keys Status\n   \u26a0\ufe0f  Perplexity AI - Not configured (optional)\n   \u26a0\ufe0f  Mistral AI - Not configured (optional)\n   \u26a0\ufe0f  xAI - Not configured (optional)\n   \u26a0\ufe0f  Azure OpenAI - Not configured (optional)\n   \u26a0\ufe0f  Ollama - Not configured (optional)\n\n\u2705 All API key tests completed successfully!\n\n\ud83d\ude80 Your MonsterBox is ready for Halloween! \ud83c\udf83\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>No API keys exposed in logs or test output</li> <li>Environment variable validation without revealing values</li> <li>Minimal API calls to avoid unnecessary charges</li> <li>Error handling that doesn't leak sensitive information</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#packagejson-scripts-added","title":"\ud83d\udcdd Package.json Scripts Added","text":"<pre><code>{\n  \"scripts\": {\n    \"test:api-keys\": \"cross-env NODE_ENV=test mocha --reporter ./tests/cleanReporter.js tests/api-keys.test.js\",\n    \"test:api-keys-verbose\": \"cross-env NODE_ENV=test mocha tests/api-keys.test.js\",\n    \"check-api-keys\": \"node scripts/test-api-keys.js\",\n    \"check-config\": \"node scripts/test-api-keys.js --config-only\"\n  }\n}\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"api/API-TESTING-SUMMARY/#common-issues","title":"Common Issues","text":"<ul> <li>401 Unauthorized - Check API key validity</li> <li>Network timeouts - Check internet connection</li> <li>Missing dependencies - Run <code>npm install</code></li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#getting-help","title":"Getting Help","text":"<ul> <li>Check <code>tests/README-API-TESTING.md</code> for detailed documentation</li> <li>Review Winston logs in the <code>log/</code> directory</li> <li>Use health endpoints to monitor status</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li> <p>Run the tests to verify everything works:    <code>bash    npm run check-api-keys</code></p> </li> <li> <p>Monitor in production using health endpoints</p> </li> <li> <p>Add more API keys as needed for additional services</p> </li> <li> <p>Set up automated testing in your CI/CD pipeline</p> </li> </ol>"},{"location":"api/API-TESTING-SUMMARY/#monsterbox-status","title":"\ud83c\udf83 MonsterBox Status","text":"<p>Your MonsterBox now has: - \u2705 4 Active AI Services (Anthropic, OpenAI, Google, Replica) - \u2705 Comprehensive Testing Suite  - \u2705 Production Health Monitoring - \u2705 Secure Credential Management - \u2705 Complete Documentation</p> <p>Your MonsterBox is ready to scare with AI-powered intelligence! \ud83d\udc7b\ud83e\udd16</p>"},{"location":"development/backend-architecture/","title":"MonsterBox Backend Architecture","text":""},{"location":"development/backend-architecture/#overview","title":"Overview","text":"<p>MonsterBox is built on a robust Node.js/Express backend with EJS templating, designed to manage complex animatronic systems across distributed Raspberry Pi hardware. The architecture emphasizes modularity, scalability, and real-time capabilities.</p>"},{"location":"development/backend-architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"development/backend-architecture/#core-framework","title":"Core Framework","text":"<ul> <li>Node.js: v18.0.0+ runtime environment</li> <li>Express.js: v4.21.1 web application framework</li> <li>EJS: v3.1.9 embedded JavaScript templating engine</li> </ul>"},{"location":"development/backend-architecture/#key-dependencies","title":"Key Dependencies","text":"<ul> <li>dotenv: v16.4.5 - Environment variable management</li> <li>express-session: v1.17.3 - Session management</li> <li>winston: v3.11.0 - Comprehensive logging</li> <li>ws: v8.14.2 - WebSocket support for real-time communication</li> </ul>"},{"location":"development/backend-architecture/#hardware-integration","title":"Hardware Integration","text":"<ul> <li>i2c-bus: v5.2.3 - I2C communication for sensors and devices</li> <li>onoff: v6.0.3 - GPIO control for Raspberry Pi</li> <li>mpg123: v0.2.3 - Audio playback capabilities</li> </ul>"},{"location":"development/backend-architecture/#application-structure","title":"Application Structure","text":""},{"location":"development/backend-architecture/#main-application-appjs","title":"Main Application (app.js)","text":""},{"location":"development/backend-architecture/#initialization-sequence","title":"Initialization Sequence","text":"<ol> <li>Environment Setup: Load environment variables and configure warnings</li> <li>Module Loading: Import all required dependencies with error handling</li> <li>Express Configuration: Set up middleware, templating, and static file serving</li> <li>Route Registration: Mount all route handlers with proper prefixes</li> <li>Server Startup: Initialize HTTP server with graceful error handling</li> </ol>"},{"location":"development/backend-architecture/#key-features","title":"Key Features","text":"<ul> <li>Graceful Error Handling: Comprehensive uncaught exception and rejection handling</li> <li>Graceful Shutdown: Proper cleanup of resources on termination signals</li> <li>Session Management: Secure session handling with character context</li> <li>Static File Serving: Optimized serving of CSS, JS, and media files</li> </ul>"},{"location":"development/backend-architecture/#route-architecture","title":"Route Architecture","text":""},{"location":"development/backend-architecture/#route-organization","title":"Route Organization","text":"<pre><code>/routes/\n\u251c\u2500\u2500 activeModeRoutes.js      # Automated scene cycling\n\u251c\u2500\u2500 cameraRoutes.js          # Video streaming and capture\n\u251c\u2500\u2500 characterRoutes.js       # Character management CRUD\n\u251c\u2500\u2500 cleanup.js               # System cleanup operations\n\u251c\u2500\u2500 healthRoutes.js          # Health monitoring endpoints\n\u251c\u2500\u2500 ledRoutes.js             # LED control operations\n\u251c\u2500\u2500 lightRoutes.js           # Light control operations\n\u251c\u2500\u2500 linearActuatorRoutes.js  # Linear actuator control\n\u251c\u2500\u2500 logRoutes.js             # Log viewing and management\n\u251c\u2500\u2500 motorRoutes.js           # Motor control operations\n\u251c\u2500\u2500 partRoutes.js            # Hardware part management\n\u251c\u2500\u2500 sceneRoutes.js           # Scene creation and execution\n\u251c\u2500\u2500 sensorRoutes.js          # Sensor monitoring and control\n\u251c\u2500\u2500 servoRoutes.js           # Servo motor control\n\u251c\u2500\u2500 soundRoutes.js           # Audio playback and management\n\u251c\u2500\u2500 systemConfigRoutes.js    # System configuration\n\u2514\u2500\u2500 voiceRoutes.js           # Text-to-speech integration\n</code></pre>"},{"location":"development/backend-architecture/#route-mounting-strategy","title":"Route Mounting Strategy","text":"<ul> <li>Hierarchical Organization: Parts routes use sub-mounting (<code>/parts/led</code>, <code>/parts/servo</code>)</li> <li>RESTful Design: Consistent HTTP verb usage across all endpoints</li> <li>Character Context: Global middleware ensures character selection persistence</li> <li>Error Handling: Standardized error responses across all routes</li> </ul>"},{"location":"development/backend-architecture/#middleware-stack","title":"Middleware Stack","text":""},{"location":"development/backend-architecture/#core-middleware-in-order","title":"Core Middleware (in order)","text":"<ol> <li>JSON/URL Parsing: <code>express.json()</code> and <code>express.urlencoded()</code></li> <li>Static File Serving: Public assets and script directory serving</li> <li>Session Management: Express session with secure configuration</li> <li>Character Context: Global character selection middleware</li> <li>Route Handlers: Application-specific route processing</li> </ol>"},{"location":"development/backend-architecture/#security-considerations","title":"Security Considerations","text":"<ul> <li>Session Security: Configurable session secrets with fallback</li> <li>HTTPS Ready: Cookie security settings prepared for HTTPS deployment</li> <li>Input Validation: JSON and URL-encoded body parsing with limits</li> </ul>"},{"location":"development/backend-architecture/#service-layer-architecture","title":"Service Layer Architecture","text":""},{"location":"development/backend-architecture/#character-service","title":"Character Service","text":"<ul> <li>Centralized Character Management: Single source of truth for character data</li> <li>Async Operations: Promise-based API for all character operations</li> <li>Error Handling: Comprehensive error handling with logging</li> </ul>"},{"location":"development/backend-architecture/#sound-controller","title":"Sound Controller","text":"<ul> <li>Audio Management: Centralized audio playback control</li> <li>Graceful Shutdown: Proper audio cleanup on application termination</li> <li>Multi-format Support: Support for various audio formats</li> </ul>"},{"location":"development/backend-architecture/#real-time-communication","title":"Real-time Communication","text":""},{"location":"development/backend-architecture/#websocket-integration","title":"WebSocket Integration","text":"<ul> <li>Audio Streaming: Real-time audio stream management</li> <li>Video Streaming: Live video feed capabilities</li> <li>Bidirectional Communication: Full-duplex communication for control interfaces</li> </ul>"},{"location":"development/backend-architecture/#stream-management","title":"Stream Management","text":"<ul> <li>Server Integration: WebSocket servers integrated with HTTP server</li> <li>Resource Cleanup: Proper stream cleanup on server shutdown</li> <li>Error Recovery: Automatic reconnection and error handling</li> </ul>"},{"location":"development/backend-architecture/#configuration-management","title":"Configuration Management","text":""},{"location":"development/backend-architecture/#environment-variables","title":"Environment Variables","text":"<pre><code># Core Application\nPORT=3000                    # Server port\nNODE_ENV=production          # Environment mode\nSESSION_SECRET=your-secret   # Session encryption key\n\n# Hardware Configuration\n# (Hardware-specific variables as needed)\n</code></pre>"},{"location":"development/backend-architecture/#file-based-configuration","title":"File-based Configuration","text":"<ul> <li>Character Data: JSON-based character configurations in <code>/data</code></li> <li>Scene Definitions: Structured scene data with step definitions</li> <li>Part Configurations: Hardware part specifications and settings</li> </ul>"},{"location":"development/backend-architecture/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"development/backend-architecture/#global-error-handling","title":"Global Error Handling","text":"<ul> <li>Uncaught Exceptions: Logged and trigger graceful shutdown</li> <li>Unhandled Rejections: Comprehensive logging with shutdown procedures</li> <li>Process Signals: SIGTERM and SIGINT handling for clean shutdown</li> </ul>"},{"location":"development/backend-architecture/#route-level-error-handling","title":"Route-level Error Handling","text":"<ul> <li>Try-Catch Blocks: Comprehensive error catching in async routes</li> <li>Error Responses: Standardized error response format</li> <li>Logging Integration: All errors logged with context information</li> </ul>"},{"location":"development/backend-architecture/#graceful-shutdown-process","title":"Graceful Shutdown Process","text":"<ol> <li>Signal Reception: Capture termination signals</li> <li>Resource Cleanup: Stop audio, close connections</li> <li>Server Shutdown: Close HTTP server gracefully</li> <li>Forced Termination: 10-second timeout for forced shutdown</li> </ol>"},{"location":"development/backend-architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/backend-architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ul> <li>Static File Caching: Optimized static file serving with proper MIME types</li> <li>Session Efficiency: Minimal session data storage</li> <li>Async Operations: Non-blocking I/O throughout the application</li> <li>Resource Management: Proper cleanup of hardware resources</li> </ul>"},{"location":"development/backend-architecture/#monitoring-and-logging","title":"Monitoring and Logging","text":"<ul> <li>Winston Integration: Structured logging throughout the application</li> <li>Client-side Logging: Browser error collection endpoint</li> <li>Performance Metrics: Built-in performance monitoring capabilities</li> </ul>"},{"location":"development/backend-architecture/#development-and-testing","title":"Development and Testing","text":""},{"location":"development/backend-architecture/#test-environment","title":"Test Environment","text":"<ul> <li>Environment Detection: Automatic test environment detection</li> <li>Server Startup: Conditional server startup for testing</li> <li>Mock Support: Test-friendly architecture with dependency injection</li> </ul>"},{"location":"development/backend-architecture/#development-features","title":"Development Features","text":"<ul> <li>Hot Reloading: Nodemon integration for development</li> <li>Debug Support: Comprehensive logging and error reporting</li> <li>Development Scripts: NPM scripts for common development tasks</li> </ul>"},{"location":"development/backend-architecture/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"development/backend-architecture/#production-readiness","title":"Production Readiness","text":"<ul> <li>Environment Configuration: Production-ready environment variable handling</li> <li>Security Headers: Prepared for security header implementation</li> <li>HTTPS Support: Ready for HTTPS deployment with minimal configuration</li> <li>Process Management: Compatible with PM2 and other process managers</li> </ul>"},{"location":"development/backend-architecture/#scalability-features","title":"Scalability Features","text":"<ul> <li>Modular Architecture: Easy to scale individual components</li> <li>Stateless Design: Session-based state management for horizontal scaling</li> <li>Resource Isolation: Clean separation between hardware and application logic</li> </ul> <p>This architecture documentation reflects the current implementation as of Task #1 completion. For specific implementation details, refer to the source code and related documentation.</p>"},{"location":"development/development-process/","title":"MonsterBox Development Process","text":""},{"location":"development/development-process/#overview","title":"Overview","text":"<p>The MonsterBox development process integrates Task Master with existing development workflows to ensure coordinated, efficient development across all project areas. This process balances agility with thorough planning and quality assurance.</p>"},{"location":"development/development-process/#development-philosophy","title":"Development Philosophy","text":""},{"location":"development/development-process/#task-driven-development","title":"Task-Driven Development","text":"<ul> <li>All work is tracked through Task Master tasks</li> <li>Clear objectives defined before starting any work</li> <li>Measurable outcomes with defined success criteria</li> <li>Dependency awareness to prevent blocking issues</li> </ul>"},{"location":"development/development-process/#quality-first","title":"Quality First","text":"<ul> <li>Comprehensive testing for all changes</li> <li>Code review for all implementations</li> <li>Documentation updates with every feature</li> <li>Security considerations in all development</li> </ul>"},{"location":"development/development-process/#iterative-improvement","title":"Iterative Improvement","text":"<ul> <li>Regular retrospectives to improve processes</li> <li>Continuous learning from completed tasks</li> <li>Process adaptation based on project needs</li> <li>Tool optimization for better efficiency</li> </ul>"},{"location":"development/development-process/#development-phases","title":"Development Phases","text":""},{"location":"development/development-process/#phase-1-planning-and-analysis","title":"Phase 1: Planning and Analysis","text":""},{"location":"development/development-process/#prd-development","title":"PRD Development","text":"<ol> <li>Requirements Gathering: Collect and document all requirements</li> <li>PRD Creation: Create comprehensive Product Requirements Document</li> <li>Task Generation: Use Task Master to generate initial task list</li> <li>Task Refinement: Review and adjust generated tasks</li> </ol>"},{"location":"development/development-process/#project-setup","title":"Project Setup","text":"<ol> <li>Environment Setup: Ensure all development tools are ready</li> <li>Dependency Analysis: Map all task dependencies</li> <li>Resource Planning: Allocate team members and time</li> <li>Risk Assessment: Identify potential blockers and mitigation strategies</li> </ol>"},{"location":"development/development-process/#phase-2-foundation-development","title":"Phase 2: Foundation Development","text":""},{"location":"development/development-process/#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li>Backend Systems: Node.js/Express foundation</li> <li>Database Setup: Configuration and data management</li> <li>Security Framework: Authentication and authorization</li> <li>Testing Infrastructure: Automated testing setup</li> </ul>"},{"location":"development/development-process/#integration-points","title":"Integration Points","text":"<ul> <li>API Design: RESTful endpoints for all functionality</li> <li>Documentation System: MkDocs integration and automation</li> <li>Monitoring Setup: Logging and health monitoring</li> <li>Deployment Pipeline: CI/CD and automated deployment</li> </ul>"},{"location":"development/development-process/#phase-3-feature-development","title":"Phase 3: Feature Development","text":""},{"location":"development/development-process/#feature-implementation-cycle","title":"Feature Implementation Cycle","text":"<ol> <li>Task Selection: Choose next task based on priorities and dependencies</li> <li>Design Phase: Create detailed implementation plan</li> <li>Development: Implement feature with tests</li> <li>Review: Code review and quality assurance</li> <li>Integration: Merge and deploy to staging</li> <li>Validation: End-to-end testing and validation</li> <li>Documentation: Update all relevant documentation</li> <li>Deployment: Release to production</li> </ol>"},{"location":"development/development-process/#quality-gates","title":"Quality Gates","text":"<ul> <li>Code Quality: Linting, formatting, and best practices</li> <li>Test Coverage: Minimum 80% test coverage for new code</li> <li>Security Review: Security implications of all changes</li> <li>Performance Impact: Performance testing for significant changes</li> </ul>"},{"location":"development/development-process/#phase-4-integration-and-testing","title":"Phase 4: Integration and Testing","text":""},{"location":"development/development-process/#system-integration","title":"System Integration","text":"<ul> <li>Component Integration: Ensure all components work together</li> <li>End-to-End Testing: Full system testing scenarios</li> <li>Performance Testing: Load and stress testing</li> <li>Security Testing: Penetration testing and vulnerability assessment</li> </ul>"},{"location":"development/development-process/#user-acceptance","title":"User Acceptance","text":"<ul> <li>Feature Validation: Verify features meet requirements</li> <li>Usability Testing: Ensure good user experience</li> <li>Documentation Review: Verify documentation accuracy</li> <li>Training Materials: Create user guides and training</li> </ul>"},{"location":"development/development-process/#development-standards","title":"Development Standards","text":""},{"location":"development/development-process/#code-standards","title":"Code Standards","text":""},{"location":"development/development-process/#javascriptnodejs","title":"JavaScript/Node.js","text":"<ul> <li>ES6+ Features: Use modern JavaScript features</li> <li>Async/Await: Prefer async/await over callbacks</li> <li>Error Handling: Comprehensive error handling and logging</li> <li>Code Organization: Clear module structure and separation of concerns</li> </ul>"},{"location":"development/development-process/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Inline Comments: Clear comments for complex logic</li> <li>API Documentation: Complete API documentation with examples</li> <li>README Files: Comprehensive setup and usage instructions</li> <li>Change Logs: Document all significant changes</li> </ul>"},{"location":"development/development-process/#testing-standards","title":"Testing Standards","text":""},{"location":"development/development-process/#unit-testing","title":"Unit Testing","text":"<ul> <li>Test Coverage: Minimum 80% coverage for new code</li> <li>Test Organization: Clear test structure and naming</li> <li>Mock Usage: Appropriate mocking of external dependencies</li> <li>Edge Cases: Test boundary conditions and error scenarios</li> </ul>"},{"location":"development/development-process/#integration-testing","title":"Integration Testing","text":"<ul> <li>API Testing: Test all API endpoints</li> <li>Database Testing: Test data persistence and retrieval</li> <li>External Service Testing: Test third-party integrations</li> <li>End-to-End Testing: Test complete user workflows</li> </ul>"},{"location":"development/development-process/#security-standards","title":"Security Standards","text":""},{"location":"development/development-process/#authentication-and-authorization","title":"Authentication and Authorization","text":"<ul> <li>JWT Tokens: Secure token-based authentication</li> <li>Role-Based Access: Proper permission management</li> <li>Session Management: Secure session handling</li> <li>Password Security: Strong password requirements and hashing</li> </ul>"},{"location":"development/development-process/#data-protection","title":"Data Protection","text":"<ul> <li>Input Validation: Validate all user inputs</li> <li>SQL Injection Prevention: Use parameterized queries</li> <li>XSS Prevention: Sanitize all outputs</li> <li>HTTPS: Encrypt all communications</li> </ul>"},{"location":"development/development-process/#tool-integration","title":"Tool Integration","text":""},{"location":"development/development-process/#task-master-integration","title":"Task Master Integration","text":""},{"location":"development/development-process/#development-workflow","title":"Development Workflow","text":"<ol> <li>Task Selection: Use Task Master to identify next work</li> <li>Progress Tracking: Update task status throughout development</li> <li>Dependency Management: Coordinate with dependent tasks</li> <li>Completion Verification: Ensure all task criteria are met</li> </ol>"},{"location":"development/development-process/#documentation-coordination","title":"Documentation Coordination","text":"<ul> <li>Automatic Updates: Documentation updates when tasks change</li> <li>Cross-References: Links between tasks and documentation</li> <li>Version Control: Track documentation changes with code changes</li> <li>Search Integration: Task content included in documentation search</li> </ul>"},{"location":"development/development-process/#version-control-integration","title":"Version Control Integration","text":""},{"location":"development/development-process/#git-workflow","title":"Git Workflow","text":"<ul> <li>Feature Branches: Create branches for each task</li> <li>Commit Messages: Reference task IDs in commit messages</li> <li>Pull Requests: Link PRs to corresponding tasks</li> <li>Code Review: Review process integrated with task completion</li> </ul>"},{"location":"development/development-process/#release-management","title":"Release Management","text":"<ul> <li>Version Tagging: Tag releases with completed task lists</li> <li>Release Notes: Generate release notes from completed tasks</li> <li>Deployment Tracking: Track which tasks are in each deployment</li> <li>Rollback Planning: Plan rollbacks based on task dependencies</li> </ul>"},{"location":"development/development-process/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"development/development-process/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Task Performance: Track time to complete different task types</li> <li>System Performance: Monitor system performance during development</li> <li>Error Tracking: Track errors and link to relevant tasks</li> <li>User Analytics: Monitor user behavior for feature validation</li> </ul>"},{"location":"development/development-process/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Code Quality: Track code quality metrics over time</li> <li>Test Coverage: Monitor test coverage trends</li> <li>Bug Rates: Track bug introduction and resolution rates</li> <li>Documentation Quality: Monitor documentation completeness</li> </ul>"},{"location":"development/development-process/#continuous-improvement","title":"Continuous Improvement","text":""},{"location":"development/development-process/#regular-reviews","title":"Regular Reviews","text":""},{"location":"development/development-process/#weekly-team-reviews","title":"Weekly Team Reviews","text":"<ul> <li>Progress Assessment: Review completed and in-progress tasks</li> <li>Blocker Resolution: Address any blocking issues</li> <li>Process Improvements: Identify and implement process improvements</li> <li>Knowledge Sharing: Share learnings and best practices</li> </ul>"},{"location":"development/development-process/#monthly-retrospectives","title":"Monthly Retrospectives","text":"<ul> <li>Process Evaluation: Assess overall development process effectiveness</li> <li>Tool Evaluation: Review tool usage and effectiveness</li> <li>Quality Assessment: Review quality metrics and trends</li> <li>Planning Adjustments: Adjust planning and estimation based on learnings</li> </ul>"},{"location":"development/development-process/#process-evolution","title":"Process Evolution","text":""},{"location":"development/development-process/#adaptation-strategies","title":"Adaptation Strategies","text":"<ul> <li>Feedback Integration: Incorporate team feedback into process improvements</li> <li>Tool Updates: Keep development tools and processes current</li> <li>Best Practice Adoption: Adopt industry best practices as appropriate</li> <li>Automation Expansion: Automate repetitive tasks and processes</li> </ul>"},{"location":"development/development-process/#success-metrics","title":"Success Metrics","text":"<ul> <li>Delivery Speed: Time from task creation to completion</li> <li>Quality Metrics: Bug rates, test coverage, code quality</li> <li>Team Satisfaction: Developer experience and satisfaction</li> <li>User Satisfaction: End-user satisfaction with delivered features</li> </ul> <p>This development process is continuously evolving. For the latest updates and specific procedures, refer to the Task Master Guide and Task Workflows.</p>"},{"location":"development/task-management/","title":"Task Management with Task Master","text":""},{"location":"development/task-management/#overview","title":"Overview","text":"<p>MonsterBox uses Task Master for comprehensive project management and development workflow coordination. Task Master integrates seamlessly with the existing MkDocs documentation system to provide a unified development experience.</p>"},{"location":"development/task-management/#what-is-task-master","title":"What is Task Master?","text":"<p>Task Master is an AI-powered task management system that helps coordinate development work across the MonsterBox platform. It provides:</p> <ul> <li>Intelligent Task Generation from Product Requirements Documents (PRDs)</li> <li>Dependency Management to ensure proper development sequencing</li> <li>Complexity Analysis to help with effort estimation and planning</li> <li>Status Tracking for all development activities</li> <li>Integration with existing MonsterBox documentation and workflows</li> </ul>"},{"location":"development/task-management/#key-features","title":"Key Features","text":""},{"location":"development/task-management/#task-organization","title":"\ud83c\udfaf Task Organization","text":"<ul> <li>Hierarchical Structure: Tasks can have subtasks for detailed breakdown</li> <li>Priority Levels: High, Medium, Low priority classification</li> <li>Status Management: Pending, In-Progress, Done, Deferred, Cancelled</li> <li>Dependency Tracking: Automatic dependency resolution and blocking detection</li> </ul>"},{"location":"development/task-management/#project-insights","title":"\ud83d\udcca Project Insights","text":"<ul> <li>Complexity Scoring: AI-powered complexity analysis (1-10 scale)</li> <li>Progress Tracking: Real-time completion percentages and statistics</li> <li>Bottleneck Identification: Automatic detection of blocking dependencies</li> <li>Effort Estimation: Recommended subtask counts based on complexity</li> </ul>"},{"location":"development/task-management/#workflow-integration","title":"\ud83d\udd04 Workflow Integration","text":"<ul> <li>MkDocs Coordination: Seamless integration with existing documentation</li> <li>Development Process: Task-driven development workflows</li> <li>Automated Updates: Documentation updates when tasks change</li> <li>Cross-referencing: Links between tasks and related documentation</li> </ul>"},{"location":"development/task-management/#task-master-file-structure","title":"Task Master File Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 .taskmaster/\n\u2502   \u251c\u2500\u2500 config.json              # Task Master configuration\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2502   \u2514\u2500\u2500 prd.txt             # Product Requirements Document\n\u2502   \u251c\u2500\u2500 tasks/\n\u2502   \u2502   \u251c\u2500\u2500 tasks.json          # Master task database\n\u2502   \u2502   \u251c\u2500\u2500 task_001.txt        # Individual task files\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 reports/\n\u2502   \u2502   \u2514\u2500\u2500 task-complexity-report.json\n\u2502   \u2514\u2500\u2500 templates/\n\u2502       \u2514\u2500\u2500 example_prd.txt\n</code></pre>"},{"location":"development/task-management/#current-project-status","title":"Current Project Status","text":""},{"location":"development/task-management/#active-tasks-in-progress","title":"Active Tasks (In Progress)","text":"<ul> <li>Task #16: Task Master + MkDocs Integration</li> <li>Task #1: Node.js/Express Backend Review</li> <li>Task #4: MCP Log Collection System</li> <li>Task #11: Secure Remote Access System</li> <li>Task #15: Comprehensive Testing Suite</li> <li>Task #13: Backup and Recovery System</li> </ul>"},{"location":"development/task-management/#on-hold-tasks-deferred","title":"On Hold Tasks (Deferred)","text":"<ul> <li>Character Configuration System</li> <li>Scene Builder Interface</li> <li>Hardware Integration Layer</li> <li>Real-time Control System</li> <li>Multi-Character Coordination</li> <li>Performance Optimization</li> <li>AI Text-to-Speech</li> <li>Remote Monitoring Dashboard</li> <li>Active Mode Functionality</li> </ul>"},{"location":"development/task-management/#getting-started","title":"Getting Started","text":""},{"location":"development/task-management/#for-new-team-members","title":"For New Team Members","text":"<ol> <li>Review the Task Workflows guide</li> <li>Understand the Development Process</li> <li>Read the Task Master Guide for detailed usage</li> </ol>"},{"location":"development/task-management/#for-existing-developers","title":"For Existing Developers","text":"<ul> <li>Tasks are managed through the AI assistant interface</li> <li>All task updates are automatically reflected in documentation</li> <li>Use task-driven development for better coordination</li> </ul>"},{"location":"development/task-management/#integration-with-monsterbox","title":"Integration with MonsterBox","text":"<p>Task Master is designed to complement, not replace, the existing MonsterBox documentation:</p> <ul> <li>Setup Guides: Reference existing animatronic and SSH setup documentation</li> <li>API Documentation: Coordinate with existing API testing and validation</li> <li>Security: Align with existing MCP and security documentation</li> <li>Character Management: Work with existing character sheets and configurations</li> </ul>"},{"location":"development/task-management/#next-steps","title":"Next Steps","text":"<ol> <li>Complete Task Master integration with MkDocs</li> <li>Establish task-driven development workflows</li> <li>Train team on Task Master usage</li> <li>Implement automated documentation updates</li> <li>Expand task management to cover all MonsterBox development areas</li> </ol> <p>This documentation is automatically updated as Task Master evolves. Last updated: 2025-06-06</p>"},{"location":"development/task-workflows/","title":"Task Workflows","text":""},{"location":"development/task-workflows/#overview","title":"Overview","text":"<p>This guide describes the standard workflows for managing tasks in the MonsterBox project using Task Master. These workflows ensure consistent development practices and proper coordination across all team members.</p>"},{"location":"development/task-workflows/#task-lifecycle","title":"Task Lifecycle","text":""},{"location":"development/task-workflows/#1-task-creation","title":"1. Task Creation","text":"<p>Tasks can be created in several ways:</p>"},{"location":"development/task-workflows/#from-prd-recommended","title":"From PRD (Recommended)","text":"<pre><code>1. Update the PRD document (.taskmaster/docs/prd.txt)\n2. Run PRD parsing to generate tasks automatically\n3. Review and adjust generated tasks as needed\n</code></pre>"},{"location":"development/task-workflows/#manual-task-creation","title":"Manual Task Creation","text":"<pre><code>1. Identify new work that needs to be done\n2. Create task with clear title and description\n3. Set appropriate priority and dependencies\n4. Add detailed implementation steps\n5. Define test strategy\n</code></pre>"},{"location":"development/task-workflows/#2-task-planning","title":"2. Task Planning","text":"<p>Before starting work on any task:</p>"},{"location":"development/task-workflows/#dependency-check","title":"Dependency Check","text":"<ul> <li>Verify all dependency tasks are completed</li> <li>Identify any blocking issues</li> <li>Coordinate with team members on shared dependencies</li> </ul>"},{"location":"development/task-workflows/#complexity-assessment","title":"Complexity Assessment","text":"<ul> <li>Review AI-generated complexity score</li> <li>Break down high-complexity tasks (8+) into subtasks</li> <li>Estimate effort and timeline</li> </ul>"},{"location":"development/task-workflows/#resource-allocation","title":"Resource Allocation","text":"<ul> <li>Assign task to appropriate team member</li> <li>Ensure required skills and knowledge are available</li> <li>Plan for any needed training or research</li> </ul>"},{"location":"development/task-workflows/#3-task-execution","title":"3. Task Execution","text":""},{"location":"development/task-workflows/#starting-a-task","title":"Starting a Task","text":"<ol> <li>Update Status: Change from \"pending\" to \"in-progress\"</li> <li>Review Requirements: Read all task details and test strategy</li> <li>Plan Implementation: Break down work into daily/weekly milestones</li> <li>Set Up Environment: Ensure all tools and dependencies are ready</li> </ol>"},{"location":"development/task-workflows/#during-development","title":"During Development","text":"<ol> <li>Regular Updates: Update task progress and any blockers</li> <li>Subtask Management: Complete subtasks and update their status</li> <li>Documentation: Document findings, decisions, and changes</li> <li>Testing: Implement tests as defined in test strategy</li> </ol>"},{"location":"development/task-workflows/#completing-a-task","title":"Completing a Task","text":"<ol> <li>Final Testing: Ensure all test criteria are met</li> <li>Code Review: Get peer review for all changes</li> <li>Documentation Update: Update relevant documentation</li> <li>Status Update: Change status to \"done\"</li> <li>Handoff: Notify dependent tasks that they can proceed</li> </ol>"},{"location":"development/task-workflows/#common-workflow-patterns","title":"Common Workflow Patterns","text":""},{"location":"development/task-workflows/#feature-development-workflow","title":"Feature Development Workflow","text":"<pre><code>1. Create feature task from requirements\n2. Break down into subtasks:\n   - Design/Architecture\n   - Implementation\n   - Testing\n   - Documentation\n3. Execute subtasks in sequence\n4. Integration testing\n5. Feature completion and handoff\n</code></pre>"},{"location":"development/task-workflows/#bug-fix-workflow","title":"Bug Fix Workflow","text":"<pre><code>1. Create bug task with reproduction steps\n2. Investigate and identify root cause\n3. Implement fix with tests\n4. Verify fix resolves issue\n5. Update documentation if needed\n6. Close task and notify stakeholders\n</code></pre>"},{"location":"development/task-workflows/#researchinvestigation-workflow","title":"Research/Investigation Workflow","text":"<pre><code>1. Create research task with clear objectives\n2. Define success criteria and deliverables\n3. Conduct research and document findings\n4. Present recommendations\n5. Create follow-up implementation tasks if needed\n</code></pre>"},{"location":"development/task-workflows/#task-prioritization-guidelines","title":"Task Prioritization Guidelines","text":""},{"location":"development/task-workflows/#high-priority","title":"High Priority","text":"<ul> <li>Critical bugs affecting production systems</li> <li>Security vulnerabilities requiring immediate attention</li> <li>Blocking dependencies for other high-priority work</li> <li>Foundation tasks that enable other development</li> </ul>"},{"location":"development/task-workflows/#medium-priority","title":"Medium Priority","text":"<ul> <li>Feature enhancements that improve user experience</li> <li>Performance optimizations with measurable impact</li> <li>Technical debt that affects maintainability</li> <li>Documentation updates for new features</li> </ul>"},{"location":"development/task-workflows/#low-priority","title":"Low Priority","text":"<ul> <li>Nice-to-have features with limited impact</li> <li>Experimental work for future consideration</li> <li>Cleanup tasks that don't affect functionality</li> <li>Long-term optimizations without immediate need</li> </ul>"},{"location":"development/task-workflows/#status-management","title":"Status Management","text":""},{"location":"development/task-workflows/#status-definitions","title":"Status Definitions","text":"<ul> <li>Pending: Task is ready to start but not yet begun</li> <li>In-Progress: Task is actively being worked on</li> <li>Done: Task is completed and verified</li> <li>Deferred: Task is postponed to a later time</li> <li>Cancelled: Task is no longer needed or relevant</li> <li>Blocked: Task cannot proceed due to dependencies</li> </ul>"},{"location":"development/task-workflows/#status-transitions","title":"Status Transitions","text":"<pre><code>Pending \u2192 In-Progress \u2192 Done\nPending \u2192 Deferred \u2192 In-Progress \u2192 Done\nPending \u2192 Cancelled\nIn-Progress \u2192 Blocked \u2192 In-Progress \u2192 Done\n</code></pre>"},{"location":"development/task-workflows/#dependency-management","title":"Dependency Management","text":""},{"location":"development/task-workflows/#types-of-dependencies","title":"Types of Dependencies","text":"<ol> <li>Technical Dependencies: Code/system requirements</li> <li>Resource Dependencies: People or tools needed</li> <li>Knowledge Dependencies: Information or training required</li> <li>External Dependencies: Third-party services or approvals</li> </ol>"},{"location":"development/task-workflows/#managing-dependencies","title":"Managing Dependencies","text":"<ul> <li>Identify Early: Map dependencies during task planning</li> <li>Communicate: Keep dependent tasks informed of progress</li> <li>Parallel Work: Find ways to work on independent parts</li> <li>Risk Mitigation: Have backup plans for critical dependencies</li> </ul>"},{"location":"development/task-workflows/#team-coordination","title":"Team Coordination","text":""},{"location":"development/task-workflows/#daily-standups","title":"Daily Standups","text":"<ul> <li>Review active tasks and progress</li> <li>Identify blockers and dependencies</li> <li>Coordinate shared work and resources</li> <li>Plan daily priorities</li> </ul>"},{"location":"development/task-workflows/#weekly-planning","title":"Weekly Planning","text":"<ul> <li>Review completed tasks and lessons learned</li> <li>Plan upcoming work and priorities</li> <li>Adjust timelines based on progress</li> <li>Identify resource needs and training</li> </ul>"},{"location":"development/task-workflows/#sprintmilestone-reviews","title":"Sprint/Milestone Reviews","text":"<ul> <li>Assess overall project progress</li> <li>Update task priorities based on changing requirements</li> <li>Plan next sprint/milestone objectives</li> <li>Celebrate completed work and achievements</li> </ul>"},{"location":"development/task-workflows/#best-practices","title":"Best Practices","text":""},{"location":"development/task-workflows/#task-creation","title":"Task Creation","text":"<ul> <li>Use clear, descriptive titles</li> <li>Include detailed acceptance criteria</li> <li>Define comprehensive test strategies</li> <li>Set realistic complexity estimates</li> </ul>"},{"location":"development/task-workflows/#task-execution","title":"Task Execution","text":"<ul> <li>Update status regularly (at least daily)</li> <li>Document decisions and changes</li> <li>Ask for help when blocked</li> <li>Test thoroughly before marking complete</li> </ul>"},{"location":"development/task-workflows/#team-collaboration","title":"Team Collaboration","text":"<ul> <li>Communicate early and often</li> <li>Share knowledge and learnings</li> <li>Help unblock teammates</li> <li>Maintain shared understanding of goals</li> </ul> <p>For detailed Task Master commands and usage, see the Task Master Guide.</p>"},{"location":"development/taskmaster-guide/","title":"Task Master Guide","text":""},{"location":"development/taskmaster-guide/#overview","title":"Overview","text":"<p>Task Master is an AI-powered task management system integrated into the MonsterBox development workflow. This guide provides comprehensive instructions for using Task Master effectively.</p>"},{"location":"development/taskmaster-guide/#getting-started","title":"Getting Started","text":""},{"location":"development/taskmaster-guide/#system-requirements","title":"System Requirements","text":"<ul> <li>MonsterBox project initialized</li> <li>Task Master installed and configured</li> <li>Access to AI assistant with MCP integration</li> <li>MkDocs documentation system</li> </ul>"},{"location":"development/taskmaster-guide/#initial-setup","title":"Initial Setup","text":"<p>Task Master is already initialized in your MonsterBox project with: - Configuration files in <code>.taskmaster/</code> - PRD document for task generation - 15 active tasks across all development areas - Integration with existing MkDocs documentation</p>"},{"location":"development/taskmaster-guide/#core-concepts","title":"Core Concepts","text":""},{"location":"development/taskmaster-guide/#tasks","title":"Tasks","text":"<p>Tasks are the fundamental units of work in Task Master: - Unique ID: Each task has a numeric identifier - Title: Clear, descriptive task name - Description: Detailed explanation of what needs to be done - Status: Current state (pending, in-progress, done, deferred, cancelled) - Priority: Importance level (high, medium, low) - Dependencies: Other tasks that must complete first - Complexity: AI-generated complexity score (1-10)</p>"},{"location":"development/taskmaster-guide/#subtasks","title":"Subtasks","text":"<p>Subtasks break down complex tasks into manageable pieces: - Hierarchical Structure: Subtasks belong to parent tasks - Independent Tracking: Each subtask has its own status - Granular Progress: Track progress at detailed level - Flexible Organization: Add/remove subtasks as needed</p>"},{"location":"development/taskmaster-guide/#dependencies","title":"Dependencies","text":"<p>Dependencies ensure proper work sequencing: - Blocking Relationships: Tasks that must complete before others can start - Automatic Detection: System identifies when tasks are blocked - Dependency Chains: Complex multi-level dependencies supported - Validation: System prevents circular dependencies</p>"},{"location":"development/taskmaster-guide/#task-management-commands","title":"Task Management Commands","text":""},{"location":"development/taskmaster-guide/#viewing-tasks","title":"Viewing Tasks","text":""},{"location":"development/taskmaster-guide/#get-all-tasks","title":"Get All Tasks","text":"<pre><code>View all tasks with current status and priorities\n</code></pre>"},{"location":"development/taskmaster-guide/#get-specific-task","title":"Get Specific Task","text":"<pre><code>View detailed information for a specific task by ID\n</code></pre>"},{"location":"development/taskmaster-guide/#get-next-task","title":"Get Next Task","text":"<pre><code>Find the next task to work on based on dependencies and priorities\n</code></pre>"},{"location":"development/taskmaster-guide/#filter-by-status","title":"Filter by Status","text":"<pre><code>View tasks filtered by status (pending, in-progress, done, etc.)\n</code></pre>"},{"location":"development/taskmaster-guide/#managing-task-status","title":"Managing Task Status","text":""},{"location":"development/taskmaster-guide/#update-task-status","title":"Update Task Status","text":"<pre><code>Change task status (pending \u2192 in-progress \u2192 done)\nExamples:\n- Set task to in-progress when starting work\n- Mark task as done when completed\n- Defer tasks that are postponed\n</code></pre>"},{"location":"development/taskmaster-guide/#bulk-status-updates","title":"Bulk Status Updates","text":"<pre><code>Update multiple tasks at once\nExample: Set multiple tasks to deferred status\n</code></pre>"},{"location":"development/taskmaster-guide/#task-creation-and-modification","title":"Task Creation and Modification","text":""},{"location":"development/taskmaster-guide/#add-new-task","title":"Add New Task","text":"<pre><code>Create new tasks with AI assistance\n- Provide description of work needed\n- System generates detailed task with test strategy\n- Automatically sets appropriate complexity and priority\n</code></pre>"},{"location":"development/taskmaster-guide/#update-existing-task","title":"Update Existing Task","text":"<pre><code>Modify task details based on new information\n- Update implementation details\n- Adjust test strategies\n- Incorporate new requirements\n</code></pre>"},{"location":"development/taskmaster-guide/#remove-tasks","title":"Remove Tasks","text":"<pre><code>Delete tasks that are no longer needed\n- Removes task and updates dependencies\n- Cleans up related files\n</code></pre>"},{"location":"development/taskmaster-guide/#subtask-management","title":"Subtask Management","text":""},{"location":"development/taskmaster-guide/#add-subtasks","title":"Add Subtasks","text":"<pre><code>Break down complex tasks into smaller pieces\n- Create new subtasks for detailed work\n- Convert existing tasks to subtasks\n- Organize work hierarchically\n</code></pre>"},{"location":"development/taskmaster-guide/#update-subtasks","title":"Update Subtasks","text":"<pre><code>Track progress on individual subtasks\n- Update subtask status independently\n- Add notes and progress updates\n- Maintain detailed work history\n</code></pre>"},{"location":"development/taskmaster-guide/#remove-subtasks","title":"Remove Subtasks","text":"<pre><code>Remove completed or unnecessary subtasks\n- Option to convert back to standalone tasks\n- Maintain clean task organization\n</code></pre>"},{"location":"development/taskmaster-guide/#dependency-management","title":"Dependency Management","text":""},{"location":"development/taskmaster-guide/#add-dependencies","title":"Add Dependencies","text":"<pre><code>Create dependency relationships between tasks\n- Ensure proper work sequencing\n- Prevent starting tasks before prerequisites\n</code></pre>"},{"location":"development/taskmaster-guide/#remove-dependencies","title":"Remove Dependencies","text":"<pre><code>Remove dependency relationships when no longer needed\n- Unblock tasks when dependencies change\n- Maintain accurate dependency graph\n</code></pre>"},{"location":"development/taskmaster-guide/#validate-dependencies","title":"Validate Dependencies","text":"<pre><code>Check for dependency issues\n- Identify circular dependencies\n- Find broken dependency links\n- Ensure dependency graph integrity\n</code></pre>"},{"location":"development/taskmaster-guide/#advanced-features","title":"Advanced Features","text":""},{"location":"development/taskmaster-guide/#complexity-analysis","title":"Complexity Analysis","text":"<p>Task Master provides AI-powered complexity analysis:</p>"},{"location":"development/taskmaster-guide/#automatic-scoring","title":"Automatic Scoring","text":"<ul> <li>Complexity Score: 1-10 scale based on task requirements</li> <li>Subtask Recommendations: Suggested number of subtasks</li> <li>Expansion Prompts: AI-generated suggestions for task breakdown</li> </ul>"},{"location":"development/taskmaster-guide/#complexity-reports","title":"Complexity Reports","text":"<pre><code>Generate comprehensive complexity analysis\n- Identify high-complexity tasks needing breakdown\n- Recommend task expansion strategies\n- Provide effort estimation guidance\n</code></pre>"},{"location":"development/taskmaster-guide/#task-expansion","title":"Task Expansion","text":"<p>For complex tasks (complexity 8+), use task expansion:</p>"},{"location":"development/taskmaster-guide/#expand-single-task","title":"Expand Single Task","text":"<pre><code>Break down a specific task into detailed subtasks\n- AI-generated subtask breakdown\n- Maintains task relationships\n- Preserves original task context\n</code></pre>"},{"location":"development/taskmaster-guide/#expand-all-tasks","title":"Expand All Tasks","text":"<pre><code>Automatically expand all high-complexity tasks\n- Batch processing for efficiency\n- Consistent subtask generation\n- Maintains project coherence\n</code></pre>"},{"location":"development/taskmaster-guide/#project-analysis","title":"Project Analysis","text":""},{"location":"development/taskmaster-guide/#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Completion Percentages: Overall and by category</li> <li>Status Distribution: Tasks by current status</li> <li>Dependency Analysis: Blocking and blocked tasks</li> <li>Timeline Estimation: Projected completion based on complexity</li> </ul>"},{"location":"development/taskmaster-guide/#reporting","title":"Reporting","text":"<ul> <li>Complexity Reports: Detailed analysis of task complexity</li> <li>Progress Reports: Current project status and trends</li> <li>Dependency Reports: Dependency graph analysis</li> <li>Performance Metrics: Task completion rates and patterns</li> </ul>"},{"location":"development/taskmaster-guide/#integration-with-monsterbox","title":"Integration with MonsterBox","text":""},{"location":"development/taskmaster-guide/#mkdocs-integration","title":"MkDocs Integration","text":"<p>Task Master integrates seamlessly with MonsterBox documentation:</p>"},{"location":"development/taskmaster-guide/#automatic-updates","title":"Automatic Updates","text":"<ul> <li>Documentation Generation: Task information included in docs</li> <li>Cross-References: Links between tasks and documentation</li> <li>Search Integration: Task content searchable in docs</li> <li>Version Control: Documentation updates with task changes</li> </ul>"},{"location":"development/taskmaster-guide/#content-coordination","title":"Content Coordination","text":"<ul> <li>No Duplication: Task docs complement existing documentation</li> <li>Consistent Terminology: Standardized language across all docs</li> <li>Proper Navigation: Task docs integrated into MkDocs navigation</li> <li>Theme Consistency: Maintains Material theme styling</li> </ul>"},{"location":"development/taskmaster-guide/#development-workflow","title":"Development Workflow","text":"<p>Task Master supports the complete development workflow:</p>"},{"location":"development/taskmaster-guide/#planning-phase","title":"Planning Phase","text":"<ul> <li>PRD Processing: Generate tasks from requirements documents</li> <li>Dependency Mapping: Identify task relationships</li> <li>Priority Setting: Establish work priorities</li> <li>Resource Planning: Estimate effort and timeline</li> </ul>"},{"location":"development/taskmaster-guide/#execution-phase","title":"Execution Phase","text":"<ul> <li>Work Coordination: Track active work across team</li> <li>Progress Monitoring: Real-time status updates</li> <li>Blocker Resolution: Identify and resolve blocking issues</li> <li>Quality Assurance: Ensure completion criteria are met</li> </ul>"},{"location":"development/taskmaster-guide/#review-phase","title":"Review Phase","text":"<ul> <li>Completion Verification: Validate all task requirements met</li> <li>Documentation Updates: Ensure docs reflect completed work</li> <li>Lessons Learned: Capture insights for future work</li> <li>Process Improvement: Refine workflows based on experience</li> </ul>"},{"location":"development/taskmaster-guide/#best-practices","title":"Best Practices","text":""},{"location":"development/taskmaster-guide/#task-creation","title":"Task Creation","text":"<ul> <li>Clear Titles: Use descriptive, action-oriented titles</li> <li>Detailed Descriptions: Include context and requirements</li> <li>Specific Acceptance Criteria: Define what \"done\" means</li> <li>Comprehensive Test Strategy: Plan testing approach upfront</li> </ul>"},{"location":"development/taskmaster-guide/#task-management","title":"Task Management","text":"<ul> <li>Regular Updates: Update status frequently (daily minimum)</li> <li>Dependency Awareness: Consider impact on other tasks</li> <li>Documentation: Keep task details current and accurate</li> <li>Communication: Coordinate with team on shared work</li> </ul>"},{"location":"development/taskmaster-guide/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Test Strategy Compliance: Follow defined testing approach</li> <li>Code Review: Get peer review for all implementations</li> <li>Documentation Updates: Update docs with all changes</li> <li>Completion Verification: Ensure all criteria met before marking done</li> </ul>"},{"location":"development/taskmaster-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/taskmaster-guide/#common-issues","title":"Common Issues","text":""},{"location":"development/taskmaster-guide/#dependency-conflicts","title":"Dependency Conflicts","text":"<ul> <li>Circular Dependencies: Use dependency validation to identify</li> <li>Broken Links: Remove dependencies to deleted tasks</li> <li>Blocking Chains: Identify and resolve long dependency chains</li> </ul>"},{"location":"development/taskmaster-guide/#task-organization","title":"Task Organization","text":"<ul> <li>Overwhelming Complexity: Break down high-complexity tasks</li> <li>Unclear Requirements: Update task details with more specificity</li> <li>Priority Conflicts: Reassess and adjust task priorities</li> </ul>"},{"location":"development/taskmaster-guide/#integration-issues","title":"Integration Issues","text":"<ul> <li>Documentation Sync: Ensure docs reflect current task state</li> <li>Search Problems: Verify task content included in search index</li> <li>Navigation Issues: Check MkDocs navigation configuration</li> </ul>"},{"location":"development/taskmaster-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Refer to this guide and related documentation</li> <li>Team Coordination: Discuss issues in team meetings</li> <li>Process Improvement: Suggest improvements to task management process</li> <li>Tool Updates: Keep Task Master and related tools current</li> </ul> <p>For workflow-specific guidance, see Task Workflows and Development Process.</p>"},{"location":"hardware/gpio_assignments/","title":"GPIO Assignments","text":""},{"location":"hardware/gpio_assignments/#gpio-assignments","title":"GPIO Assignments","text":""},{"location":"hardware/gpio_assignments/#orlok","title":"Orlok","text":"<ul> <li>Hand Light: 26</li> <li>Motor1: DIR=18, PWM=13</li> <li>Motor2: DIR=23, PWM=12</li> <li>PIR Sensor: 16</li> <li>LED: 17</li> <li>Servo: 6</li> </ul>"},{"location":"hardware/gpio_assignments/#coffin","title":"Coffin","text":"<ul> <li>MDD10A Control Board</li> <li>Motor1: DIR=5, PWM=13</li> <li>PIR Sensor: 26</li> </ul>"},{"location":"hardware/gpio_assignments/#pumpkinhead","title":"Pumpkinhead","text":"<ul> <li>Motor1: DIR=26, PWM=13</li> <li>Sensor: 16</li> </ul>"},{"location":"hardware/hardware_schedule/","title":"Hardware Schedule","text":""},{"location":"hardware/hardware_schedule/#hardware-schedule","title":"Hardware Schedule","text":"<p>Core: - Raspberry Pi 4B, 4GB RAM, 256GB SD</p> <p>Audio Interface: - USB Audio Card</p> <p>Motor Control: - Cytron 2x10A Motor Driver</p> <p>Servo Controllers: - PCA9685 Controller</p> <p>Servos: - Hooyij 40kg Servo - Miuzei MG90S Micro Servo - GoBilda Stingray 2 Servo</p> <p>Linear Actuators: - 150mm Actuator - 12\" Coffin Actuator</p> <p>Misc: - Jeep Wiper Motor - PIR Motion Sensor</p>"},{"location":"integration/elevenlabs/","title":"ElevenLabs TTS","text":""},{"location":"integration/elevenlabs/#elevenlabs-integration","title":"ElevenLabs Integration","text":"<p>MonsterBox integrates ElevenLabs Text-to-Speech (TTS) to generate high-quality voice lines for animatronic characters. This integration allows users to select from a variety of voices, preview generated speech, and assign voices to characters or scenes.</p>"},{"location":"integration/elevenlabs/#how-elevenlabs-is-integrated","title":"How ElevenLabs is Integrated","text":"<ul> <li>ElevenLabs TTS is accessed via the MonsterBox web interface (\"Configure Voice\" button, scene editor, and sound management).</li> <li>The backend uses a Node.js API wrapper that communicates with the ElevenLabs API using a secret API key stored in environment variables.</li> <li>Voices are fetched via <code>/api/voice/available</code>, filtered for TTS capabilities, and displayed in the UI for selection.</li> <li>Voice generation (TTS) is triggered via <code>/api/voice/generate</code> and <code>/api/voice/generate-for-scene</code> endpoints.</li> </ul>"},{"location":"integration/elevenlabs/#api-key-configuration","title":"API Key Configuration","text":"<p>To use ElevenLabs, you must provide a valid API key. Set this in your <code>.env</code> file at the project root:</p> <pre><code>ELEVENLABS_API_KEY=your_actual_api_key_here\n</code></pre> <p>Restart the application after changing the key.</p>"},{"location":"integration/elevenlabs/#listing-and-using-voices","title":"Listing and Using Voices","text":"<p>MonsterBox fetches the list of available voices and displays them in the \"Configure Voice\" interface. Users can filter by gender, style, accent, and age, and preview each voice with different styles (e.g., neutral, happy, sad).</p>"},{"location":"integration/elevenlabs/#sample-code-fetching-voices-frontend","title":"Sample Code: Fetching Voices (Frontend)","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\nasync loadVoices() {\n    try {\n        this.showLoading('Loading voices...');\n        const response = await fetch('/api/voice/available');\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Failed to load voices');\n        }\n        const voices = await response.json();\n        this.voices = voices;\n        this.populateVoiceTable();\n        await this.loadRecentlyUsed();\n    } catch (error) {\n        console.error('Error loading voices:', error);\n        this.showError('Failed to load voices: ' + error.message);\n    } finally {\n        this.hideLoading();\n    }\n}\n</code></pre>"},{"location":"integration/elevenlabs/#filtering-for-tts-capabilities","title":"Filtering for TTS Capabilities","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\ngetVoiceStyles(voice) {\n    const baseStyles = ['neutral'];\n    if (voice.capabilities &amp;&amp; voice.capabilities['tts.vox_2_0']) {\n        baseStyles.push('happy', 'sad', 'angry', 'fearful');\n    }\n    return baseStyles;\n}\n</code></pre>"},{"location":"integration/elevenlabs/#generating-speech-preview","title":"Generating Speech (Preview)","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\nasync generatePreview(style = 'neutral') {\n    try {\n        this.showLoading('Generating preview...');\n        const previewText = document.querySelector('#previewText').value;\n        const speakerId = this.currentPreviewVoice.speaker_id;\n        if (!speakerId) throw new Error('No valid speaker ID found for this voice');\n        const response = await fetch('/api/voice/generate', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                speaker_id: speakerId,\n                text: previewText,\n                style,\n                characterId: this.characterId,\n                options: {\n                    speed: parseFloat(document.querySelector('#speed').value),\n                    pitch: parseInt(document.querySelector('#pitch').value),\n                    volume: parseInt(document.querySelector('#volume').value)\n                }\n            })\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Failed to generate preview');\n        }\n        const data = await response.json();\n        this.lastGeneratedAudio = data;\n        // Play the audio preview...\n    } catch (error) {\n        // Handle errors\n    } finally {\n        this.hideLoading();\n    }\n}\n</code></pre>"},{"location":"integration/elevenlabs/#typical-workflow","title":"Typical Workflow","text":"<ol> <li>Go to \"Configure Voice\" in the MonsterBox web UI.</li> <li>Browse and filter available voices (fetched from ElevenLabs).</li> <li>Preview voices with different styles and settings.</li> <li>Assign a selected voice to a character or scene.</li> <li>When a scene is played, MonsterBox generates and plays the TTS audio using the selected voice.</li> </ol>"},{"location":"integration/elevenlabs/#security-note","title":"Security Note","text":"<p>Never share your ElevenLabs API key publicly. The example above is for documentation only. Always use your own key and keep it secret.</p>"},{"location":"security/MCP-SETUP-NOTES/","title":"\ud83d\udd27 MCP Configuration Setup Notes","text":""},{"location":"security/MCP-SETUP-NOTES/#important-security-notice","title":"Important Security Notice","text":"<p>The <code>.cursor/mcp.json</code> file in this repository contains placeholder values for API keys. Do NOT commit actual API keys to this file.</p>"},{"location":"security/MCP-SETUP-NOTES/#setting-up-mcp-with-your-api-keys","title":"Setting Up MCP with Your API Keys","text":""},{"location":"security/MCP-SETUP-NOTES/#option-1-local-environment-variables-recommended","title":"Option 1: Local Environment Variables (Recommended)","text":"<ol> <li> <p>Ensure your <code>.env</code> file contains your actual API keys: <code>bash    ANTHROPIC_API_KEY=\"your_actual_anthropic_key_here\"    OPENAI_API_KEY=\"your_actual_openai_key_here\"    GOOGLE_API_KEY=\"your_actual_google_key_here\"    # ... other keys as needed</code></p> </li> <li> <p>The MCP server will automatically load these from your environment</p> </li> </ol>"},{"location":"security/MCP-SETUP-NOTES/#option-2-local-mcp-configuration-advanced","title":"Option 2: Local MCP Configuration (Advanced)","text":"<p>If you need to customize the MCP configuration locally:</p> <ol> <li> <p>Create a local copy of the MCP config: <code>bash    cp .cursor/mcp.json .cursor/mcp.local.json</code></p> </li> <li> <p>Add <code>.cursor/mcp.local.json</code> to your <code>.gitignore</code>: <code>bash    echo \".cursor/mcp.local.json\" &gt;&gt; .gitignore</code></p> </li> <li> <p>Update your local copy with actual API keys: <code>json    {        \"mcpServers\": {            \"task-master-ai\": {                \"command\": \"npx\",                \"args\": [\"-y\", \"--package=task-master-ai\", \"task-master-ai\"],                \"env\": {                    \"ANTHROPIC_API_KEY\": \"your_actual_anthropic_key_here\",                    \"OPENAI_API_KEY\": \"your_actual_openai_key_here\",                    \"GOOGLE_API_KEY\": \"your_actual_google_key_here\"                }            }        }    }</code></p> </li> <li> <p>Configure your IDE to use the local config file</p> </li> </ol>"},{"location":"security/MCP-SETUP-NOTES/#current-mcp-servers","title":"Current MCP Servers","text":""},{"location":"security/MCP-SETUP-NOTES/#1-task-master-ai","title":"1. Task Master AI","text":"<ul> <li>Purpose: AI-powered task management and automation</li> <li>Required Keys: ANTHROPIC_API_KEY (minimum)</li> <li>Optional Keys: OPENAI_API_KEY, GOOGLE_API_KEY, PERPLEXITY_API_KEY</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#2-monsterbox-log-collector","title":"2. MonsterBox Log Collector","text":"<ul> <li>Purpose: Collects logs from various sources for MCP integration</li> <li>Required Keys: None (uses environment variables from .env)</li> <li>Features: </li> <li>Browser console logs</li> <li>GitHub API logs  </li> <li>RPI console logs (via SSH)</li> <li>Ubuntu system logs</li> <li>MonsterBox application logs</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit actual API keys to version control</li> <li>Use environment variables for sensitive data</li> <li>Keep <code>.env</code> files in <code>.gitignore</code></li> <li>Use placeholder values in committed configuration files</li> <li>Regularly rotate API keys</li> <li>Monitor for accidental key exposure</li> </ol>"},{"location":"security/MCP-SETUP-NOTES/#testing-mcp-setup","title":"Testing MCP Setup","text":"<p>After configuring your API keys, test the MCP setup:</p> <pre><code># Test the complete MCP setup including log collection\nnpm run test:mcp\n\n# Test animatronic SSH connectivity\nnpm run test:animatronic-ssh\n</code></pre>"},{"location":"security/MCP-SETUP-NOTES/#troubleshooting","title":"Troubleshooting","text":""},{"location":"security/MCP-SETUP-NOTES/#api-key-not-found-errors","title":"\"API key not found\" errors","text":"<ul> <li>Verify your <code>.env</code> file contains the required keys</li> <li>Ensure the <code>.env</code> file is in the project root</li> <li>Check that key names match exactly (case-sensitive)</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#mcp-server-connection-issues","title":"MCP server connection issues","text":"<ul> <li>Verify the MCP server is properly configured in your IDE</li> <li>Check that the server command and arguments are correct</li> <li>Review server logs for detailed error messages</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#ssh-connectivity-issues","title":"SSH connectivity issues","text":"<ul> <li>Ensure animatronic RPIs are powered on and connected</li> <li>Verify SSH credentials are properly configured</li> <li>Test network connectivity to each RPI</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#related-documentation","title":"Related Documentation","text":"<ul> <li>Animatronic SSH Setup Guide</li> <li>Environment Variables Template</li> <li>MCP Log Collector Server</li> <li>Main Project Documentation</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/","title":"\ud83c\udf83 MonsterBox Animatronic Setup Guide","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#overview","title":"Overview","text":"<p>This guide will help you set up log collection for all your animatronic RPIs. Each animatronic (Orlok, Pumpkinhead, Coffin, etc.) will have its own RPI that needs to be configured for remote log collection.</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#quick-setup-automated","title":"\ud83d\ude80 Quick Setup (Automated)","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#option-1-powershell-script-recommended-for-windows","title":"Option 1: PowerShell Script (Recommended for Windows)","text":"<pre><code># Run the automated setup script\n.\\scripts\\setup-ssh-keys.ps1\n</code></pre> <p>This script will: - \u2705 Generate SSH keys if needed - \u2705 Set up SSH access to all your animatronic RPIs - \u2705 Configure log access permissions - \u2705 Test connections - \u2705 Create animatronic configuration file</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#option-2-web-interface-management","title":"Option 2: Web Interface Management","text":"<p>Access animatronic management through the MonsterBox web interface: 1. Navigate to Characters in the main menu 2. Select a character with animatronic features enabled 3. Click Edit to access animatronic management options</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#manual-setup-step-by-step","title":"\ud83d\udd27 Manual Setup (Step by Step)","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-1-find-your-rpi-ip-addresses","title":"Step 1: Find Your RPI IP Addresses","text":"<p>On each RPI, run:</p> <pre><code>hostname -I\n</code></pre> <p>Or check your router's admin panel for: - Device names like \"raspberrypi\", \"orlok\", \"pumpkinhead\", \"coffin\" - MAC addresses starting with common RPI prefixes</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-2-set-up-ssh-keys","title":"Step 2: Set Up SSH Keys","text":"<p>Generate SSH key (if you don't have one):</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"monsterbox@$(hostname)\"\n</code></pre> <p>Copy keys to each animatronic:</p> <pre><code># For Orlok\nssh-copy-id pi@192.168.1.100\n\n# For Pumpkinhead  \nssh-copy-id pi@192.168.1.101\n\n# For Coffin\nssh-copy-id pi@192.168.1.102\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-3-configure-log-access","title":"Step 3: Configure Log Access","text":"<p>On each RPI, set up sudo access for log collection:</p> <pre><code># SSH into each RPI\nssh pi@192.168.1.100\n\n# Add log access permissions\necho 'pi ALL=(ALL) NOPASSWD: /bin/journalctl' | sudo tee -a /etc/sudoers.d/monsterbox-logs\n\n# Test log access\nsudo journalctl -n 5 --no-pager\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-4-add-animatronics-to-monsterbox","title":"Step 4: Add Animatronics to MonsterBox","text":"<p>Add animatronics through the web interface: 1. Navigate to Characters &gt; Add New Character 2. Enable Animatronic Features in the character form 3. Configure RPI4b settings (IP address, SSH credentials, etc.) 4. Save the character configuration</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#default-animatronic-configuration","title":"\ud83d\udccb Default Animatronic Configuration","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#orlok-count-orlok","title":"Orlok (Count Orlok)","text":"<ul> <li>IP: 192.168.1.100</li> <li>Character: Vampire with moving arms and glowing eyes</li> <li>Parts: Right Arm of Satan, Left Arm of Manipulation, Hand of Azura, Eye of Orlok</li> <li>Services: monsterbox, ssh, gpio-control, servo-control</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#pumpkinhead","title":"Pumpkinhead","text":"<ul> <li>IP: 192.168.1.101  </li> <li>Character: Pumpkin-headed demon with articulated limbs</li> <li>Services: monsterbox, ssh, gpio-control, led-control</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#coffin","title":"Coffin","text":"<ul> <li>IP: 192.168.1.102</li> <li>Character: Coffin with opening lid and emerging figure</li> <li>Services: monsterbox, ssh, linear-actuator, sound</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#testing-your-setup","title":"\ud83e\uddea Testing Your Setup","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#test-individual-animatronic","title":"Test Individual Animatronic","text":"<p>Test specific animatronic connection via web interface: 1. Navigate to Characters &gt; [Character Name] &gt; Edit 2. Click \ud83e\uddea Test Connection button 3. Review the connection test results in the modal dialog</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#test-all-animatronics","title":"Test All Animatronics","text":"<pre><code># View all animatronic status\nnpm run animatronic:view\n\n# Test complete MCP setup\nnpm run test:mcp\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#collect-logs-from-all","title":"Collect Logs from All","text":"<pre><code># Collect logs from all configured animatronics\nnpm run collect:rpi-logs\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#management-commands","title":"\ud83d\udcca Management Commands","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#view-all-animatronics","title":"View All Animatronics","text":"<p>Navigate to Characters in the web interface to view all configured animatronics with their status indicators.</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#add-new-animatronic","title":"Add New Animatronic","text":"<ol> <li>Navigate to Characters &gt; Add New Character</li> <li>Enable Animatronic Features checkbox</li> <li>Configure RPI4b settings and SSH credentials</li> <li>Save the character</li> </ol>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#configure-existing-animatronic","title":"Configure Existing Animatronic","text":"<ol> <li>Navigate to Characters &gt; [Character Name] &gt; Edit</li> <li>Modify animatronic settings in the Animatronic Configuration section</li> <li>Use management buttons for testing, log collection, and system operations</li> </ol>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#ssh-connection-failed","title":"SSH Connection Failed","text":"<pre><code># Check if RPI is reachable\nping 192.168.1.100\n\n# Check SSH service on RPI\nssh pi@192.168.1.100\nsudo systemctl status ssh\nsudo systemctl enable ssh\nsudo systemctl start ssh\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#log-access-denied","title":"Log Access Denied","text":"<pre><code># On the RPI, check sudo configuration\nsudo visudo -c\nsudo cat /etc/sudoers.d/monsterbox-logs\n\n# Re-add permissions if needed\necho 'pi ALL=(ALL) NOPASSWD: /bin/journalctl' | sudo tee -a /etc/sudoers.d/monsterbox-logs\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#ip-address-changed","title":"IP Address Changed","text":"<p>Update animatronic IP address via web interface: 1. Navigate to Characters &gt; [Character Name] &gt; Edit 2. Update the IP Address field in the RPI4b Configuration section 3. Click \ud83d\udd0d Test SSH Connection to verify the new IP address 4. Save the character configuration</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#configuration-files","title":"\ud83d\udcc1 Configuration Files","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#animatronic-configuration","title":"Animatronic Configuration","text":"<ul> <li>Location: <code>data/animatronics.json</code></li> <li>Contains: All animatronic definitions, IPs, services, parts</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#log-storage","title":"Log Storage","text":"<ul> <li>Location: <code>log/rpi-logs-YYYY-MM-DD.log</code></li> <li>Format: JSON entries with timestamp and animatronic data</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#adding-new-animatronics","title":"\ud83c\udfaf Adding New Animatronics","text":"<p>When you add a new animatronic:</p> <ol> <li>Set up the RPI with Raspberry Pi OS</li> <li>Configure network and note the IP address</li> <li>Enable SSH on the RPI</li> <li>Add via web interface:</li> <li>Navigate to Characters &gt; Add New Character</li> <li>Enable Animatronic Features</li> <li>Configure RPI4b settings with the new IP address</li> <li>Save the character configuration</li> <li>Test the connection:</li> <li>Navigate to Characters &gt; [Character Name] &gt; Edit</li> <li>Click \ud83e\uddea Test Connection button</li> <li>Verify all tests pass (ping, SSH, log collection)</li> </ol>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#web-interface","title":"\ud83c\udf10 Web Interface","text":"<p>Access your animatronic logs through: - Main Logs: <code>http://localhost:3000/logs</code> - Health Status: <code>http://localhost:3000/health</code> - Real-time Stream: <code>http://localhost:3000/logs/stream</code></p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#complete-mcp-status","title":"\ud83c\udf83 Complete MCP Status","text":"<p>After setup, your MonsterBox will have: - \u2705 Browser Log Collection - Client-side error tracking - \u2705 GitHub Log Collection - Repository activity monitoring - \u2705 Animatronic Log Collection - RPI system monitoring - \u2705 Application Log Collection - MonsterBox internal logs - \u2705 Health Monitoring - System status endpoints - \u2705 Real-time Streaming - Live log monitoring</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Run the automated setup: <code>.\\scripts\\setup-ssh-keys.ps1</code></li> <li>Test your setup: <code>npm run test:mcp</code></li> <li>View your animatronics: <code>npm run animatronic:view</code></li> <li>Collect logs: <code>npm run collect:rpi-logs</code></li> <li>Monitor in real-time: Visit <code>http://localhost:3000/logs</code></li> </ol> <p>Your MonsterBox MCP log collection system will be fully operational and ready to monitor all your Halloween animatronics! \ud83c\udf83\ud83d\udc7b\ud83e\udd16</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/","title":"\ud83c\udf83 MonsterBox Animatronic SSH Setup Guide","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#overview","title":"Overview","text":"<p>This guide covers the secure SSH configuration for all MonsterBox animatronic RPIs using individual credential management through environment variables. Each animatronic can have its own distinct SSH credentials for enhanced security and scalability.</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#ssh-usage-scope","title":"\ud83c\udfaf SSH Usage Scope","text":"<p>The SSH access configured in this guide is specifically for: - MCP (Model Context Protocol) log collection and monitoring - Development work using Augment AI assistant in VS Code - NOT for runtime MonsterBox application functionality (the main show operations don't require SSH)</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>Individual Credentials: Each animatronic has its own SSH credentials for enhanced security</li> <li>Scalable Design: Easy to add new animatronics with unique credentials</li> <li>Environment Variables: No hardcoded credentials in source code</li> <li>Git Security: <code>.env</code> file excluded from version control</li> <li>Fallback Support: Legacy shared credentials for backward compatibility</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>All animatronic RPIs are connected to the network</li> <li>SSH is enabled on each RPI</li> <li>You have physical access to each RPI for initial setup</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#step-1-configure-environment-variables","title":"Step 1: Configure Environment Variables","text":"<p>The SSH credentials are configured with individual credentials per animatronic in your <code>.env</code> file:</p> <pre><code># Individual Animatronic SSH Configuration\n# Used for MCP log collection and development work with Augment AI assistant\n# NOT used for runtime MonsterBox application functionality\n\nORLOK_SSH_USER=\"remote\"\nORLOK_SSH_PASSWORD=\"klrklr89!\"\n\nPUMPKINHEAD_SSH_USER=\"remote\"\nPUMPKINHEAD_SSH_PASSWORD=\"klrklr89!\"\n\nCOFFIN_SSH_USER=\"remote\"\nCOFFIN_SSH_PASSWORD=\"klrklr89!\"\n\n# Legacy fallback credentials (for backward compatibility)\nRPI_SSH_USER=\"remote\"\nRPI_SSH_PASSWORD=\"klrklr89!\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#step-2-test-current-configuration","title":"Step 2: Test Current Configuration","text":"<p>Run the comprehensive SSH connectivity test:</p> <pre><code>npm run test:animatronic-ssh\n</code></pre> <p>This will test all three animatronics: - Orlok (192.168.8.120) - Pumpkinhead (192.168.1.101) - Currently not running - Coffin (192.168.8.149)</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#step-3-setup-each-animatronic-rpi","title":"Step 3: Setup Each Animatronic RPI","text":"<p>For each RPI that fails the connectivity test, follow these steps:</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#on-each-rpi-via-keyboardmonitor-or-existing-ssh","title":"On Each RPI (via keyboard/monitor or existing SSH):","text":"<ol> <li> <p>Create the remote user: <code>bash    sudo useradd -m -s /bin/bash remote    sudo passwd remote    # Enter password: klrklr89!</code></p> </li> <li> <p>Add user to sudo group: <code>bash    sudo usermod -aG sudo remote</code></p> </li> <li> <p>Enable SSH service: <code>bash    sudo systemctl enable ssh    sudo systemctl start ssh</code></p> </li> <li> <p>Configure log access permissions: <code>bash    echo 'remote ALL=(ALL) NOPASSWD: /bin/journalctl' | sudo tee -a /etc/sudoers.d/monsterbox-logs    sudo chmod 440 /etc/sudoers.d/monsterbox-logs</code></p> </li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#from-your-development-machine","title":"From Your Development Machine:","text":"<ol> <li>Setup SSH key authentication:    ```bash    # Generate SSH key if you don't have one    ssh-keygen -t rsa -b 4096 -C \"monsterbox@$(hostname)\"</li> </ol> <p># Copy SSH key to each animatronic    ssh-copy-id remote@192.168.8.120  # Orlok    ssh-copy-id remote@192.168.1.101  # Pumpkinhead (not currently running)    ssh-copy-id remote@192.168.8.149  # Coffin    ```</p> <ol> <li>Test SSH connections: <code>bash    ssh remote@192.168.8.120 \"echo 'Orlok SSH test successful'\"    ssh remote@192.168.1.101 \"echo 'Pumpkinhead SSH test successful'\"    ssh remote@192.168.8.149 \"echo 'Coffin SSH test successful'\"</code></li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#testing-and-validation","title":"\ud83e\uddea Testing and Validation","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#comprehensive-test-suite","title":"Comprehensive Test Suite","text":"<p>Run the full MCP test suite including SSH connectivity:</p> <pre><code>npm run test:mcp\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#animatronic-specific-ssh-tests","title":"Animatronic-Specific SSH Tests","text":"<p>Test only SSH connectivity for all animatronics:</p> <pre><code>npm run test:animatronic-ssh\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#individual-animatronic-management","title":"Individual Animatronic Management","text":"<p>Animatronic management is now integrated into the MonsterBox web interface:</p> <ol> <li>Access via Web Interface:</li> <li>Navigate to Characters in the main menu</li> <li>Select a character with animatronic features enabled</li> <li> <p>Click Edit to access animatronic management options</p> </li> <li> <p>Available Management Features:</p> </li> <li>\ud83e\uddea Test Connection - Test network and SSH connectivity</li> <li>\ud83d\udccb Collect Logs - Gather system logs from the RPI</li> <li>\ud83d\udcca System Info - View hardware status and system information</li> <li>\ud83d\udd04 Reboot System - Remotely reboot the animatronic RPI</li> <li>\u2699\ufe0f System Configuration - Manage character-specific settings</li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#log-collection","title":"\ud83d\udcca Log Collection","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#manual-log-collection","title":"Manual Log Collection","text":"<p>Collect logs from a specific animatronic:</p> <pre><code># Via web API\ncurl \"http://localhost:3000/logs/rpi/192.168.8.120?lines=50\"  # Orlok\ncurl \"http://localhost:3000/logs/rpi/192.168.8.149?lines=50\"  # Coffin\n\n# Via web interface\n# Navigate to Characters &gt; [Character Name] &gt; Edit &gt; Collect Logs button\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#automated-log-collection","title":"Automated Log Collection","text":"<p>The MCP log collector server automatically uses the environment variables:</p> <pre><code>// Example MCP tool call\n{\n  \"name\": \"collect_rpi_console_logs\",\n  \"arguments\": {\n    \"host\": \"192.168.8.120\",\n    \"lines\": 100\n  }\n}\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#common-issues","title":"Common Issues","text":"<ol> <li>\"Connection refused\" errors:</li> <li>Ensure SSH service is running: <code>sudo systemctl status ssh</code></li> <li> <p>Check firewall settings: <code>sudo ufw status</code></p> </li> <li> <p>\"Permission denied\" errors:</p> </li> <li>Verify user exists: <code>id remote</code></li> <li> <p>Check SSH key setup: <code>ssh-copy-id remote@IP_ADDRESS</code></p> </li> <li> <p>\"sudo: journalctl: command not found\":</p> </li> <li> <p>Install systemd: <code>sudo apt update &amp;&amp; sudo apt install systemd</code></p> </li> <li> <p>Log collection fails:</p> </li> <li>Verify sudo permissions: <code>sudo visudo -f /etc/sudoers.d/monsterbox-logs</code></li> <li>Test manually: <code>ssh remote@IP \"sudo journalctl -n 5\"</code></li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Test network connectivity\nping -c 1 192.168.8.120  # Orlok\nping -c 1 192.168.8.149  # Coffin\n\n# Test SSH without keys (will prompt for password)\nssh -o PreferredAuthentications=password remote@192.168.8.120  # Orlok\nssh -o PreferredAuthentications=password remote@192.168.8.149  # Coffin\n\n# Test SSH with keys\nssh -o BatchMode=yes remote@192.168.8.120 \"echo 'SSH key test'\"  # Orlok\nssh -o BatchMode=yes remote@192.168.8.149 \"echo 'SSH key test'\"  # Coffin\n\n# Test log access\nssh remote@192.168.8.120 \"sudo journalctl -n 5 --no-pager\"  # Orlok\nssh remote@192.168.8.149 \"sudo journalctl -n 5 --no-pager\"  # Coffin\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#environment-variable-security","title":"Environment Variable Security","text":"<ul> <li>\u2705 <code>.env</code> file is in <code>.gitignore</code></li> <li>\u2705 Credentials are not hardcoded in source files</li> <li>\u2705 Environment variables are loaded at runtime</li> <li>\u2705 Default fallback values provided for development</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#ssh-security","title":"SSH Security","text":"<ul> <li>\u2705 SSH key authentication preferred over passwords</li> <li>\u2705 Limited sudo access (only journalctl command)</li> <li>\u2705 Dedicated user account (not root or pi)</li> <li>\u2705 Connection timeouts configured</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#network-security","title":"Network Security","text":"<ul> <li>\ud83d\udd27 Consider changing default SSH port (22)</li> <li>\ud83d\udd27 Implement fail2ban for brute force protection</li> <li>\ud83d\udd27 Use VPN for remote access</li> <li>\ud83d\udd27 Regular security updates on all RPIs</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#file-structure","title":"\ud83d\udcc1 File Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 .env                           # SSH credentials (secure)\n\u251c\u2500\u2500 .env.example                   # Template with placeholders\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 animatronics.json         # Animatronic configurations (legacy)\n\u2502   \u2514\u2500\u2500 characters.json           # Character configurations (includes animatronics)\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 test-animatronic-ssh.js   # SSH connectivity tests\n\u2502   \u251c\u2500\u2500 test-mcp-setup.js         # Comprehensive MCP tests\n\u2502   \u2514\u2500\u2500 setup-ssh-keys.ps1        # PowerShell setup script\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 animatronicService.js     # Animatronic management service\n\u2502   \u2514\u2500\u2500 systemConfigService.js    # Character-specific system config\n\u2514\u2500\u2500 mcp-servers/\n    \u2514\u2500\u2500 log-collector-server.js   # MCP log collection server\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After completing the SSH setup:</p> <ol> <li> <p>Run comprehensive tests: <code>bash    npm run test:mcp</code></p> </li> <li> <p>Start log collection: <code>bash    npm run collect:rpi-logs</code></p> </li> <li> <p>Monitor animatronic status: <code>bash    npm run animatronic:view</code></p> </li> <li> <p>Set up automated monitoring (optional)</p> </li> <li>Configure alerting for connection failures (optional)</li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#support","title":"\ud83d\udcde Support","text":"<p>If you encounter issues:</p> <ol> <li>Check the test output: <code>npm run test:animatronic-ssh</code></li> <li>Review the logs in <code>log/</code> directory</li> <li>Use the web interface: Navigate to Characters &gt; [Character Name] &gt; Edit &gt; Test Connection</li> <li>Verify environment variables are loaded correctly</li> </ol> <p>The SSH setup provides a secure, scalable foundation for managing all current and future animatronic RPIs in the MonsterBox system.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/","title":"\ud83c\udf83 MonsterBox MCP Log Collection System","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#overview","title":"Overview","text":"<p>Your MonsterBox now has a comprehensive Model Context Protocol (MCP) log collection system that gathers errors, logs, and monitoring data from multiple sources:</p> <ul> <li>Browser Console - JavaScript errors, console logs, network failures \u2705 OPERATIONAL</li> <li>GitHub Repository - Events, workflows, issues, commits, actions \u2705 OPERATIONAL</li> <li>MonsterBox Application - Winston logs, API logs, error logs \u2705 OPERATIONAL</li> <li>RPI4b Console - System logs, service logs, kernel messages \ud83d\udd27 NEEDS SSH SETUP</li> <li>Orlok (192.168.8.120) - Network reachable, SSH authentication needed</li> <li>Coffin (192.168.8.149) - Network unreachable</li> <li>Pumpkinhead (192.168.1.101) - Disabled (offline)</li> <li>Ubuntu System Logs - Syslog, auth logs, daemon logs \u274c DISABLED</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#current-status-89-success-rate","title":"\ud83d\udcca Current Status: 89% Success Rate","text":"<ul> <li>3/5 data sources fully operational</li> <li>2/5 data sources need configuration</li> <li>Only enabled animatronics are tested (Pumpkinhead excluded)</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#test-your-mcp-setup","title":"Test Your MCP Setup","text":"<pre><code>npm run test:mcp\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#collect-github-logs","title":"Collect GitHub Logs","text":"<pre><code>npm run collect:github-logs\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#check-api-keys-includes-mcp-servers","title":"Check API Keys (includes MCP servers)","text":"<pre><code>npm run check-api-keys\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#animatronic-status-configuration","title":"\ud83e\udd16 Animatronic Status Configuration","text":"<p>The MCP system now intelligently handles animatronic status:</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#enabled-animatronics-tested","title":"Enabled Animatronics (Tested)","text":"<ul> <li>Orlok (192.168.8.120) - <code>status: \"running\"</code>, <code>enabled: true</code></li> <li>Coffin (192.168.8.149) - <code>status: \"running\"</code>, <code>enabled: true</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#disabled-animatronics-skipped","title":"Disabled Animatronics (Skipped)","text":"<ul> <li>Pumpkinhead (192.168.1.101) - <code>status: \"offline\"</code>, <code>enabled: false</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>data/animatronics.json</code> - Individual animatronic settings</li> <li><code>data/rpi-config.json</code> - RPI system configuration</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#mcp-servers-configured","title":"\ud83d\udccb MCP Servers Configured","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#1-task-master-ai","title":"1. Task Master AI","text":"<ul> <li>Purpose: Project management and task automation</li> <li>Status: \u2705 Configured with your API keys</li> <li>Location: <code>.cursor/mcp.json</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#2-monsterbox-log-collector","title":"2. MonsterBox Log Collector","text":"<ul> <li>Purpose: Multi-source log collection and analysis</li> <li>Status: \u2705 Configured and ready</li> <li>Location: <code>mcp-servers/log-collector-server.js</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#mcp-tools-available","title":"\ud83d\udd27 MCP Tools Available","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-log-collection","title":"Browser Log Collection","text":"<pre><code>// Automatically collects:\n- Console logs (log, info, warn, error, debug)\n- JavaScript errors and stack traces\n- Unhandled promise rejections\n- Network request failures\n- Performance metrics\n- User interactions\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-log-collection","title":"GitHub Log Collection","text":"<pre><code>// Available tools:\ncollect_github_logs({\n    repo: \"MonsterBox\",\n    events: [\"push\", \"pull_request\", \"issues\"]\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#system-log-collection","title":"System Log Collection","text":"<pre><code>// Available tools:\ncollect_rpi_console_logs({\n    host: \"your-rpi-ip\",\n    lines: 100\n})\n\ncollect_ubuntu_system_logs({\n    host: \"your-ubuntu-ip\", \n    logTypes: [\"syslog\", \"auth\", \"kern\"],\n    since: \"1 hour ago\"\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#log-analysis","title":"Log Analysis","text":"<pre><code>// Available tools:\nanalyze_logs({\n    sources: [\"browser\", \"github\", \"system\"],\n    pattern: \"error|exception|fail\"\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#web-endpoints","title":"\ud83c\udf10 Web Endpoints","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-log-collection_1","title":"Browser Log Collection","text":"<ul> <li>POST <code>/logs/browser</code> - Receive browser logs</li> <li>GET <code>/logs/system</code> - Collect system logs</li> <li>GET <code>/logs/rpi/:host</code> - Collect RPI logs</li> <li>GET <code>/logs/application</code> - Get MonsterBox logs</li> <li>POST <code>/logs/analyze</code> - Analyze collected logs</li> <li>GET <code>/logs/stream</code> - Real-time log streaming</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#health-monitoring","title":"Health Monitoring","text":"<ul> <li>GET <code>/health</code> - Basic health check</li> <li>GET <code>/health/api-keys</code> - API key status</li> <li>GET <code>/health/environment</code> - Environment variables</li> <li>GET <code>/health/connectivity</code> - Service connectivity</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#file-structure","title":"\ud83d\udcc1 File Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 mcp-servers/\n\u2502   \u2514\u2500\u2500 log-collector-server.js     # MCP log collection server\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 github-log-collector.js     # GitHub API log collector\n\u2502   \u2514\u2500\u2500 test-mcp-setup.js          # MCP setup testing\n\u251c\u2500\u2500 public/js/\n\u2502   \u2514\u2500\u2500 log-collector.js           # Browser log collection client\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 logRoutes.js               # Enhanced log collection API\n\u251c\u2500\u2500 .cursor/\n\u2502   \u2514\u2500\u2500 mcp.json                   # MCP server configuration\n\u2514\u2500\u2500 log/\n    \u251c\u2500\u2500 browser.log                # Browser logs\n    \u251c\u2500\u2500 github-YYYY-MM-DD.log      # GitHub logs\n    \u2514\u2500\u2500 mcp-test-YYYY-MM-DD.json   # MCP test results\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#environment-variables","title":"\ud83d\udd11 Environment Variables","text":"<p>Your <code>.env</code> file now includes:</p> <pre><code># API Keys for MCP servers\nANTHROPIC_API_KEY=\"your-key\"\nOPENAI_API_KEY=\"your-key\" \nGOOGLE_API_KEY=\"your-key\"\n\n# Optional for GitHub log collection\nGITHUB_TOKEN=\"your-github-token\"\n\n# Application configuration\nSESSION_SECRET=\"your-session-secret\"\nNODE_ENV=\"development\"\nPORT=\"3000\"\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#testing-commands","title":"\ud83e\uddea Testing Commands","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#complete-mcp-test-suite","title":"Complete MCP Test Suite","text":"<pre><code>npm run test:mcp\n</code></pre> <p>Tests all MCP components, endpoints, and integrations.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#api-key-testing","title":"API Key Testing","text":"<pre><code>npm run check-api-keys\n</code></pre> <p>Verifies all API keys work with their services.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-log-collection_1","title":"GitHub Log Collection","text":"<pre><code>npm run collect:github-logs\n</code></pre> <p>Collects recent GitHub repository activity.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#log-collection-examples","title":"\ud83d\udcca Log Collection Examples","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-logs","title":"Browser Logs","text":"<pre><code>// Automatic collection of:\n{\n  \"type\": \"console\",\n  \"level\": \"error\", \n  \"message\": \"Failed to load scene data\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"url\": \"http://localhost:3000/scenes\",\n  \"sessionId\": \"mb-1705312200000-abc123\"\n}\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-logs","title":"GitHub Logs","text":"<pre><code>// Repository events:\n{\n  \"type\": \"PushEvent\",\n  \"actor\": \"arwpc\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"payload\": {\n    \"commits\": [...]\n  }\n}\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#system-logs","title":"System Logs","text":"<pre><code>// RPI/Ubuntu logs:\n{\n  \"timestamp\": \"2024-01-15 10:30:00\",\n  \"host\": \"monsterbox-rpi\",\n  \"service\": \"systemd\",\n  \"message\": \"Started MonsterBox service\"\n}\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#adding-rpi4b-log-collection","title":"Adding RPI4b Log Collection","text":"<ol> <li>Set up SSH key authentication to your RPI</li> <li>Update the log collection calls with your RPI IP:</li> </ol> <pre><code>collect_rpi_console_logs({\n    host: \"192.168.1.100\",  // Your RPI IP\n    lines: 100,\n    service: \"monsterbox\"   // Optional: specific service\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#adding-github-token","title":"Adding GitHub Token","text":"<ol> <li>Create a GitHub Personal Access Token</li> <li>Add to your <code>.env</code> file:</li> </ol> <pre><code>GITHUB_TOKEN=\"ghp_your_token_here\"\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#configuring-ubuntu-system-logs","title":"Configuring Ubuntu System Logs","text":"<pre><code>collect_ubuntu_system_logs({\n    host: \"your-ubuntu-server\",\n    logTypes: [\"syslog\", \"auth\", \"kern\", \"daemon\"],\n    since: \"1 hour ago\"\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#mcp-server-not-starting","title":"MCP Server Not Starting","text":"<pre><code># Check MCP configuration\ncat .cursor/mcp.json\n\n# Test MCP server manually\nnode mcp-servers/log-collector-server.js\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-logs-not-collecting","title":"Browser Logs Not Collecting","text":"<ol> <li>Check if log-collector.js is loaded in browser</li> <li>Verify <code>/logs/browser</code> endpoint is accessible</li> <li>Check browser console for errors</li> </ol>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-api-rate-limits","title":"GitHub API Rate Limits","text":"<ul> <li>Without token: 60 requests/hour</li> <li>With token: 5000 requests/hour</li> <li>Check rate limit: <code>npm run collect:github-logs</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#system-log-access-issues","title":"System Log Access Issues","text":"<ul> <li>Ensure SSH access to remote systems</li> <li>Check sudo permissions for journalctl</li> <li>Verify system log paths exist</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#monitoring-dashboard","title":"\ud83d\udcc8 Monitoring Dashboard","text":"<p>Access your logs through: - Web Interface: <code>http://localhost:3000/logs</code> - Health Status: <code>http://localhost:3000/health</code> - Real-time Stream: <code>http://localhost:3000/logs/stream</code></p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Run the test suite: <code>npm run test:mcp</code></li> <li>Configure your RPI IP in log collection calls</li> <li>Add GitHub token for enhanced GitHub log collection</li> <li>Set up automated log collection using MCP tools</li> <li>Monitor logs through the web interface</li> </ol> <p>Your MonsterBox MCP log collection system is now ready to gather comprehensive monitoring data from all your sources! \ud83c\udf83\ud83d\udc7b\ud83e\udd16</p>"}]}