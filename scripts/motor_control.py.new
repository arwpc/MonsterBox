#!/usr/bin/env python3

import lgpio
import time
import sys
import json

def log_info(message):
    print(json.dumps({"level": "info", "message": message}), file=sys.stderr, flush=True)

def log_error(message):
    print(json.dumps({"level": "error", "message": message}), file=sys.stderr, flush=True)

def control_motor(direction, speed, duration, dir_pin, pwm_pin):
    """Simple DC motor control for the MDD10A motor controller"""
    h = None
    
    try:
        # Convert parameters to the right types
        dir_pin = int(dir_pin)
        pwm_pin = int(pwm_pin)
        speed = min(100, max(0, int(speed)))  # Ensure 0-100 range
        duration_ms = int(duration)
        
        # Cap duration at 5 seconds for safety
        duration_sec = min(duration_ms / 1000.0, 5.0)
        
        # Initialize GPIO
        h = lgpio.gpiochip_open(0)
        log_info(f"GPIO initialized successfully")
        
        # Set up pins
        lgpio.gpio_claim_output(h, dir_pin)
        lgpio.gpio_claim_output(h, pwm_pin)
        log_info(f"Pins configured - dir_pin: {dir_pin}, pwm_pin: {pwm_pin}")
        
        # Set initial state - always ensure PWM is off before changing direction
        lgpio.gpio_write(h, pwm_pin, 0)
        
        # Set direction - MDD10A uses LOW for forward, HIGH for reverse
        dir_value = 0 if direction.lower() == 'forward' else 1
        lgpio.gpio_write(h, dir_pin, dir_value)
        log_info(f"Set direction pin ({dir_pin}) to {'LOW' if dir_value == 0 else 'HIGH'} ({direction})")
        
        # For safety, wait a moment after setting direction
        time.sleep(0.1)
        
        # Convert speed (0-100) to appropriate GPIO level
        # For MDD10A, it's just binary (ON/OFF) with direct GPIO
        if speed > 0:
            log_info(f"Setting motor speed to ON (speed={speed}%)")
            lgpio.gpio_write(h, pwm_pin, 1)  # Turn on motor
            
            # Run for specified duration
            time.sleep(duration_sec)
            
            # Turn off motor
            lgpio.gpio_write(h, pwm_pin, 0)
        
        log_info(f"Motor ran for {duration_ms} ms")
        return True
        
    except Exception as e:
        log_error(f"Error during motor control: {str(e)}")
        return False
        
    finally:
        # Clean up
        if h is not None:
            try:
                # Make sure motor is stopped
                if pwm_pin is not None:
                    lgpio.gpio_write(h, pwm_pin, 0)
                
                # Free all resources
                lgpio.gpiochip_close(h)
                log_info("GPIO cleanup completed")
            except Exception as e:
                log_error(f"Error during cleanup: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) < 6:
        log_error("Usage: python3 motor_control.py <direction> <speed> <duration> <dir_pin> <pwm_pin>")
        print(json.dumps({"status": "error", "message": "Invalid number of arguments"}))
        sys.exit(1)

    try:
        direction = sys.argv[1]
        speed = sys.argv[2]
        duration = sys.argv[3]
        dir_pin = sys.argv[4]
        pwm_pin = sys.argv[5]

        log_info(f"Starting motor control with parameters: direction={direction}, speed={speed}, duration={duration}, dir_pin={dir_pin}, pwm_pin={pwm_pin}")
        
        success = control_motor(direction, speed, duration, dir_pin, pwm_pin)
        if success:
            log_info("Motor control completed successfully")
            print(json.dumps({"status": "success", "message": "Motor control completed"}))
            sys.exit(0)
        else:
            log_error("Motor control failed")
            print(json.dumps({"status": "error", "message": "Motor control failed"}))
            sys.exit(1)
    except Exception as e:
        error_msg = f"Error controlling motor: {str(e)}"
        log_error(error_msg)
        print(json.dumps({"status": "error", "message": error_msg}))
        sys.exit(1)
