# MonsterBox Webcam System Implementation

## Overview
Implement a comprehensive webcam management system for MonsterBox that integrates webcams as character-specific parts, provides persistent streaming, and enables public web access.

## Core Requirements

### 1. Webcam as Part Type
- Create "webcam" part type in existing parts system
- Enable character-specific webcam assignment (0 or 1 webcam per character)
- Implement webcam detection on RPI4b systems
- Add configurable camera settings (resolution, FPS) with validation

### 2. Character Integration
- Add "Video Configuration" section to character edit forms
- Implement embedded video preview in character management
- Create webcam configuration modal with settings
- Remove legacy "Video" button from main navigation
- Reorganize character edit form by functional sections

### 3. Persistent Streaming Architecture
- Replace current start/stop video approach with continuous streaming
- Implement shared stream access without locking conflicts
- Enable multiple application components to access streams simultaneously
- Add automatic reconnection and error handling
- Support public web access via direct browser URLs

### 4. Technical Implementation
- Create webcamService.js for centralized webcam management
- Implement webcam detection scripts for RPI4b systems
- Add character-webcam relationship management
- Create persistent streaming service with lifecycle management
- Add multi-client support for simultaneous stream access

### 5. UI/UX Enhancements
- Embedded video preview windows in character edit forms
- Responsive design for different screen sizes
- Logical reorganization of character edit form sections
- Webcam configuration modal with real-time settings validation
- Cross-browser compatibility for public webcam access

### 6. Testing and Validation
- Comprehensive testing suite for webcam detection and assignment
- Stream persistence and sharing tests
- UI functionality tests across character edit forms
- Cross-browser compatibility testing for public access
- RPI4b hardware testing on Orlok (192.168.8.120) and Coffin (192.168.8.140)
- MCP log integration for debugging and issue resolution

### 7. Future Readiness
- Architecture designed to support OpenCV integration for person tracking
- Preparation for servo integration with head-tracking capabilities
- Scalable design for additional webcam features

## Success Criteria
- Each character can have 0 or 1 webcam assigned as a part
- Webcam streams persist across page navigation
- Multiple users can access webcam feeds simultaneously
- Public webcam URLs work in standard web browsers
- Character edit forms include integrated video configuration
- All functionality tested and validated on operational RPI4b systems
- Legacy video route functionality migrated and removed

## Technical Constraints
- Test only on Orlok (192.168.8.120) and Coffin (192.168.8.140) RPIs
- Exclude Pumpkinhead from testing (not operational)
- Maintain compatibility with existing MonsterBox architecture
- Use existing authentication and security patterns
- Preserve all working functionality from current camera implementation
