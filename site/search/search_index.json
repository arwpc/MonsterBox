{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MonsterBox","text":"<p>MonsterBox is a refactored scene builder application designed to manage scenes and steps efficiently for animatronic automation. It integrates hardware components (I2C, GPIO, servos, sensors, audio, cameras) and provides a web-based interface for easy control and configuration.</p>"},{"location":"MCP-REMOTE-CAPABILITIES/","title":"\ud83c\udf83 MonsterBox MCP Remote Capabilities","text":""},{"location":"MCP-REMOTE-CAPABILITIES/#overview","title":"Overview","text":"<p>The MonsterBox MCP (Model Context Protocol) system now includes two powerful capabilities for remote debugging and monitoring of animatronic RPI4b systems through VS Code and Augment AI:</p> <ol> <li>Remote Command Execution - Execute shell commands directly on Orlok and Coffin RPIs</li> <li>Comprehensive Log Collection - Collect both application and system logs from the RPIs</li> </ol>"},{"location":"MCP-REMOTE-CAPABILITIES/#supported-systems","title":"Supported Systems","text":"<ul> <li>Orlok - 192.168.8.120 \u2705</li> <li>Coffin - 192.168.8.140 \u2705  </li> <li>Pumpkinhead - 192.168.1.101 \u274c (Excluded as requested)</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#1-remote-command-execution","title":"1. Remote Command Execution","text":""},{"location":"MCP-REMOTE-CAPABILITIES/#mcp-tool-execute_remote_command","title":"MCP Tool: <code>execute_remote_command</code>","text":"<p>Execute shell commands on the animatronic RPI systems through automated SSH connections.</p>"},{"location":"MCP-REMOTE-CAPABILITIES/#parameters","title":"Parameters:","text":"<ul> <li><code>host</code> (required) - RPI IP address or name (<code>192.168.8.120</code>, <code>192.168.8.140</code>, <code>orlok</code>, <code>coffin</code>)</li> <li><code>command</code> (required) - Shell command to execute</li> <li><code>timeout</code> (optional) - Command timeout in seconds (default: 30)</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#safety-features","title":"Safety Features:","text":"<ul> <li>Only allows Orlok and Coffin systems</li> <li>Blocks dangerous commands (<code>rm -rf</code>, <code>dd</code>, <code>mkfs</code>, <code>shutdown</code>, etc.)</li> <li>Uses existing SSH credentials from <code>.env</code> file</li> <li>Automatic timeout protection</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#example-usage","title":"Example Usage:","text":"<pre><code>// Get system information\n{\n  \"name\": \"execute_remote_command\",\n  \"arguments\": {\n    \"host\": \"192.168.8.120\",\n    \"command\": \"uname -a\"\n  }\n}\n\n// Check disk usage\n{\n  \"name\": \"execute_remote_command\", \n  \"arguments\": {\n    \"host\": \"orlok\",\n    \"command\": \"df -h\"\n  }\n}\n\n// Check running processes\n{\n  \"name\": \"execute_remote_command\",\n  \"arguments\": {\n    \"host\": \"coffin\", \n    \"command\": \"ps aux | grep monsterbox\"\n  }\n}\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#2-comprehensive-log-collection","title":"2. Comprehensive Log Collection","text":""},{"location":"MCP-REMOTE-CAPABILITIES/#mcp-tool-collect_comprehensive_rpi_logs","title":"MCP Tool: <code>collect_comprehensive_rpi_logs</code>","text":"<p>Collect detailed logs from animatronic RPI systems including MonsterBox application logs and Linux system logs.</p>"},{"location":"MCP-REMOTE-CAPABILITIES/#parameters_1","title":"Parameters:","text":"<ul> <li><code>host</code> (required) - RPI IP address or name</li> <li><code>logTypes</code> (optional) - Array of log types to collect:</li> <li><code>application</code> - MonsterBox app logs and service logs</li> <li><code>system</code> - General system logs, kernel logs, SSH logs</li> <li><code>error</code> - Error logs, critical logs, dmesg errors</li> <li><code>service</code> - Service-specific logs (SSH, systemd, networking, cron)</li> <li><code>all</code> - Collect all log types</li> <li><code>lines</code> (optional) - Number of log lines per type (default: 100)</li> <li><code>since</code> (optional) - Time period to collect from (default: \"1 hour ago\")</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#example-usage_1","title":"Example Usage:","text":"<pre><code>// Collect all log types\n{\n  \"name\": \"collect_comprehensive_rpi_logs\",\n  \"arguments\": {\n    \"host\": \"192.168.8.120\",\n    \"logTypes\": [\"all\"],\n    \"lines\": 50,\n    \"since\": \"30 minutes ago\"\n  }\n}\n\n// Collect only application and error logs\n{\n  \"name\": \"collect_comprehensive_rpi_logs\",\n  \"arguments\": {\n    \"host\": \"orlok\",\n    \"logTypes\": [\"application\", \"error\"],\n    \"lines\": 100\n  }\n}\n\n// Quick system health check\n{\n  \"name\": \"collect_comprehensive_rpi_logs\",\n  \"arguments\": {\n    \"host\": \"coffin\",\n    \"logTypes\": [\"system\", \"error\"],\n    \"since\": \"1 hour ago\"\n  }\n}\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#authentication","title":"Authentication","text":"<p>Both capabilities use the existing SSH credentials stored in your <code>.env</code> file:</p> <pre><code># Orlok Animatronic SSH Credentials\nORLOK_SSH_USER=\"remote\"\nORLOK_SSH_PASSWORD=\"klrklr89!\"\n\n# Coffin Animatronic SSH Credentials  \nCOFFIN_SSH_USER=\"remote\"\nCOFFIN_SSH_PASSWORD=\"klrklr89!\"\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#testing","title":"Testing","text":"<p>Test the new capabilities:</p> <pre><code># Test both remote command execution and log collection\nnpm run test:mcp-remote\n\n# Test the full MCP system\nnpm run test:mcp\n</code></pre>"},{"location":"MCP-REMOTE-CAPABILITIES/#usage-in-vs-code-with-augment","title":"Usage in VS Code with Augment","text":"<p>These MCP tools are automatically available in VS Code when using Augment AI. You can:</p> <ol> <li>Debug Issues: Execute diagnostic commands on the RPIs</li> <li>Monitor Logs: Collect comprehensive logs for troubleshooting</li> <li>System Health: Check disk usage, memory, processes</li> <li>Error Analysis: Collect error logs and system events</li> </ol>"},{"location":"MCP-REMOTE-CAPABILITIES/#example-augment-requests","title":"Example Augment Requests:","text":"<ul> <li>\"Check the disk usage on Orlok\"</li> <li>\"Collect error logs from Coffin for the last hour\"</li> <li>\"Show me the running processes on the Orlok RPI\"</li> <li>\"Get comprehensive logs from both animatronic systems\"</li> <li>\"Execute 'systemctl status ssh' on the Coffin RPI\"</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#security-notes","title":"Security Notes","text":"<ul> <li>Commands are executed with the <code>remote</code> user privileges</li> <li>Dangerous system commands are blocked for safety</li> <li>SSH connections use password authentication (not keys)</li> <li>Only Orlok and Coffin systems are accessible</li> <li>All commands have timeout protection</li> </ul>"},{"location":"MCP-REMOTE-CAPABILITIES/#troubleshooting","title":"Troubleshooting","text":"<p>If remote capabilities fail:</p> <ol> <li>Check Network: Ensure RPIs are reachable (<code>ping 192.168.8.120</code>)</li> <li>Verify Credentials: Confirm SSH credentials in <code>.env</code> file</li> <li>Test SSH: Try manual SSH connection to verify access</li> <li>Check Logs: Review MCP server logs for detailed error messages</li> </ol>"},{"location":"MCP-REMOTE-CAPABILITIES/#integration-with-existing-mcp-tools","title":"Integration with Existing MCP Tools","text":"<p>These new capabilities work alongside existing MCP tools:</p> <ul> <li><code>collect_browser_logs</code> - Browser console logs and errors</li> <li><code>collect_github_logs</code> - GitHub API logs and repository events  </li> <li><code>collect_rpi_console_logs</code> - Basic RPI console logs</li> <li><code>collect_ubuntu_system_logs</code> - Ubuntu system logs</li> <li><code>collect_monsterbox_logs</code> - Local MonsterBox application logs</li> <li><code>analyze_logs</code> - Log analysis and pattern detection</li> <li><code>setup_log_monitoring</code> - Continuous log monitoring setup</li> </ul> <p>Your MonsterBox MCP system now provides comprehensive remote debugging and monitoring capabilities for your animatronic systems! \ud83c\udf83\ud83d\udc7b\ud83e\udd16</p>"},{"location":"character_coffin_breaker/","title":"Coffin Breaker \u2014 Cyberpunk Character SheetCoffin Breaker","text":"Description: Our spanish lady has been trapped in the coffin for a thousand years, and now she's breaking out! Hardware Overview: Coffin Sensor (sensor), GPIO: 16 Coffin door (linear-actuator), DIR: 5, PWM: 13 Burning Rose (light), GPIO: 16 Sound List: Coffin Creaking (1729640529230-coffin_door_creaking.mp3) Coffin Background (1729640707787-07 - The Coffin.mp3) Coffin Breathing (1729640735282-11 - Breathing (In Terror).mp3) Welcome to Coralville, Where it's colder than Hell! (1730419782061-Welcome_to_Coralville__Where_i.mp3) I'm stuck in this coffin, please help me out little Iowan (1730419838788-I_m_stuck_in_this_coffin__plea.mp3) Here in Iowa's fertile ground (1730419956496-Here_in_Iowa_s_fertile_ground_.mp3) Welcome to Coralville, Where it's colder than Hell! (1730505246291-Welcome_to_Coralville__Where_i.mp3) I'm stuck in this coffin, please help me out little Iowan (1730505257581-I_m_stuck_in_this_coffin__plea.mp3) Alex's Curse (1730505311236-Alex_s_Curse_Alex_scorned_a_wi.mp3)  Alex scorned a witch's heart, Now frozen deep, worlds apart. Poor Alex lies in Iowa's ground, While tractors make their rumbling sound. A thousand years must Alex wait, Until time unlocks his frozen fate. (1730505326248-_Alex_scorned_a_witch_s_heart_.mp3) In the graveyard (1730505527562-In_the_graveyard_late_at_night.mp3) Help? Is someone out there?  (1730505661219-Help__Is_someone_out_there__Pl.mp3) Background Stormy Weather (1747082672361-converted-rain-thunder.mp3) Notes/Improvements: \u2013"},{"location":"character_orlok/","title":"Orlok \u2014 Cyberpunk Character SheetOrlok","text":"Description: A mysterious nobleman and vampire who lives alone in his ruined castle, who wants to acquire a new property in Germany. He was once a Solomonar who was cursed by the Devil to become a vampire. Hardware Overview: Right Arm of Satan (linear-actuator), DIR: 23, PWM: 12 Left Arm of Manipulation (linear-actuator), DIR: 18, PWM: 13 Hand of Azura (light), GPIO: 26 Eye of Orlok (sensor), GPIO: 16 Elbow (servo), Pin: 3 Forearm (servo), Pin: 3 Head on a Swivel (servo), Pin: 3 Hand Light: 26 Motor1: DIR=18, PWM=13 Motor2: DIR=23, PWM=12 PIR Sensor: 16 LED: 17 Servo: 6 Sound List: Satanas Lucifer (1729639570661-satanas-lucifer.mp3) Speaking in tongues (1729639678184-gibberish words.mp3) My Head Is Spinning (1730416580678-My_Head_Is_Spinning.mp3) Scary Latin (1730421695207-Audite__dulces_pueri_Iovenses_.mp3) Background Stormy Weather (1747082672361-converted-rain-thunder.mp3) Notes/Improvements: \u2013"},{"location":"character_pumpkinhead/","title":"PumpkinHead \u2014 Cyberpunk Character SheetPumpkinHead","text":"Description: The pumpkin patch has been full of the little guys, but who minds them? Pumpkinhead! Hardware Overview: Punkin Motion Detector (sensor), GPIO: 16 Head Light (led), GPIO: 17 Body Move (motor), DIR: 6, PWM: 13 Sound List: Monster Howl (1729640808280-monster-howl-85304.mp3) Monster Snarl (1729640824676-monster-snarl-5-69062.mp3) Big Roar (1729640841292-Roar.mp3) Random Growling Sounds (1729640860311-random-monster-sounds-29328.mp3) Background Stormy Weather (1747082672361-converted-rain-thunder.mp3) Notes/Improvements: \u2013"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#configuration-details","title":"Configuration Details","text":"<ul> <li><code>.env</code> defines environment variables</li> <li>JSON files in <code>data/</code> hold persistent settings</li> <li>Match GPIO/I2C pin numbers to your hardware setup</li> <li>Place custom scripts in <code>scripts/</code> directory</li> </ul>"},{"location":"faq/","title":"FAQ / Troubleshooting","text":""},{"location":"faq/#faq-troubleshooting","title":"FAQ / Troubleshooting","text":"<p>Q: Interface not loading? A: Ensure dependencies are installed and <code>.env</code> is set up.</p> <p>Q: Hardware unresponsive? A: Check GPIO/I2C pin config and wiring.</p> <p>Q: How to add characters or parts? A: Use the web UI.</p> <p>Q: Where are logs? A: Accessible via web UI or in <code>log/</code> dir.</p>"},{"location":"install/","title":"Installation Guide","text":"<p>MonsterBox supports easy setup on a Raspberry Pi 4B. Follow these steps for a fresh install or major redeployment.</p>"},{"location":"install/#1-prepare-your-raspberry-pi-4b","title":"1. Prepare Your Raspberry Pi 4B","text":"<ul> <li>Install the latest Raspberry Pi OS (Lite or Desktop) on your microSD card using the Raspberry Pi Imager.</li> <li>Boot the Pi, connect to your network, and perform initial setup (locale, WiFi, etc.).</li> <li>Ensure your Pi is connected to the Internet.</li> </ul>"},{"location":"install/#2-set-up-github-access","title":"2. Set Up GitHub Access","text":"<ul> <li>Install Git:   <code>bash   sudo apt-get update   sudo apt-get install -y git</code></li> <li>(Optional but recommended) Generate SSH keys and add them to your GitHub account for secure access:   <code>bash   ssh-keygen -t ed25519 -C \"your_email@example.com\"   cat ~/.ssh/id_ed25519.pub   # Copy this key to your GitHub SSH keys</code></li> </ul>"},{"location":"install/#3-download-monsterbox-files","title":"3. Download MonsterBox Files","text":"<ul> <li>Clone the repository:   <code>bash   git clone https://github.com/yourusername/monsterbox.git   cd monsterbox</code></li> </ul>"},{"location":"install/#4-run-the-installation-script","title":"4. Run the Installation Script","text":"<ul> <li>The install script will upgrade your OS, install all system and Python/Node dependencies, configure hardware interfaces, and set permissions:   <code>bash   sudo bash install.sh</code> <p>Note: This may take several minutes. The script will prompt if any errors occur.</p> </li> </ul>"},{"location":"install/#5-set-up-environment-variables","title":"5. Set Up Environment Variables","text":"<ul> <li>Create a <code>.env</code> file in the project root. See <code>.env.example</code> for required variables (e.g., PORT, NODE_ENV, hardware settings).</li> </ul>"},{"location":"install/#6-start-the-application","title":"6. Start the Application","text":"<ul> <li>Launch MonsterBox:   <code>bash   npm start</code></li> <li>Access the web interface at <code>http://&lt;your-pi-ip&gt;:3000</code> from your browser.</li> </ul>"},{"location":"install/#update-guide","title":"Update Guide","text":"<p>Routine updates keep your MonsterBox system and dependencies current without a full OS upgrade.</p>"},{"location":"install/#1-update-monsterbox-files","title":"1. Update MonsterBox Files","text":"<ul> <li>Pull the latest changes from GitHub:   <code>bash   git pull origin main</code></li> </ul>"},{"location":"install/#2-run-the-update-script","title":"2. Run the Update Script","text":"<ul> <li>This updates project dependencies and ensures required services are running:   <code>bash   sudo bash update.sh</code> <p>Note: No OS upgrade is performed. For major upgrades or after long periods, re-run the full install script.</p> </li> </ul> <p>For troubleshooting, see the FAQ or contact the project maintainer.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>MIT License. See <code>LICENSE</code> file for details.</p>"},{"location":"networking/","title":"Networking","text":""},{"location":"networking/#monsterbox-traveling-network","title":"MonsterBox Traveling Network","text":"<p>Private Networks: - <code>MonsterNet5g</code> / <code>MonsterNet2.4g</code> - Password: <code>VampiresSuck2025!</code></p> <p>Animatronic IPs: - Pumpkinhead: <code>192.168.8.200</code> - Coffin: <code>192.168.8.140</code> - Orlok: <code>192.168.8.120</code> - Login: <code>remote</code> / Password: <code>klrklr89!</code></p> <p>SMB File Sharing: - Accessible via Windows Explorer: <code>\\192.168.8.200</code> - Username: <code>remote</code>, Password: <code>klrklr89!</code></p> <p>SSH Access:</p> <pre><code>ssh -l remote 192.168.8.200\n</code></pre> <p>GitHub Repo: https://github.com/arwpc/MonsterBox</p>"},{"location":"structure/","title":"Directory Structure","text":""},{"location":"structure/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>controllers/</code>: Business logic</li> <li><code>data/</code>: Configuration JSON</li> <li><code>public/</code>: Static assets</li> <li><code>routes/</code>: API and routing</li> <li><code>scripts/</code>: Python/JS scripts</li> <li><code>services/</code>: Core services</li> <li><code>tests/</code>: Automated tests</li> <li><code>views/</code>: EJS web templates</li> </ul>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#usage-instructions","title":"Usage Instructions","text":""},{"location":"usage/#steps","title":"Steps","text":"<ul> <li>Steps are the fundamental actions in MonsterBox. Each Step represents a single operation, such as moving a part, playing a sound, or turning on a light.</li> <li>Steps can be set to run serially (one after another) or concurrently (at the same time as the next step). For example, you can play a sound while a servo moves by marking both steps as concurrent.</li> </ul>"},{"location":"usage/#scenes","title":"Scenes","text":"<ul> <li>Scenes are ordered sequences of Steps. Scenes let you create complex behaviors by arranging Steps in the desired order.</li> <li>Scenes can include Steps that wait for sensor input before proceeding, allowing for interactive or reactive behaviors.</li> <li>Steps within a Scene can be run in sequence or concurrently, enabling synchronized actions.</li> </ul>"},{"location":"usage/#active-mode","title":"Active Mode","text":"<ul> <li>Active Mode allows you to select one or more Scenes to run automatically.</li> <li>In Active Mode, MonsterBox cycles through the selected Scenes with a configurable delay between each Scene. This enables unattended operation or looping performances.</li> <li> <p>Scenes in Active Mode can include sensor waits, so your animatronic can react to the environment before moving to the next Scene.</p> </li> <li> <p>Access the MonsterBox web interface at <code>http://localhost:3000</code> (or your configured port).</p> </li> <li>Select a character and navigate through Characters, Parts, Sounds, Scenes, etc.</li> <li>Trigger scenes, view logs, and control devices in real time.</li> </ul>"},{"location":"usage/#installation-updates","title":"Installation &amp; Updates","text":"<ul> <li>For full installation instructions\u2014including first-time setup, GitHub connection, and running the install script\u2014see install.md.</li> <li>For regular updates (dependencies/services), use the update script:   <code>bash   sudo bash update.sh</code></li> <li>For a major re-deployment or after long periods, use the install script:   <code>bash   sudo bash install.sh</code></li> </ul> <p>Refer to install.md for detailed steps and troubleshooting.</p>"},{"location":"animatronics/","title":"Animatronics Workshop Overview","text":"<p>This section contains guides for working with animatronic characters using the MonsterBox framework. Each subsection provides documentation on setup, hands-on challenges, and integration with AI tools.</p>"},{"location":"animatronics/familiarization/","title":"Familiarization","text":""},{"location":"animatronics/familiarization/#1-familiarization","title":"1. Familiarization","text":""},{"location":"animatronics/familiarization/#hardware","title":"Hardware","text":"<ul> <li>Servos</li> <li>Linear Actuators</li> <li>Camera / Sound / AV</li> </ul>"},{"location":"animatronics/familiarization/#software","title":"Software","text":"<ul> <li>Git Repo</li> <li>RPi4b</li> <li>MonsterBox</li> <li>AI APIs</li> </ul>"},{"location":"animatronics/familiarization/#integration","title":"Integration","text":"<ul> <li>Software Development (Codemium or Windsurf)</li> <li>CI/CD Demonstrations</li> </ul>"},{"location":"animatronics/hands_on/","title":"Hands-On Activities","text":""},{"location":"animatronics/hands_on/#3-hands-on-opportunities","title":"3. Hands-On Opportunities","text":"<ul> <li>Coffin: ChatGPT integration, customizable voices</li> <li>Count Orlok: OpenCV head tracking</li> <li>Pumpkinhead: ElevenLabs TTS echoing</li> <li>BigMouth Skull: ChatterPi (talking + GPT)</li> <li>SmallMouth Skull: ChatterPi (talking + GPT)</li> </ul>"},{"location":"animatronics/presentation/","title":"Final Presentation","text":""},{"location":"animatronics/presentation/#4-presentation-of-monsters","title":"4. Presentation of Monsters","text":"<ul> <li>Possible Contest or Awards</li> <li>Letting GPTs talk to each other</li> <li>Lessons Learned and Suggestions for Improvement</li> </ul>"},{"location":"animatronics/simple_steps/","title":"Simple Steps","text":""},{"location":"animatronics/simple_steps/#2-simple-steps","title":"2. Simple Steps","text":"<p>In MonsterBox, Steps are individual actions that can be performed by an animatronic character. Each Step may involve: - Movement (using linear actuators, servos, motors) - Playing sounds (including ElevenLabs AI voices) - Triggering lights or other effects</p> <p>Steps can be configured to run serially (one after the other) or concurrently (at the same time as the next step). For example, you can have a servo move while a sound plays, or trigger multiple actions together for synchronized effects.</p>"},{"location":"api/API-TESTING-SUMMARY/","title":"\ud83c\udf83 MonsterBox API Key Testing Suite - Complete Setup","text":""},{"location":"api/API-TESTING-SUMMARY/#what-was-created","title":"\u2705 What Was Created","text":""},{"location":"api/API-TESTING-SUMMARY/#comprehensive-test-suite","title":"\ud83e\uddea Comprehensive Test Suite","text":"<ul> <li><code>tests/api-keys.test.js</code> - Full Mocha test suite for all API services</li> <li><code>scripts/test-api-keys.js</code> - Standalone testing script with detailed reporting</li> <li><code>routes/healthRoutes.js</code> - Health check endpoints for production monitoring</li> <li><code>tests/README-API-TESTING.md</code> - Complete testing documentation</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#integration-features","title":"\ud83d\udd27 Integration Features","text":"<ul> <li>Winston Logger Integration - All tests log to your existing logging system</li> <li>Mocha Framework - Uses your current testing setup and reporters</li> <li>Environment Variable Validation - Checks all configuration settings</li> <li>Production Health Checks - Monitor API status in live environment</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#how-to-use","title":"\ud83d\ude80 How to Use","text":""},{"location":"api/API-TESTING-SUMMARY/#quick-test-all-api-keys","title":"Quick Test All API Keys","text":"<pre><code>npm run check-api-keys\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#check-configuration-only","title":"Check Configuration Only","text":"<pre><code>npm run check-config\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#run-with-mocha-reporter","title":"Run with Mocha Reporter","text":"<pre><code>npm run test:api-keys\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#verbose-test-output","title":"Verbose Test Output","text":"<pre><code>npm run test:api-keys-verbose\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#include-in-full-test-suite","title":"Include in Full Test Suite","text":"<pre><code>npm test  # Now includes API key tests\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#what-gets-tested","title":"\ud83d\udcca What Gets Tested","text":""},{"location":"api/API-TESTING-SUMMARY/#active-api-services","title":"\u2705 Active API Services","text":"<ul> <li>Anthropic Claude \u2705 - Your key is configured and tested</li> <li>OpenAI GPT \u2705 - Your key is configured and tested  </li> <li>Google Gemini \u2705 - Your key is configured and tested</li> <li>Replica Studios \u2705 - Your key is configured and tested</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#environment-variables","title":"\ud83d\udd27 Environment Variables","text":"<ul> <li>SESSION_SECRET \u2705 - Secure session key generated</li> <li>NODE_ENV \u2705 - Environment properly configured</li> <li>PORT \u2705 - Server port configured</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#optional-services-ready-for-future-use","title":"\ud83d\udccb Optional Services (Ready for future use)","text":"<ul> <li>Perplexity AI, Mistral AI, xAI, Azure OpenAI, Ollama</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#health-check-endpoints","title":"\ud83c\udf10 Health Check Endpoints","text":"<p>Your MonsterBox now includes health check endpoints:</p>"},{"location":"api/API-TESTING-SUMMARY/#basic-health","title":"Basic Health","text":"<pre><code>GET /health\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#api-key-status","title":"API Key Status","text":"<pre><code>GET /health/api-keys\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#environment-status","title":"Environment Status","text":"<pre><code>GET /health/environment\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#connectivity-test","title":"Connectivity Test","text":"<pre><code>GET /health/connectivity\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#full-system-status","title":"Full System Status","text":"<pre><code>GET /health/status\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#example-test-output","title":"\ud83d\udcc8 Example Test Output","text":"<pre><code>\ud83d\udd11 Testing API Key Integrations...\n\n\ud83e\udd16 Anthropic Claude API\n   \u2705 Anthropic Claude API - Connected\n\n\ud83e\udde0 OpenAI GPT API  \n   \u2705 OpenAI GPT API - Connected\n\n\ud83d\udd0d Google Gemini API\n   \u2705 Google Gemini API - Connected\n\n\ud83c\udfa4 Replica Studios API\n   \u2705 Replica Studios API - Connected (150 voices available)\n   \u2705 MonsterBox Replica Integration - Working (150 voices)\n\n\ud83d\udd27 Environment Variables\n   \u2705 SESSION_SECRET - Configured\n   \u2705 PORT - Configured (3000)\n   \u2705 NODE_ENV - Configured (development)\n\n\ud83d\udccb Optional API Keys Status\n   \u26a0\ufe0f  Perplexity AI - Not configured (optional)\n   \u26a0\ufe0f  Mistral AI - Not configured (optional)\n   \u26a0\ufe0f  xAI - Not configured (optional)\n   \u26a0\ufe0f  Azure OpenAI - Not configured (optional)\n   \u26a0\ufe0f  Ollama - Not configured (optional)\n\n\u2705 All API key tests completed successfully!\n\n\ud83d\ude80 Your MonsterBox is ready for Halloween! \ud83c\udf83\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>No API keys exposed in logs or test output</li> <li>Environment variable validation without revealing values</li> <li>Minimal API calls to avoid unnecessary charges</li> <li>Error handling that doesn't leak sensitive information</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#packagejson-scripts-added","title":"\ud83d\udcdd Package.json Scripts Added","text":"<pre><code>{\n  \"scripts\": {\n    \"test:api-keys\": \"cross-env NODE_ENV=test mocha --reporter ./tests/cleanReporter.js tests/api-keys.test.js\",\n    \"test:api-keys-verbose\": \"cross-env NODE_ENV=test mocha tests/api-keys.test.js\",\n    \"check-api-keys\": \"node scripts/test-api-keys.js\",\n    \"check-config\": \"node scripts/test-api-keys.js --config-only\"\n  }\n}\n</code></pre>"},{"location":"api/API-TESTING-SUMMARY/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"api/API-TESTING-SUMMARY/#common-issues","title":"Common Issues","text":"<ul> <li>401 Unauthorized - Check API key validity</li> <li>Network timeouts - Check internet connection</li> <li>Missing dependencies - Run <code>npm install</code></li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#getting-help","title":"Getting Help","text":"<ul> <li>Check <code>tests/README-API-TESTING.md</code> for detailed documentation</li> <li>Review Winston logs in the <code>log/</code> directory</li> <li>Use health endpoints to monitor status</li> </ul>"},{"location":"api/API-TESTING-SUMMARY/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li> <p>Run the tests to verify everything works:    <code>bash    npm run check-api-keys</code></p> </li> <li> <p>Monitor in production using health endpoints</p> </li> <li> <p>Add more API keys as needed for additional services</p> </li> <li> <p>Set up automated testing in your CI/CD pipeline</p> </li> </ol>"},{"location":"api/API-TESTING-SUMMARY/#monsterbox-status","title":"\ud83c\udf83 MonsterBox Status","text":"<p>Your MonsterBox now has: - \u2705 4 Active AI Services (Anthropic, OpenAI, Google, Replica) - \u2705 Comprehensive Testing Suite  - \u2705 Production Health Monitoring - \u2705 Secure Credential Management - \u2705 Complete Documentation</p> <p>Your MonsterBox is ready to scare with AI-powered intelligence! \ud83d\udc7b\ud83e\udd16</p>"},{"location":"development/development-process/","title":"MonsterBox Development Process","text":""},{"location":"development/development-process/#overview","title":"Overview","text":"<p>The MonsterBox development process integrates Task Master with existing development workflows to ensure coordinated, efficient development across all project areas. This process balances agility with thorough planning and quality assurance.</p>"},{"location":"development/development-process/#development-philosophy","title":"Development Philosophy","text":""},{"location":"development/development-process/#task-driven-development","title":"Task-Driven Development","text":"<ul> <li>All work is tracked through Task Master tasks</li> <li>Clear objectives defined before starting any work</li> <li>Measurable outcomes with defined success criteria</li> <li>Dependency awareness to prevent blocking issues</li> </ul>"},{"location":"development/development-process/#quality-first","title":"Quality First","text":"<ul> <li>Comprehensive testing for all changes</li> <li>Code review for all implementations</li> <li>Documentation updates with every feature</li> <li>Security considerations in all development</li> </ul>"},{"location":"development/development-process/#iterative-improvement","title":"Iterative Improvement","text":"<ul> <li>Regular retrospectives to improve processes</li> <li>Continuous learning from completed tasks</li> <li>Process adaptation based on project needs</li> <li>Tool optimization for better efficiency</li> </ul>"},{"location":"development/development-process/#development-phases","title":"Development Phases","text":""},{"location":"development/development-process/#phase-1-planning-and-analysis","title":"Phase 1: Planning and Analysis","text":""},{"location":"development/development-process/#prd-development","title":"PRD Development","text":"<ol> <li>Requirements Gathering: Collect and document all requirements</li> <li>PRD Creation: Create comprehensive Product Requirements Document</li> <li>Task Generation: Use Task Master to generate initial task list</li> <li>Task Refinement: Review and adjust generated tasks</li> </ol>"},{"location":"development/development-process/#project-setup","title":"Project Setup","text":"<ol> <li>Environment Setup: Ensure all development tools are ready</li> <li>Dependency Analysis: Map all task dependencies</li> <li>Resource Planning: Allocate team members and time</li> <li>Risk Assessment: Identify potential blockers and mitigation strategies</li> </ol>"},{"location":"development/development-process/#phase-2-foundation-development","title":"Phase 2: Foundation Development","text":""},{"location":"development/development-process/#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li>Backend Systems: Node.js/Express foundation</li> <li>Database Setup: Configuration and data management</li> <li>Security Framework: Authentication and authorization</li> <li>Testing Infrastructure: Automated testing setup</li> </ul>"},{"location":"development/development-process/#integration-points","title":"Integration Points","text":"<ul> <li>API Design: RESTful endpoints for all functionality</li> <li>Documentation System: MkDocs integration and automation</li> <li>Monitoring Setup: Logging and health monitoring</li> <li>Deployment Pipeline: CI/CD and automated deployment</li> </ul>"},{"location":"development/development-process/#phase-3-feature-development","title":"Phase 3: Feature Development","text":""},{"location":"development/development-process/#feature-implementation-cycle","title":"Feature Implementation Cycle","text":"<ol> <li>Task Selection: Choose next task based on priorities and dependencies</li> <li>Design Phase: Create detailed implementation plan</li> <li>Development: Implement feature with tests</li> <li>Review: Code review and quality assurance</li> <li>Integration: Merge and deploy to staging</li> <li>Validation: End-to-end testing and validation</li> <li>Documentation: Update all relevant documentation</li> <li>Deployment: Release to production</li> </ol>"},{"location":"development/development-process/#quality-gates","title":"Quality Gates","text":"<ul> <li>Code Quality: Linting, formatting, and best practices</li> <li>Test Coverage: Minimum 80% test coverage for new code</li> <li>Security Review: Security implications of all changes</li> <li>Performance Impact: Performance testing for significant changes</li> </ul>"},{"location":"development/development-process/#phase-4-integration-and-testing","title":"Phase 4: Integration and Testing","text":""},{"location":"development/development-process/#system-integration","title":"System Integration","text":"<ul> <li>Component Integration: Ensure all components work together</li> <li>End-to-End Testing: Full system testing scenarios</li> <li>Performance Testing: Load and stress testing</li> <li>Security Testing: Penetration testing and vulnerability assessment</li> </ul>"},{"location":"development/development-process/#user-acceptance","title":"User Acceptance","text":"<ul> <li>Feature Validation: Verify features meet requirements</li> <li>Usability Testing: Ensure good user experience</li> <li>Documentation Review: Verify documentation accuracy</li> <li>Training Materials: Create user guides and training</li> </ul>"},{"location":"development/development-process/#development-standards","title":"Development Standards","text":""},{"location":"development/development-process/#code-standards","title":"Code Standards","text":""},{"location":"development/development-process/#javascriptnodejs","title":"JavaScript/Node.js","text":"<ul> <li>ES6+ Features: Use modern JavaScript features</li> <li>Async/Await: Prefer async/await over callbacks</li> <li>Error Handling: Comprehensive error handling and logging</li> <li>Code Organization: Clear module structure and separation of concerns</li> </ul>"},{"location":"development/development-process/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Inline Comments: Clear comments for complex logic</li> <li>API Documentation: Complete API documentation with examples</li> <li>README Files: Comprehensive setup and usage instructions</li> <li>Change Logs: Document all significant changes</li> </ul>"},{"location":"development/development-process/#testing-standards","title":"Testing Standards","text":""},{"location":"development/development-process/#unit-testing","title":"Unit Testing","text":"<ul> <li>Test Coverage: Minimum 80% coverage for new code</li> <li>Test Organization: Clear test structure and naming</li> <li>Mock Usage: Appropriate mocking of external dependencies</li> <li>Edge Cases: Test boundary conditions and error scenarios</li> </ul>"},{"location":"development/development-process/#integration-testing","title":"Integration Testing","text":"<ul> <li>API Testing: Test all API endpoints</li> <li>Database Testing: Test data persistence and retrieval</li> <li>External Service Testing: Test third-party integrations</li> <li>End-to-End Testing: Test complete user workflows</li> </ul>"},{"location":"development/development-process/#security-standards","title":"Security Standards","text":""},{"location":"development/development-process/#authentication-and-authorization","title":"Authentication and Authorization","text":"<ul> <li>JWT Tokens: Secure token-based authentication</li> <li>Role-Based Access: Proper permission management</li> <li>Session Management: Secure session handling</li> <li>Password Security: Strong password requirements and hashing</li> </ul>"},{"location":"development/development-process/#data-protection","title":"Data Protection","text":"<ul> <li>Input Validation: Validate all user inputs</li> <li>SQL Injection Prevention: Use parameterized queries</li> <li>XSS Prevention: Sanitize all outputs</li> <li>HTTPS: Encrypt all communications</li> </ul>"},{"location":"development/development-process/#tool-integration","title":"Tool Integration","text":""},{"location":"development/development-process/#task-master-integration","title":"Task Master Integration","text":""},{"location":"development/development-process/#development-workflow","title":"Development Workflow","text":"<ol> <li>Task Selection: Use Task Master to identify next work</li> <li>Progress Tracking: Update task status throughout development</li> <li>Dependency Management: Coordinate with dependent tasks</li> <li>Completion Verification: Ensure all task criteria are met</li> </ol>"},{"location":"development/development-process/#documentation-coordination","title":"Documentation Coordination","text":"<ul> <li>Automatic Updates: Documentation updates when tasks change</li> <li>Cross-References: Links between tasks and documentation</li> <li>Version Control: Track documentation changes with code changes</li> <li>Search Integration: Task content included in documentation search</li> </ul>"},{"location":"development/development-process/#version-control-integration","title":"Version Control Integration","text":""},{"location":"development/development-process/#git-workflow","title":"Git Workflow","text":"<ul> <li>Feature Branches: Create branches for each task</li> <li>Commit Messages: Reference task IDs in commit messages</li> <li>Pull Requests: Link PRs to corresponding tasks</li> <li>Code Review: Review process integrated with task completion</li> </ul>"},{"location":"development/development-process/#release-management","title":"Release Management","text":"<ul> <li>Version Tagging: Tag releases with completed task lists</li> <li>Release Notes: Generate release notes from completed tasks</li> <li>Deployment Tracking: Track which tasks are in each deployment</li> <li>Rollback Planning: Plan rollbacks based on task dependencies</li> </ul>"},{"location":"development/development-process/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"development/development-process/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Task Performance: Track time to complete different task types</li> <li>System Performance: Monitor system performance during development</li> <li>Error Tracking: Track errors and link to relevant tasks</li> <li>User Analytics: Monitor user behavior for feature validation</li> </ul>"},{"location":"development/development-process/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Code Quality: Track code quality metrics over time</li> <li>Test Coverage: Monitor test coverage trends</li> <li>Bug Rates: Track bug introduction and resolution rates</li> <li>Documentation Quality: Monitor documentation completeness</li> </ul>"},{"location":"development/development-process/#continuous-improvement","title":"Continuous Improvement","text":""},{"location":"development/development-process/#regular-reviews","title":"Regular Reviews","text":""},{"location":"development/development-process/#weekly-team-reviews","title":"Weekly Team Reviews","text":"<ul> <li>Progress Assessment: Review completed and in-progress tasks</li> <li>Blocker Resolution: Address any blocking issues</li> <li>Process Improvements: Identify and implement process improvements</li> <li>Knowledge Sharing: Share learnings and best practices</li> </ul>"},{"location":"development/development-process/#monthly-retrospectives","title":"Monthly Retrospectives","text":"<ul> <li>Process Evaluation: Assess overall development process effectiveness</li> <li>Tool Evaluation: Review tool usage and effectiveness</li> <li>Quality Assessment: Review quality metrics and trends</li> <li>Planning Adjustments: Adjust planning and estimation based on learnings</li> </ul>"},{"location":"development/development-process/#process-evolution","title":"Process Evolution","text":""},{"location":"development/development-process/#adaptation-strategies","title":"Adaptation Strategies","text":"<ul> <li>Feedback Integration: Incorporate team feedback into process improvements</li> <li>Tool Updates: Keep development tools and processes current</li> <li>Best Practice Adoption: Adopt industry best practices as appropriate</li> <li>Automation Expansion: Automate repetitive tasks and processes</li> </ul>"},{"location":"development/development-process/#success-metrics","title":"Success Metrics","text":"<ul> <li>Delivery Speed: Time from task creation to completion</li> <li>Quality Metrics: Bug rates, test coverage, code quality</li> <li>Team Satisfaction: Developer experience and satisfaction</li> <li>User Satisfaction: End-user satisfaction with delivered features</li> </ul> <p>This development process is continuously evolving. For the latest updates and specific procedures, refer to the Task Master Guide and Task Workflows.</p>"},{"location":"development/task-management/","title":"Task Management with Task Master","text":""},{"location":"development/task-management/#overview","title":"Overview","text":"<p>MonsterBox uses Task Master for comprehensive project management and development workflow coordination. Task Master integrates seamlessly with the existing MkDocs documentation system to provide a unified development experience.</p>"},{"location":"development/task-management/#what-is-task-master","title":"What is Task Master?","text":"<p>Task Master is an AI-powered task management system that helps coordinate development work across the MonsterBox platform. It provides:</p> <ul> <li>Intelligent Task Generation from Product Requirements Documents (PRDs)</li> <li>Dependency Management to ensure proper development sequencing</li> <li>Complexity Analysis to help with effort estimation and planning</li> <li>Status Tracking for all development activities</li> <li>Integration with existing MonsterBox documentation and workflows</li> </ul>"},{"location":"development/task-management/#key-features","title":"Key Features","text":""},{"location":"development/task-management/#task-organization","title":"\ud83c\udfaf Task Organization","text":"<ul> <li>Hierarchical Structure: Tasks can have subtasks for detailed breakdown</li> <li>Priority Levels: High, Medium, Low priority classification</li> <li>Status Management: Pending, In-Progress, Done, Deferred, Cancelled</li> <li>Dependency Tracking: Automatic dependency resolution and blocking detection</li> </ul>"},{"location":"development/task-management/#project-insights","title":"\ud83d\udcca Project Insights","text":"<ul> <li>Complexity Scoring: AI-powered complexity analysis (1-10 scale)</li> <li>Progress Tracking: Real-time completion percentages and statistics</li> <li>Bottleneck Identification: Automatic detection of blocking dependencies</li> <li>Effort Estimation: Recommended subtask counts based on complexity</li> </ul>"},{"location":"development/task-management/#workflow-integration","title":"\ud83d\udd04 Workflow Integration","text":"<ul> <li>MkDocs Coordination: Seamless integration with existing documentation</li> <li>Development Process: Task-driven development workflows</li> <li>Automated Updates: Documentation updates when tasks change</li> <li>Cross-referencing: Links between tasks and related documentation</li> </ul>"},{"location":"development/task-management/#task-master-file-structure","title":"Task Master File Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 .taskmaster/\n\u2502   \u251c\u2500\u2500 config.json              # Task Master configuration\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2502   \u2514\u2500\u2500 prd.txt             # Product Requirements Document\n\u2502   \u251c\u2500\u2500 tasks/\n\u2502   \u2502   \u251c\u2500\u2500 tasks.json          # Master task database\n\u2502   \u2502   \u251c\u2500\u2500 task_001.txt        # Individual task files\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 reports/\n\u2502   \u2502   \u2514\u2500\u2500 task-complexity-report.json\n\u2502   \u2514\u2500\u2500 templates/\n\u2502       \u2514\u2500\u2500 example_prd.txt\n</code></pre>"},{"location":"development/task-management/#current-project-status","title":"Current Project Status","text":""},{"location":"development/task-management/#active-tasks-in-progress","title":"Active Tasks (In Progress)","text":"<ul> <li>Task #16: Task Master + MkDocs Integration</li> <li>Task #1: Node.js/Express Backend Review</li> <li>Task #4: MCP Log Collection System</li> <li>Task #11: Secure Remote Access System</li> <li>Task #15: Comprehensive Testing Suite</li> <li>Task #13: Backup and Recovery System</li> </ul>"},{"location":"development/task-management/#on-hold-tasks-deferred","title":"On Hold Tasks (Deferred)","text":"<ul> <li>Character Configuration System</li> <li>Scene Builder Interface</li> <li>Hardware Integration Layer</li> <li>Real-time Control System</li> <li>Multi-Character Coordination</li> <li>Performance Optimization</li> <li>AI Text-to-Speech</li> <li>Remote Monitoring Dashboard</li> <li>Active Mode Functionality</li> </ul>"},{"location":"development/task-management/#getting-started","title":"Getting Started","text":""},{"location":"development/task-management/#for-new-team-members","title":"For New Team Members","text":"<ol> <li>Review the Task Workflows guide</li> <li>Understand the Development Process</li> <li>Read the Task Master Guide for detailed usage</li> </ol>"},{"location":"development/task-management/#for-existing-developers","title":"For Existing Developers","text":"<ul> <li>Tasks are managed through the AI assistant interface</li> <li>All task updates are automatically reflected in documentation</li> <li>Use task-driven development for better coordination</li> </ul>"},{"location":"development/task-management/#integration-with-monsterbox","title":"Integration with MonsterBox","text":"<p>Task Master is designed to complement, not replace, the existing MonsterBox documentation:</p> <ul> <li>Setup Guides: Reference existing animatronic and SSH setup documentation</li> <li>API Documentation: Coordinate with existing API testing and validation</li> <li>Security: Align with existing MCP and security documentation</li> <li>Character Management: Work with existing character sheets and configurations</li> </ul>"},{"location":"development/task-management/#next-steps","title":"Next Steps","text":"<ol> <li>Complete Task Master integration with MkDocs</li> <li>Establish task-driven development workflows</li> <li>Train team on Task Master usage</li> <li>Implement automated documentation updates</li> <li>Expand task management to cover all MonsterBox development areas</li> </ol> <p>This documentation is automatically updated as Task Master evolves. Last updated: 2025-06-06</p>"},{"location":"development/task-workflows/","title":"Task Workflows","text":""},{"location":"development/task-workflows/#overview","title":"Overview","text":"<p>This guide describes the standard workflows for managing tasks in the MonsterBox project using Task Master. These workflows ensure consistent development practices and proper coordination across all team members.</p>"},{"location":"development/task-workflows/#task-lifecycle","title":"Task Lifecycle","text":""},{"location":"development/task-workflows/#1-task-creation","title":"1. Task Creation","text":"<p>Tasks can be created in several ways:</p>"},{"location":"development/task-workflows/#from-prd-recommended","title":"From PRD (Recommended)","text":"<pre><code>1. Update the PRD document (.taskmaster/docs/prd.txt)\n2. Run PRD parsing to generate tasks automatically\n3. Review and adjust generated tasks as needed\n</code></pre>"},{"location":"development/task-workflows/#manual-task-creation","title":"Manual Task Creation","text":"<pre><code>1. Identify new work that needs to be done\n2. Create task with clear title and description\n3. Set appropriate priority and dependencies\n4. Add detailed implementation steps\n5. Define test strategy\n</code></pre>"},{"location":"development/task-workflows/#2-task-planning","title":"2. Task Planning","text":"<p>Before starting work on any task:</p>"},{"location":"development/task-workflows/#dependency-check","title":"Dependency Check","text":"<ul> <li>Verify all dependency tasks are completed</li> <li>Identify any blocking issues</li> <li>Coordinate with team members on shared dependencies</li> </ul>"},{"location":"development/task-workflows/#complexity-assessment","title":"Complexity Assessment","text":"<ul> <li>Review AI-generated complexity score</li> <li>Break down high-complexity tasks (8+) into subtasks</li> <li>Estimate effort and timeline</li> </ul>"},{"location":"development/task-workflows/#resource-allocation","title":"Resource Allocation","text":"<ul> <li>Assign task to appropriate team member</li> <li>Ensure required skills and knowledge are available</li> <li>Plan for any needed training or research</li> </ul>"},{"location":"development/task-workflows/#3-task-execution","title":"3. Task Execution","text":""},{"location":"development/task-workflows/#starting-a-task","title":"Starting a Task","text":"<ol> <li>Update Status: Change from \"pending\" to \"in-progress\"</li> <li>Review Requirements: Read all task details and test strategy</li> <li>Plan Implementation: Break down work into daily/weekly milestones</li> <li>Set Up Environment: Ensure all tools and dependencies are ready</li> </ol>"},{"location":"development/task-workflows/#during-development","title":"During Development","text":"<ol> <li>Regular Updates: Update task progress and any blockers</li> <li>Subtask Management: Complete subtasks and update their status</li> <li>Documentation: Document findings, decisions, and changes</li> <li>Testing: Implement tests as defined in test strategy</li> </ol>"},{"location":"development/task-workflows/#completing-a-task","title":"Completing a Task","text":"<ol> <li>Final Testing: Ensure all test criteria are met</li> <li>Code Review: Get peer review for all changes</li> <li>Documentation Update: Update relevant documentation</li> <li>Status Update: Change status to \"done\"</li> <li>Handoff: Notify dependent tasks that they can proceed</li> </ol>"},{"location":"development/task-workflows/#common-workflow-patterns","title":"Common Workflow Patterns","text":""},{"location":"development/task-workflows/#feature-development-workflow","title":"Feature Development Workflow","text":"<pre><code>1. Create feature task from requirements\n2. Break down into subtasks:\n   - Design/Architecture\n   - Implementation\n   - Testing\n   - Documentation\n3. Execute subtasks in sequence\n4. Integration testing\n5. Feature completion and handoff\n</code></pre>"},{"location":"development/task-workflows/#bug-fix-workflow","title":"Bug Fix Workflow","text":"<pre><code>1. Create bug task with reproduction steps\n2. Investigate and identify root cause\n3. Implement fix with tests\n4. Verify fix resolves issue\n5. Update documentation if needed\n6. Close task and notify stakeholders\n</code></pre>"},{"location":"development/task-workflows/#researchinvestigation-workflow","title":"Research/Investigation Workflow","text":"<pre><code>1. Create research task with clear objectives\n2. Define success criteria and deliverables\n3. Conduct research and document findings\n4. Present recommendations\n5. Create follow-up implementation tasks if needed\n</code></pre>"},{"location":"development/task-workflows/#task-prioritization-guidelines","title":"Task Prioritization Guidelines","text":""},{"location":"development/task-workflows/#high-priority","title":"High Priority","text":"<ul> <li>Critical bugs affecting production systems</li> <li>Security vulnerabilities requiring immediate attention</li> <li>Blocking dependencies for other high-priority work</li> <li>Foundation tasks that enable other development</li> </ul>"},{"location":"development/task-workflows/#medium-priority","title":"Medium Priority","text":"<ul> <li>Feature enhancements that improve user experience</li> <li>Performance optimizations with measurable impact</li> <li>Technical debt that affects maintainability</li> <li>Documentation updates for new features</li> </ul>"},{"location":"development/task-workflows/#low-priority","title":"Low Priority","text":"<ul> <li>Nice-to-have features with limited impact</li> <li>Experimental work for future consideration</li> <li>Cleanup tasks that don't affect functionality</li> <li>Long-term optimizations without immediate need</li> </ul>"},{"location":"development/task-workflows/#status-management","title":"Status Management","text":""},{"location":"development/task-workflows/#status-definitions","title":"Status Definitions","text":"<ul> <li>Pending: Task is ready to start but not yet begun</li> <li>In-Progress: Task is actively being worked on</li> <li>Done: Task is completed and verified</li> <li>Deferred: Task is postponed to a later time</li> <li>Cancelled: Task is no longer needed or relevant</li> <li>Blocked: Task cannot proceed due to dependencies</li> </ul>"},{"location":"development/task-workflows/#status-transitions","title":"Status Transitions","text":"<pre><code>Pending \u2192 In-Progress \u2192 Done\nPending \u2192 Deferred \u2192 In-Progress \u2192 Done\nPending \u2192 Cancelled\nIn-Progress \u2192 Blocked \u2192 In-Progress \u2192 Done\n</code></pre>"},{"location":"development/task-workflows/#dependency-management","title":"Dependency Management","text":""},{"location":"development/task-workflows/#types-of-dependencies","title":"Types of Dependencies","text":"<ol> <li>Technical Dependencies: Code/system requirements</li> <li>Resource Dependencies: People or tools needed</li> <li>Knowledge Dependencies: Information or training required</li> <li>External Dependencies: Third-party services or approvals</li> </ol>"},{"location":"development/task-workflows/#managing-dependencies","title":"Managing Dependencies","text":"<ul> <li>Identify Early: Map dependencies during task planning</li> <li>Communicate: Keep dependent tasks informed of progress</li> <li>Parallel Work: Find ways to work on independent parts</li> <li>Risk Mitigation: Have backup plans for critical dependencies</li> </ul>"},{"location":"development/task-workflows/#team-coordination","title":"Team Coordination","text":""},{"location":"development/task-workflows/#daily-standups","title":"Daily Standups","text":"<ul> <li>Review active tasks and progress</li> <li>Identify blockers and dependencies</li> <li>Coordinate shared work and resources</li> <li>Plan daily priorities</li> </ul>"},{"location":"development/task-workflows/#weekly-planning","title":"Weekly Planning","text":"<ul> <li>Review completed tasks and lessons learned</li> <li>Plan upcoming work and priorities</li> <li>Adjust timelines based on progress</li> <li>Identify resource needs and training</li> </ul>"},{"location":"development/task-workflows/#sprintmilestone-reviews","title":"Sprint/Milestone Reviews","text":"<ul> <li>Assess overall project progress</li> <li>Update task priorities based on changing requirements</li> <li>Plan next sprint/milestone objectives</li> <li>Celebrate completed work and achievements</li> </ul>"},{"location":"development/task-workflows/#best-practices","title":"Best Practices","text":""},{"location":"development/task-workflows/#task-creation","title":"Task Creation","text":"<ul> <li>Use clear, descriptive titles</li> <li>Include detailed acceptance criteria</li> <li>Define comprehensive test strategies</li> <li>Set realistic complexity estimates</li> </ul>"},{"location":"development/task-workflows/#task-execution","title":"Task Execution","text":"<ul> <li>Update status regularly (at least daily)</li> <li>Document decisions and changes</li> <li>Ask for help when blocked</li> <li>Test thoroughly before marking complete</li> </ul>"},{"location":"development/task-workflows/#team-collaboration","title":"Team Collaboration","text":"<ul> <li>Communicate early and often</li> <li>Share knowledge and learnings</li> <li>Help unblock teammates</li> <li>Maintain shared understanding of goals</li> </ul> <p>For detailed Task Master commands and usage, see the Task Master Guide.</p>"},{"location":"development/taskmaster-guide/","title":"Task Master Guide","text":""},{"location":"development/taskmaster-guide/#overview","title":"Overview","text":"<p>Task Master is an AI-powered task management system integrated into the MonsterBox development workflow. This guide provides comprehensive instructions for using Task Master effectively.</p>"},{"location":"development/taskmaster-guide/#getting-started","title":"Getting Started","text":""},{"location":"development/taskmaster-guide/#system-requirements","title":"System Requirements","text":"<ul> <li>MonsterBox project initialized</li> <li>Task Master installed and configured</li> <li>Access to AI assistant with MCP integration</li> <li>MkDocs documentation system</li> </ul>"},{"location":"development/taskmaster-guide/#initial-setup","title":"Initial Setup","text":"<p>Task Master is already initialized in your MonsterBox project with: - Configuration files in <code>.taskmaster/</code> - PRD document for task generation - 15 active tasks across all development areas - Integration with existing MkDocs documentation</p>"},{"location":"development/taskmaster-guide/#core-concepts","title":"Core Concepts","text":""},{"location":"development/taskmaster-guide/#tasks","title":"Tasks","text":"<p>Tasks are the fundamental units of work in Task Master: - Unique ID: Each task has a numeric identifier - Title: Clear, descriptive task name - Description: Detailed explanation of what needs to be done - Status: Current state (pending, in-progress, done, deferred, cancelled) - Priority: Importance level (high, medium, low) - Dependencies: Other tasks that must complete first - Complexity: AI-generated complexity score (1-10)</p>"},{"location":"development/taskmaster-guide/#subtasks","title":"Subtasks","text":"<p>Subtasks break down complex tasks into manageable pieces: - Hierarchical Structure: Subtasks belong to parent tasks - Independent Tracking: Each subtask has its own status - Granular Progress: Track progress at detailed level - Flexible Organization: Add/remove subtasks as needed</p>"},{"location":"development/taskmaster-guide/#dependencies","title":"Dependencies","text":"<p>Dependencies ensure proper work sequencing: - Blocking Relationships: Tasks that must complete before others can start - Automatic Detection: System identifies when tasks are blocked - Dependency Chains: Complex multi-level dependencies supported - Validation: System prevents circular dependencies</p>"},{"location":"development/taskmaster-guide/#task-management-commands","title":"Task Management Commands","text":""},{"location":"development/taskmaster-guide/#viewing-tasks","title":"Viewing Tasks","text":""},{"location":"development/taskmaster-guide/#get-all-tasks","title":"Get All Tasks","text":"<pre><code>View all tasks with current status and priorities\n</code></pre>"},{"location":"development/taskmaster-guide/#get-specific-task","title":"Get Specific Task","text":"<pre><code>View detailed information for a specific task by ID\n</code></pre>"},{"location":"development/taskmaster-guide/#get-next-task","title":"Get Next Task","text":"<pre><code>Find the next task to work on based on dependencies and priorities\n</code></pre>"},{"location":"development/taskmaster-guide/#filter-by-status","title":"Filter by Status","text":"<pre><code>View tasks filtered by status (pending, in-progress, done, etc.)\n</code></pre>"},{"location":"development/taskmaster-guide/#managing-task-status","title":"Managing Task Status","text":""},{"location":"development/taskmaster-guide/#update-task-status","title":"Update Task Status","text":"<pre><code>Change task status (pending \u2192 in-progress \u2192 done)\nExamples:\n- Set task to in-progress when starting work\n- Mark task as done when completed\n- Defer tasks that are postponed\n</code></pre>"},{"location":"development/taskmaster-guide/#bulk-status-updates","title":"Bulk Status Updates","text":"<pre><code>Update multiple tasks at once\nExample: Set multiple tasks to deferred status\n</code></pre>"},{"location":"development/taskmaster-guide/#task-creation-and-modification","title":"Task Creation and Modification","text":""},{"location":"development/taskmaster-guide/#add-new-task","title":"Add New Task","text":"<pre><code>Create new tasks with AI assistance\n- Provide description of work needed\n- System generates detailed task with test strategy\n- Automatically sets appropriate complexity and priority\n</code></pre>"},{"location":"development/taskmaster-guide/#update-existing-task","title":"Update Existing Task","text":"<pre><code>Modify task details based on new information\n- Update implementation details\n- Adjust test strategies\n- Incorporate new requirements\n</code></pre>"},{"location":"development/taskmaster-guide/#remove-tasks","title":"Remove Tasks","text":"<pre><code>Delete tasks that are no longer needed\n- Removes task and updates dependencies\n- Cleans up related files\n</code></pre>"},{"location":"development/taskmaster-guide/#subtask-management","title":"Subtask Management","text":""},{"location":"development/taskmaster-guide/#add-subtasks","title":"Add Subtasks","text":"<pre><code>Break down complex tasks into smaller pieces\n- Create new subtasks for detailed work\n- Convert existing tasks to subtasks\n- Organize work hierarchically\n</code></pre>"},{"location":"development/taskmaster-guide/#update-subtasks","title":"Update Subtasks","text":"<pre><code>Track progress on individual subtasks\n- Update subtask status independently\n- Add notes and progress updates\n- Maintain detailed work history\n</code></pre>"},{"location":"development/taskmaster-guide/#remove-subtasks","title":"Remove Subtasks","text":"<pre><code>Remove completed or unnecessary subtasks\n- Option to convert back to standalone tasks\n- Maintain clean task organization\n</code></pre>"},{"location":"development/taskmaster-guide/#dependency-management","title":"Dependency Management","text":""},{"location":"development/taskmaster-guide/#add-dependencies","title":"Add Dependencies","text":"<pre><code>Create dependency relationships between tasks\n- Ensure proper work sequencing\n- Prevent starting tasks before prerequisites\n</code></pre>"},{"location":"development/taskmaster-guide/#remove-dependencies","title":"Remove Dependencies","text":"<pre><code>Remove dependency relationships when no longer needed\n- Unblock tasks when dependencies change\n- Maintain accurate dependency graph\n</code></pre>"},{"location":"development/taskmaster-guide/#validate-dependencies","title":"Validate Dependencies","text":"<pre><code>Check for dependency issues\n- Identify circular dependencies\n- Find broken dependency links\n- Ensure dependency graph integrity\n</code></pre>"},{"location":"development/taskmaster-guide/#advanced-features","title":"Advanced Features","text":""},{"location":"development/taskmaster-guide/#complexity-analysis","title":"Complexity Analysis","text":"<p>Task Master provides AI-powered complexity analysis:</p>"},{"location":"development/taskmaster-guide/#automatic-scoring","title":"Automatic Scoring","text":"<ul> <li>Complexity Score: 1-10 scale based on task requirements</li> <li>Subtask Recommendations: Suggested number of subtasks</li> <li>Expansion Prompts: AI-generated suggestions for task breakdown</li> </ul>"},{"location":"development/taskmaster-guide/#complexity-reports","title":"Complexity Reports","text":"<pre><code>Generate comprehensive complexity analysis\n- Identify high-complexity tasks needing breakdown\n- Recommend task expansion strategies\n- Provide effort estimation guidance\n</code></pre>"},{"location":"development/taskmaster-guide/#task-expansion","title":"Task Expansion","text":"<p>For complex tasks (complexity 8+), use task expansion:</p>"},{"location":"development/taskmaster-guide/#expand-single-task","title":"Expand Single Task","text":"<pre><code>Break down a specific task into detailed subtasks\n- AI-generated subtask breakdown\n- Maintains task relationships\n- Preserves original task context\n</code></pre>"},{"location":"development/taskmaster-guide/#expand-all-tasks","title":"Expand All Tasks","text":"<pre><code>Automatically expand all high-complexity tasks\n- Batch processing for efficiency\n- Consistent subtask generation\n- Maintains project coherence\n</code></pre>"},{"location":"development/taskmaster-guide/#project-analysis","title":"Project Analysis","text":""},{"location":"development/taskmaster-guide/#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Completion Percentages: Overall and by category</li> <li>Status Distribution: Tasks by current status</li> <li>Dependency Analysis: Blocking and blocked tasks</li> <li>Timeline Estimation: Projected completion based on complexity</li> </ul>"},{"location":"development/taskmaster-guide/#reporting","title":"Reporting","text":"<ul> <li>Complexity Reports: Detailed analysis of task complexity</li> <li>Progress Reports: Current project status and trends</li> <li>Dependency Reports: Dependency graph analysis</li> <li>Performance Metrics: Task completion rates and patterns</li> </ul>"},{"location":"development/taskmaster-guide/#integration-with-monsterbox","title":"Integration with MonsterBox","text":""},{"location":"development/taskmaster-guide/#mkdocs-integration","title":"MkDocs Integration","text":"<p>Task Master integrates seamlessly with MonsterBox documentation:</p>"},{"location":"development/taskmaster-guide/#automatic-updates","title":"Automatic Updates","text":"<ul> <li>Documentation Generation: Task information included in docs</li> <li>Cross-References: Links between tasks and documentation</li> <li>Search Integration: Task content searchable in docs</li> <li>Version Control: Documentation updates with task changes</li> </ul>"},{"location":"development/taskmaster-guide/#content-coordination","title":"Content Coordination","text":"<ul> <li>No Duplication: Task docs complement existing documentation</li> <li>Consistent Terminology: Standardized language across all docs</li> <li>Proper Navigation: Task docs integrated into MkDocs navigation</li> <li>Theme Consistency: Maintains Material theme styling</li> </ul>"},{"location":"development/taskmaster-guide/#development-workflow","title":"Development Workflow","text":"<p>Task Master supports the complete development workflow:</p>"},{"location":"development/taskmaster-guide/#planning-phase","title":"Planning Phase","text":"<ul> <li>PRD Processing: Generate tasks from requirements documents</li> <li>Dependency Mapping: Identify task relationships</li> <li>Priority Setting: Establish work priorities</li> <li>Resource Planning: Estimate effort and timeline</li> </ul>"},{"location":"development/taskmaster-guide/#execution-phase","title":"Execution Phase","text":"<ul> <li>Work Coordination: Track active work across team</li> <li>Progress Monitoring: Real-time status updates</li> <li>Blocker Resolution: Identify and resolve blocking issues</li> <li>Quality Assurance: Ensure completion criteria are met</li> </ul>"},{"location":"development/taskmaster-guide/#review-phase","title":"Review Phase","text":"<ul> <li>Completion Verification: Validate all task requirements met</li> <li>Documentation Updates: Ensure docs reflect completed work</li> <li>Lessons Learned: Capture insights for future work</li> <li>Process Improvement: Refine workflows based on experience</li> </ul>"},{"location":"development/taskmaster-guide/#best-practices","title":"Best Practices","text":""},{"location":"development/taskmaster-guide/#task-creation","title":"Task Creation","text":"<ul> <li>Clear Titles: Use descriptive, action-oriented titles</li> <li>Detailed Descriptions: Include context and requirements</li> <li>Specific Acceptance Criteria: Define what \"done\" means</li> <li>Comprehensive Test Strategy: Plan testing approach upfront</li> </ul>"},{"location":"development/taskmaster-guide/#task-management","title":"Task Management","text":"<ul> <li>Regular Updates: Update status frequently (daily minimum)</li> <li>Dependency Awareness: Consider impact on other tasks</li> <li>Documentation: Keep task details current and accurate</li> <li>Communication: Coordinate with team on shared work</li> </ul>"},{"location":"development/taskmaster-guide/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Test Strategy Compliance: Follow defined testing approach</li> <li>Code Review: Get peer review for all implementations</li> <li>Documentation Updates: Update docs with all changes</li> <li>Completion Verification: Ensure all criteria met before marking done</li> </ul>"},{"location":"development/taskmaster-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/taskmaster-guide/#common-issues","title":"Common Issues","text":""},{"location":"development/taskmaster-guide/#dependency-conflicts","title":"Dependency Conflicts","text":"<ul> <li>Circular Dependencies: Use dependency validation to identify</li> <li>Broken Links: Remove dependencies to deleted tasks</li> <li>Blocking Chains: Identify and resolve long dependency chains</li> </ul>"},{"location":"development/taskmaster-guide/#task-organization","title":"Task Organization","text":"<ul> <li>Overwhelming Complexity: Break down high-complexity tasks</li> <li>Unclear Requirements: Update task details with more specificity</li> <li>Priority Conflicts: Reassess and adjust task priorities</li> </ul>"},{"location":"development/taskmaster-guide/#integration-issues","title":"Integration Issues","text":"<ul> <li>Documentation Sync: Ensure docs reflect current task state</li> <li>Search Problems: Verify task content included in search index</li> <li>Navigation Issues: Check MkDocs navigation configuration</li> </ul>"},{"location":"development/taskmaster-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Refer to this guide and related documentation</li> <li>Team Coordination: Discuss issues in team meetings</li> <li>Process Improvement: Suggest improvements to task management process</li> <li>Tool Updates: Keep Task Master and related tools current</li> </ul> <p>For workflow-specific guidance, see Task Workflows and Development Process.</p>"},{"location":"hardware/gpio_assignments/","title":"GPIO Assignments","text":""},{"location":"hardware/gpio_assignments/#gpio-assignments","title":"GPIO Assignments","text":""},{"location":"hardware/gpio_assignments/#orlok","title":"Orlok","text":"<ul> <li>Hand Light: 26</li> <li>Motor1: DIR=18, PWM=13</li> <li>Motor2: DIR=23, PWM=12</li> <li>PIR Sensor: 16</li> <li>LED: 17</li> <li>Servo: 6</li> </ul>"},{"location":"hardware/gpio_assignments/#coffin","title":"Coffin","text":"<ul> <li>MDD10A Control Board</li> <li>Motor1: DIR=5, PWM=13</li> <li>PIR Sensor: 26</li> </ul>"},{"location":"hardware/gpio_assignments/#pumpkinhead","title":"Pumpkinhead","text":"<ul> <li>Motor1: DIR=26, PWM=13</li> <li>Sensor: 16</li> </ul>"},{"location":"hardware/hardware_schedule/","title":"Hardware Schedule","text":""},{"location":"hardware/hardware_schedule/#hardware-schedule","title":"Hardware Schedule","text":"<p>Core: - Raspberry Pi 4B, 4GB RAM, 256GB SD</p> <p>Audio Interface: - USB Audio Card</p> <p>Motor Control: - Cytron 2x10A Motor Driver</p> <p>Servo Controllers: - PCA9685 Controller</p> <p>Servos: - Hooyij 40kg Servo - Miuzei MG90S Micro Servo - GoBilda Stingray 2 Servo</p> <p>Linear Actuators: - 150mm Actuator - 12\" Coffin Actuator</p> <p>Misc: - Jeep Wiper Motor - PIR Motion Sensor</p>"},{"location":"integration/elevenlabs/","title":"ElevenLabs TTS","text":""},{"location":"integration/elevenlabs/#elevenlabs-integration","title":"ElevenLabs Integration","text":"<p>MonsterBox integrates ElevenLabs Text-to-Speech (TTS) to generate high-quality voice lines for animatronic characters. This integration allows users to select from a variety of voices, preview generated speech, and assign voices to characters or scenes.</p>"},{"location":"integration/elevenlabs/#how-elevenlabs-is-integrated","title":"How ElevenLabs is Integrated","text":"<ul> <li>ElevenLabs TTS is accessed via the MonsterBox web interface (\"Configure Voice\" button, scene editor, and sound management).</li> <li>The backend uses a Node.js API wrapper that communicates with the ElevenLabs API using a secret API key stored in environment variables.</li> <li>Voices are fetched via <code>/api/voice/available</code>, filtered for TTS capabilities, and displayed in the UI for selection.</li> <li>Voice generation (TTS) is triggered via <code>/api/voice/generate</code> and <code>/api/voice/generate-for-scene</code> endpoints.</li> </ul>"},{"location":"integration/elevenlabs/#api-key-configuration","title":"API Key Configuration","text":"<p>To use ElevenLabs, you must provide a valid API key. Set this in your <code>.env</code> file at the project root:</p> <pre><code>ELEVENLABS_API_KEY=your_actual_api_key_here\n</code></pre> <p>Restart the application after changing the key.</p>"},{"location":"integration/elevenlabs/#listing-and-using-voices","title":"Listing and Using Voices","text":"<p>MonsterBox fetches the list of available voices and displays them in the \"Configure Voice\" interface. Users can filter by gender, style, accent, and age, and preview each voice with different styles (e.g., neutral, happy, sad).</p>"},{"location":"integration/elevenlabs/#sample-code-fetching-voices-frontend","title":"Sample Code: Fetching Voices (Frontend)","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\nasync loadVoices() {\n    try {\n        this.showLoading('Loading voices...');\n        const response = await fetch('/api/voice/available');\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Failed to load voices');\n        }\n        const voices = await response.json();\n        this.voices = voices;\n        this.populateVoiceTable();\n        await this.loadRecentlyUsed();\n    } catch (error) {\n        console.error('Error loading voices:', error);\n        this.showError('Failed to load voices: ' + error.message);\n    } finally {\n        this.hideLoading();\n    }\n}\n</code></pre>"},{"location":"integration/elevenlabs/#filtering-for-tts-capabilities","title":"Filtering for TTS Capabilities","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\ngetVoiceStyles(voice) {\n    const baseStyles = ['neutral'];\n    if (voice.capabilities &amp;&amp; voice.capabilities['tts.vox_2_0']) {\n        baseStyles.push('happy', 'sad', 'angry', 'fearful');\n    }\n    return baseStyles;\n}\n</code></pre>"},{"location":"integration/elevenlabs/#generating-speech-preview","title":"Generating Speech (Preview)","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\nasync generatePreview(style = 'neutral') {\n    try {\n        this.showLoading('Generating preview...');\n        const previewText = document.querySelector('#previewText').value;\n        const speakerId = this.currentPreviewVoice.speaker_id;\n        if (!speakerId) throw new Error('No valid speaker ID found for this voice');\n        const response = await fetch('/api/voice/generate', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                speaker_id: speakerId,\n                text: previewText,\n                style,\n                characterId: this.characterId,\n                options: {\n                    speed: parseFloat(document.querySelector('#speed').value),\n                    pitch: parseInt(document.querySelector('#pitch').value),\n                    volume: parseInt(document.querySelector('#volume').value)\n                }\n            })\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Failed to generate preview');\n        }\n        const data = await response.json();\n        this.lastGeneratedAudio = data;\n        // Play the audio preview...\n    } catch (error) {\n        // Handle errors\n    } finally {\n        this.hideLoading();\n    }\n}\n</code></pre>"},{"location":"integration/elevenlabs/#typical-workflow","title":"Typical Workflow","text":"<ol> <li>Go to \"Configure Voice\" in the MonsterBox web UI.</li> <li>Browse and filter available voices (fetched from ElevenLabs).</li> <li>Preview voices with different styles and settings.</li> <li>Assign a selected voice to a character or scene.</li> <li>When a scene is played, MonsterBox generates and plays the TTS audio using the selected voice.</li> </ol>"},{"location":"integration/elevenlabs/#security-note","title":"Security Note","text":"<p>Never share your ElevenLabs API key publicly. The example above is for documentation only. Always use your own key and keep it secret.</p>"},{"location":"security/MCP-SETUP-NOTES/","title":"\ud83d\udd27 MCP Configuration Setup Notes","text":""},{"location":"security/MCP-SETUP-NOTES/#important-security-notice","title":"Important Security Notice","text":"<p>The <code>.cursor/mcp.json</code> file in this repository contains placeholder values for API keys. Do NOT commit actual API keys to this file.</p>"},{"location":"security/MCP-SETUP-NOTES/#setting-up-mcp-with-your-api-keys","title":"Setting Up MCP with Your API Keys","text":""},{"location":"security/MCP-SETUP-NOTES/#option-1-local-environment-variables-recommended","title":"Option 1: Local Environment Variables (Recommended)","text":"<ol> <li> <p>Ensure your <code>.env</code> file contains your actual API keys: <code>bash    ANTHROPIC_API_KEY=\"your_actual_anthropic_key_here\"    OPENAI_API_KEY=\"your_actual_openai_key_here\"    GOOGLE_API_KEY=\"your_actual_google_key_here\"    # ... other keys as needed</code></p> </li> <li> <p>The MCP server will automatically load these from your environment</p> </li> </ol>"},{"location":"security/MCP-SETUP-NOTES/#option-2-local-mcp-configuration-advanced","title":"Option 2: Local MCP Configuration (Advanced)","text":"<p>If you need to customize the MCP configuration locally:</p> <ol> <li> <p>Create a local copy of the MCP config: <code>bash    cp .cursor/mcp.json .cursor/mcp.local.json</code></p> </li> <li> <p>Add <code>.cursor/mcp.local.json</code> to your <code>.gitignore</code>: <code>bash    echo \".cursor/mcp.local.json\" &gt;&gt; .gitignore</code></p> </li> <li> <p>Update your local copy with actual API keys: <code>json    {        \"mcpServers\": {            \"task-master-ai\": {                \"command\": \"npx\",                \"args\": [\"-y\", \"--package=task-master-ai\", \"task-master-ai\"],                \"env\": {                    \"ANTHROPIC_API_KEY\": \"your_actual_anthropic_key_here\",                    \"OPENAI_API_KEY\": \"your_actual_openai_key_here\",                    \"GOOGLE_API_KEY\": \"your_actual_google_key_here\"                }            }        }    }</code></p> </li> <li> <p>Configure your IDE to use the local config file</p> </li> </ol>"},{"location":"security/MCP-SETUP-NOTES/#current-mcp-servers","title":"Current MCP Servers","text":""},{"location":"security/MCP-SETUP-NOTES/#1-task-master-ai","title":"1. Task Master AI","text":"<ul> <li>Purpose: AI-powered task management and automation</li> <li>Required Keys: ANTHROPIC_API_KEY (minimum)</li> <li>Optional Keys: OPENAI_API_KEY, GOOGLE_API_KEY, PERPLEXITY_API_KEY</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#2-monsterbox-log-collector","title":"2. MonsterBox Log Collector","text":"<ul> <li>Purpose: Collects logs from various sources for MCP integration</li> <li>Required Keys: None (uses environment variables from .env)</li> <li>Features: </li> <li>Browser console logs</li> <li>GitHub API logs  </li> <li>RPI console logs (via SSH)</li> <li>Ubuntu system logs</li> <li>MonsterBox application logs</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit actual API keys to version control</li> <li>Use environment variables for sensitive data</li> <li>Keep <code>.env</code> files in <code>.gitignore</code></li> <li>Use placeholder values in committed configuration files</li> <li>Regularly rotate API keys</li> <li>Monitor for accidental key exposure</li> </ol>"},{"location":"security/MCP-SETUP-NOTES/#testing-mcp-setup","title":"Testing MCP Setup","text":"<p>After configuring your API keys, test the MCP setup:</p> <pre><code># Test the complete MCP setup including log collection\nnpm run test:mcp\n\n# Test animatronic SSH connectivity\nnpm run test:animatronic-ssh\n</code></pre>"},{"location":"security/MCP-SETUP-NOTES/#troubleshooting","title":"Troubleshooting","text":""},{"location":"security/MCP-SETUP-NOTES/#api-key-not-found-errors","title":"\"API key not found\" errors","text":"<ul> <li>Verify your <code>.env</code> file contains the required keys</li> <li>Ensure the <code>.env</code> file is in the project root</li> <li>Check that key names match exactly (case-sensitive)</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#mcp-server-connection-issues","title":"MCP server connection issues","text":"<ul> <li>Verify the MCP server is properly configured in your IDE</li> <li>Check that the server command and arguments are correct</li> <li>Review server logs for detailed error messages</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#ssh-connectivity-issues","title":"SSH connectivity issues","text":"<ul> <li>Ensure animatronic RPIs are powered on and connected</li> <li>Verify SSH credentials are properly configured</li> <li>Test network connectivity to each RPI</li> </ul>"},{"location":"security/MCP-SETUP-NOTES/#related-documentation","title":"Related Documentation","text":"<ul> <li>Animatronic SSH Setup Guide</li> <li>Environment Variables Template</li> <li>MCP Log Collector Server</li> <li>Main Project Documentation</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/","title":"\ud83c\udf83 MonsterBox Animatronic Setup Guide","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#overview","title":"Overview","text":"<p>This guide will help you set up log collection for all your animatronic RPIs. Each animatronic (Orlok, Pumpkinhead, Coffin, etc.) will have its own RPI that needs to be configured for remote log collection.</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#quick-setup-automated","title":"\ud83d\ude80 Quick Setup (Automated)","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#option-1-powershell-script-recommended-for-windows","title":"Option 1: PowerShell Script (Recommended for Windows)","text":"<pre><code># Run the automated setup script\n.\\scripts\\setup-ssh-keys.ps1\n</code></pre> <p>This script will: - \u2705 Generate SSH keys if needed - \u2705 Set up SSH access to all your animatronic RPIs - \u2705 Configure log access permissions - \u2705 Test connections - \u2705 Create animatronic configuration file</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#option-2-interactive-manager","title":"Option 2: Interactive Manager","text":"<pre><code># Use the interactive animatronic manager\nnpm run animatronic:manage\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#manual-setup-step-by-step","title":"\ud83d\udd27 Manual Setup (Step by Step)","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-1-find-your-rpi-ip-addresses","title":"Step 1: Find Your RPI IP Addresses","text":"<p>On each RPI, run:</p> <pre><code>hostname -I\n</code></pre> <p>Or check your router's admin panel for: - Device names like \"raspberrypi\", \"orlok\", \"pumpkinhead\", \"coffin\" - MAC addresses starting with common RPI prefixes</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-2-set-up-ssh-keys","title":"Step 2: Set Up SSH Keys","text":"<p>Generate SSH key (if you don't have one):</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"monsterbox@$(hostname)\"\n</code></pre> <p>Copy keys to each animatronic:</p> <pre><code># For Orlok\nssh-copy-id pi@192.168.1.100\n\n# For Pumpkinhead  \nssh-copy-id pi@192.168.1.101\n\n# For Coffin\nssh-copy-id pi@192.168.1.102\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-3-configure-log-access","title":"Step 3: Configure Log Access","text":"<p>On each RPI, set up sudo access for log collection:</p> <pre><code># SSH into each RPI\nssh pi@192.168.1.100\n\n# Add log access permissions\necho 'pi ALL=(ALL) NOPASSWD: /bin/journalctl' | sudo tee -a /etc/sudoers.d/monsterbox-logs\n\n# Test log access\nsudo journalctl -n 5 --no-pager\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#step-4-add-animatronics-to-monsterbox","title":"Step 4: Add Animatronics to MonsterBox","text":"<pre><code># Add each animatronic interactively\nnpm run animatronic:manage\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#default-animatronic-configuration","title":"\ud83d\udccb Default Animatronic Configuration","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#orlok-count-orlok","title":"Orlok (Count Orlok)","text":"<ul> <li>IP: 192.168.1.100</li> <li>Character: Vampire with moving arms and glowing eyes</li> <li>Parts: Right Arm of Satan, Left Arm of Manipulation, Hand of Azura, Eye of Orlok</li> <li>Services: monsterbox, ssh, gpio-control, servo-control</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#pumpkinhead","title":"Pumpkinhead","text":"<ul> <li>IP: 192.168.1.101  </li> <li>Character: Pumpkin-headed demon with articulated limbs</li> <li>Services: monsterbox, ssh, gpio-control, led-control</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#coffin","title":"Coffin","text":"<ul> <li>IP: 192.168.1.102</li> <li>Character: Coffin with opening lid and emerging figure</li> <li>Services: monsterbox, ssh, linear-actuator, sound</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#testing-your-setup","title":"\ud83e\uddea Testing Your Setup","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#test-individual-animatronic","title":"Test Individual Animatronic","text":"<pre><code># Test specific animatronic connection\nnpm run animatronic:manage\n# Choose \"Test Animatronic Connection\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#test-all-animatronics","title":"Test All Animatronics","text":"<pre><code># View all animatronic status\nnpm run animatronic:view\n\n# Test complete MCP setup\nnpm run test:mcp\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#collect-logs-from-all","title":"Collect Logs from All","text":"<pre><code># Collect logs from all configured animatronics\nnpm run collect:rpi-logs\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#management-commands","title":"\ud83d\udcca Management Commands","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#view-all-animatronics","title":"View All Animatronics","text":"<pre><code>npm run animatronic:view\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#add-new-animatronic","title":"Add New Animatronic","text":"<pre><code>npm run animatronic:manage\n# Choose \"Add New Animatronic\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#configure-existing-animatronic","title":"Configure Existing Animatronic","text":"<pre><code>npm run animatronic:manage\n# Choose \"Configure Existing Animatronic\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#ssh-connection-failed","title":"SSH Connection Failed","text":"<pre><code># Check if RPI is reachable\nping 192.168.1.100\n\n# Check SSH service on RPI\nssh pi@192.168.1.100\nsudo systemctl status ssh\nsudo systemctl enable ssh\nsudo systemctl start ssh\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#log-access-denied","title":"Log Access Denied","text":"<pre><code># On the RPI, check sudo configuration\nsudo visudo -c\nsudo cat /etc/sudoers.d/monsterbox-logs\n\n# Re-add permissions if needed\necho 'pi ALL=(ALL) NOPASSWD: /bin/journalctl' | sudo tee -a /etc/sudoers.d/monsterbox-logs\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#ip-address-changed","title":"IP Address Changed","text":"<pre><code># Update animatronic IP address\nnpm run animatronic:manage\n# Choose \"Configure Existing Animatronic\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#configuration-files","title":"\ud83d\udcc1 Configuration Files","text":""},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#animatronic-configuration","title":"Animatronic Configuration","text":"<ul> <li>Location: <code>data/animatronics.json</code></li> <li>Contains: All animatronic definitions, IPs, services, parts</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#log-storage","title":"Log Storage","text":"<ul> <li>Location: <code>log/rpi-logs-YYYY-MM-DD.log</code></li> <li>Format: JSON entries with timestamp and animatronic data</li> </ul>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#adding-new-animatronics","title":"\ud83c\udfaf Adding New Animatronics","text":"<p>When you add a new animatronic:</p> <ol> <li>Set up the RPI with Raspberry Pi OS</li> <li>Configure network and note the IP address</li> <li>Enable SSH on the RPI</li> <li>Run the setup:    <code>bash    npm run animatronic:manage    # Choose \"Add New Animatronic\"</code></li> <li>Test the connection:    <code>bash    npm run animatronic:manage    # Choose \"Test Animatronic Connection\"</code></li> </ol>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#web-interface","title":"\ud83c\udf10 Web Interface","text":"<p>Access your animatronic logs through: - Main Logs: <code>http://localhost:3000/logs</code> - Health Status: <code>http://localhost:3000/health</code> - Real-time Stream: <code>http://localhost:3000/logs/stream</code></p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#complete-mcp-status","title":"\ud83c\udf83 Complete MCP Status","text":"<p>After setup, your MonsterBox will have: - \u2705 Browser Log Collection - Client-side error tracking - \u2705 GitHub Log Collection - Repository activity monitoring - \u2705 Animatronic Log Collection - RPI system monitoring - \u2705 Application Log Collection - MonsterBox internal logs - \u2705 Health Monitoring - System status endpoints - \u2705 Real-time Streaming - Live log monitoring</p>"},{"location":"setup/ANIMATRONIC-SETUP-GUIDE/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Run the automated setup: <code>.\\scripts\\setup-ssh-keys.ps1</code></li> <li>Test your setup: <code>npm run test:mcp</code></li> <li>View your animatronics: <code>npm run animatronic:view</code></li> <li>Collect logs: <code>npm run collect:rpi-logs</code></li> <li>Monitor in real-time: Visit <code>http://localhost:3000/logs</code></li> </ol> <p>Your MonsterBox MCP log collection system will be fully operational and ready to monitor all your Halloween animatronics! \ud83c\udf83\ud83d\udc7b\ud83e\udd16</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/","title":"\ud83c\udf83 MonsterBox Animatronic SSH Setup Guide","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#overview","title":"Overview","text":"<p>This guide covers the secure SSH configuration for all MonsterBox animatronic RPIs using individual credential management through environment variables. Each animatronic can have its own distinct SSH credentials for enhanced security and scalability.</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#ssh-usage-scope","title":"\ud83c\udfaf SSH Usage Scope","text":"<p>The SSH access configured in this guide is specifically for: - MCP (Model Context Protocol) log collection and monitoring - Development work using Augment AI assistant in VS Code - NOT for runtime MonsterBox application functionality (the main show operations don't require SSH)</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>Individual Credentials: Each animatronic has its own SSH credentials for enhanced security</li> <li>Scalable Design: Easy to add new animatronics with unique credentials</li> <li>Environment Variables: No hardcoded credentials in source code</li> <li>Git Security: <code>.env</code> file excluded from version control</li> <li>Fallback Support: Legacy shared credentials for backward compatibility</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>All animatronic RPIs are connected to the network</li> <li>SSH is enabled on each RPI</li> <li>You have physical access to each RPI for initial setup</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#step-1-configure-environment-variables","title":"Step 1: Configure Environment Variables","text":"<p>The SSH credentials are configured with individual credentials per animatronic in your <code>.env</code> file:</p> <pre><code># Individual Animatronic SSH Configuration\n# Used for MCP log collection and development work with Augment AI assistant\n# NOT used for runtime MonsterBox application functionality\n\nORLOK_SSH_USER=\"remote\"\nORLOK_SSH_PASSWORD=\"klrklr89!\"\n\nPUMPKINHEAD_SSH_USER=\"remote\"\nPUMPKINHEAD_SSH_PASSWORD=\"klrklr89!\"\n\nCOFFIN_SSH_USER=\"remote\"\nCOFFIN_SSH_PASSWORD=\"klrklr89!\"\n\n# Legacy fallback credentials (for backward compatibility)\nRPI_SSH_USER=\"remote\"\nRPI_SSH_PASSWORD=\"klrklr89!\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#step-2-test-current-configuration","title":"Step 2: Test Current Configuration","text":"<p>Run the comprehensive SSH connectivity test:</p> <pre><code>npm run test:animatronic-ssh\n</code></pre> <p>This will test all three animatronics: - Orlok (192.168.8.120) - Pumpkinhead (192.168.1.101) - Currently not running - Coffin (192.168.8.149)</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#step-3-setup-each-animatronic-rpi","title":"Step 3: Setup Each Animatronic RPI","text":"<p>For each RPI that fails the connectivity test, follow these steps:</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#on-each-rpi-via-keyboardmonitor-or-existing-ssh","title":"On Each RPI (via keyboard/monitor or existing SSH):","text":"<ol> <li> <p>Create the remote user: <code>bash    sudo useradd -m -s /bin/bash remote    sudo passwd remote    # Enter password: klrklr89!</code></p> </li> <li> <p>Add user to sudo group: <code>bash    sudo usermod -aG sudo remote</code></p> </li> <li> <p>Enable SSH service: <code>bash    sudo systemctl enable ssh    sudo systemctl start ssh</code></p> </li> <li> <p>Configure log access permissions: <code>bash    echo 'remote ALL=(ALL) NOPASSWD: /bin/journalctl' | sudo tee -a /etc/sudoers.d/monsterbox-logs    sudo chmod 440 /etc/sudoers.d/monsterbox-logs</code></p> </li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#from-your-development-machine","title":"From Your Development Machine:","text":"<ol> <li>Setup SSH key authentication:    ```bash    # Generate SSH key if you don't have one    ssh-keygen -t rsa -b 4096 -C \"monsterbox@$(hostname)\"</li> </ol> <p># Copy SSH key to each animatronic    ssh-copy-id remote@192.168.8.120  # Orlok    ssh-copy-id remote@192.168.1.101  # Pumpkinhead (not currently running)    ssh-copy-id remote@192.168.8.149  # Coffin    ```</p> <ol> <li>Test SSH connections: <code>bash    ssh remote@192.168.8.120 \"echo 'Orlok SSH test successful'\"    ssh remote@192.168.1.101 \"echo 'Pumpkinhead SSH test successful'\"    ssh remote@192.168.8.149 \"echo 'Coffin SSH test successful'\"</code></li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#testing-and-validation","title":"\ud83e\uddea Testing and Validation","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#comprehensive-test-suite","title":"Comprehensive Test Suite","text":"<p>Run the full MCP test suite including SSH connectivity:</p> <pre><code>npm run test:mcp\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#animatronic-specific-ssh-tests","title":"Animatronic-Specific SSH Tests","text":"<p>Test only SSH connectivity for all animatronics:</p> <pre><code>npm run test:animatronic-ssh\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#individual-animatronic-management","title":"Individual Animatronic Management","text":"<p>Use the interactive animatronic manager:</p> <pre><code>npm run animatronic:manage\n</code></pre> <p>Available options: - \u2795 Add New Animatronic - \ud83d\udd27 Configure Existing Animatronic - \ud83d\udcca View All Animatronics - \ud83e\uddea Test Animatronic Connection - \ud83d\udccb Collect Logs from All - \ud83d\udd11 Setup SSH Keys for All - \u274c Remove Animatronic</p>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#log-collection","title":"\ud83d\udcca Log Collection","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#manual-log-collection","title":"Manual Log Collection","text":"<p>Collect logs from a specific animatronic:</p> <pre><code># Via web API\ncurl \"http://localhost:3000/logs/rpi/192.168.8.120?lines=50\"  # Orlok\ncurl \"http://localhost:3000/logs/rpi/192.168.8.149?lines=50\"  # Coffin\n\n# Via animatronic manager\nnpm run animatronic:manage\n# Choose \"Collect Logs from All\"\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#automated-log-collection","title":"Automated Log Collection","text":"<p>The MCP log collector server automatically uses the environment variables:</p> <pre><code>// Example MCP tool call\n{\n  \"name\": \"collect_rpi_console_logs\",\n  \"arguments\": {\n    \"host\": \"192.168.8.120\",\n    \"lines\": 100\n  }\n}\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#common-issues","title":"Common Issues","text":"<ol> <li>\"Connection refused\" errors:</li> <li>Ensure SSH service is running: <code>sudo systemctl status ssh</code></li> <li> <p>Check firewall settings: <code>sudo ufw status</code></p> </li> <li> <p>\"Permission denied\" errors:</p> </li> <li>Verify user exists: <code>id remote</code></li> <li> <p>Check SSH key setup: <code>ssh-copy-id remote@IP_ADDRESS</code></p> </li> <li> <p>\"sudo: journalctl: command not found\":</p> </li> <li> <p>Install systemd: <code>sudo apt update &amp;&amp; sudo apt install systemd</code></p> </li> <li> <p>Log collection fails:</p> </li> <li>Verify sudo permissions: <code>sudo visudo -f /etc/sudoers.d/monsterbox-logs</code></li> <li>Test manually: <code>ssh remote@IP \"sudo journalctl -n 5\"</code></li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Test network connectivity\nping -c 1 192.168.8.120  # Orlok\nping -c 1 192.168.8.149  # Coffin\n\n# Test SSH without keys (will prompt for password)\nssh -o PreferredAuthentications=password remote@192.168.8.120  # Orlok\nssh -o PreferredAuthentications=password remote@192.168.8.149  # Coffin\n\n# Test SSH with keys\nssh -o BatchMode=yes remote@192.168.8.120 \"echo 'SSH key test'\"  # Orlok\nssh -o BatchMode=yes remote@192.168.8.149 \"echo 'SSH key test'\"  # Coffin\n\n# Test log access\nssh remote@192.168.8.120 \"sudo journalctl -n 5 --no-pager\"  # Orlok\nssh remote@192.168.8.149 \"sudo journalctl -n 5 --no-pager\"  # Coffin\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"setup/ANIMATRONIC-SSH-SETUP/#environment-variable-security","title":"Environment Variable Security","text":"<ul> <li>\u2705 <code>.env</code> file is in <code>.gitignore</code></li> <li>\u2705 Credentials are not hardcoded in source files</li> <li>\u2705 Environment variables are loaded at runtime</li> <li>\u2705 Default fallback values provided for development</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#ssh-security","title":"SSH Security","text":"<ul> <li>\u2705 SSH key authentication preferred over passwords</li> <li>\u2705 Limited sudo access (only journalctl command)</li> <li>\u2705 Dedicated user account (not root or pi)</li> <li>\u2705 Connection timeouts configured</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#network-security","title":"Network Security","text":"<ul> <li>\ud83d\udd27 Consider changing default SSH port (22)</li> <li>\ud83d\udd27 Implement fail2ban for brute force protection</li> <li>\ud83d\udd27 Use VPN for remote access</li> <li>\ud83d\udd27 Regular security updates on all RPIs</li> </ul>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#file-structure","title":"\ud83d\udcc1 File Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 .env                           # SSH credentials (secure)\n\u251c\u2500\u2500 .env.example                   # Template with placeholders\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 animatronics.json         # Animatronic configurations\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 test-animatronic-ssh.js   # SSH connectivity tests\n\u2502   \u251c\u2500\u2500 test-mcp-setup.js         # Comprehensive MCP tests\n\u2502   \u251c\u2500\u2500 animatronic-manager.js    # Interactive management\n\u2502   \u2514\u2500\u2500 setup-ssh-keys.ps1        # PowerShell setup script\n\u2514\u2500\u2500 mcp-servers/\n    \u2514\u2500\u2500 log-collector-server.js   # MCP log collection server\n</code></pre>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After completing the SSH setup:</p> <ol> <li> <p>Run comprehensive tests: <code>bash    npm run test:mcp</code></p> </li> <li> <p>Start log collection: <code>bash    npm run collect:rpi-logs</code></p> </li> <li> <p>Monitor animatronic status: <code>bash    npm run animatronic:view</code></p> </li> <li> <p>Set up automated monitoring (optional)</p> </li> <li>Configure alerting for connection failures (optional)</li> </ol>"},{"location":"setup/ANIMATRONIC-SSH-SETUP/#support","title":"\ud83d\udcde Support","text":"<p>If you encounter issues:</p> <ol> <li>Check the test output: <code>npm run test:animatronic-ssh</code></li> <li>Review the logs in <code>log/</code> directory</li> <li>Use the interactive manager: <code>npm run animatronic:manage</code></li> <li>Verify environment variables are loaded correctly</li> </ol> <p>The SSH setup provides a secure, scalable foundation for managing all current and future animatronic RPIs in the MonsterBox system.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/","title":"\ud83c\udf83 MonsterBox MCP Log Collection System","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#overview","title":"Overview","text":"<p>Your MonsterBox now has a comprehensive Model Context Protocol (MCP) log collection system that gathers errors, logs, and monitoring data from multiple sources:</p> <ul> <li>Browser Console - JavaScript errors, console logs, network failures \u2705 OPERATIONAL</li> <li>GitHub Repository - Events, workflows, issues, commits, actions \u2705 OPERATIONAL</li> <li>MonsterBox Application - Winston logs, API logs, error logs \u2705 OPERATIONAL</li> <li>RPI4b Console - System logs, service logs, kernel messages \ud83d\udd27 NEEDS SSH SETUP</li> <li>Orlok (192.168.8.120) - Network reachable, SSH authentication needed</li> <li>Coffin (192.168.8.149) - Network unreachable</li> <li>Pumpkinhead (192.168.1.101) - Disabled (offline)</li> <li>Ubuntu System Logs - Syslog, auth logs, daemon logs \u274c DISABLED</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#current-status-89-success-rate","title":"\ud83d\udcca Current Status: 89% Success Rate","text":"<ul> <li>3/5 data sources fully operational</li> <li>2/5 data sources need configuration</li> <li>Only enabled animatronics are tested (Pumpkinhead excluded)</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#test-your-mcp-setup","title":"Test Your MCP Setup","text":"<pre><code>npm run test:mcp\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#collect-github-logs","title":"Collect GitHub Logs","text":"<pre><code>npm run collect:github-logs\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#check-api-keys-includes-mcp-servers","title":"Check API Keys (includes MCP servers)","text":"<pre><code>npm run check-api-keys\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#animatronic-status-configuration","title":"\ud83e\udd16 Animatronic Status Configuration","text":"<p>The MCP system now intelligently handles animatronic status:</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#enabled-animatronics-tested","title":"Enabled Animatronics (Tested)","text":"<ul> <li>Orlok (192.168.8.120) - <code>status: \"running\"</code>, <code>enabled: true</code></li> <li>Coffin (192.168.8.149) - <code>status: \"running\"</code>, <code>enabled: true</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#disabled-animatronics-skipped","title":"Disabled Animatronics (Skipped)","text":"<ul> <li>Pumpkinhead (192.168.1.101) - <code>status: \"offline\"</code>, <code>enabled: false</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>data/animatronics.json</code> - Individual animatronic settings</li> <li><code>data/rpi-config.json</code> - RPI system configuration</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#mcp-servers-configured","title":"\ud83d\udccb MCP Servers Configured","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#1-task-master-ai","title":"1. Task Master AI","text":"<ul> <li>Purpose: Project management and task automation</li> <li>Status: \u2705 Configured with your API keys</li> <li>Location: <code>.cursor/mcp.json</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#2-monsterbox-log-collector","title":"2. MonsterBox Log Collector","text":"<ul> <li>Purpose: Multi-source log collection and analysis</li> <li>Status: \u2705 Configured and ready</li> <li>Location: <code>mcp-servers/log-collector-server.js</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#mcp-tools-available","title":"\ud83d\udd27 MCP Tools Available","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-log-collection","title":"Browser Log Collection","text":"<pre><code>// Automatically collects:\n- Console logs (log, info, warn, error, debug)\n- JavaScript errors and stack traces\n- Unhandled promise rejections\n- Network request failures\n- Performance metrics\n- User interactions\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-log-collection","title":"GitHub Log Collection","text":"<pre><code>// Available tools:\ncollect_github_logs({\n    repo: \"MonsterBox\",\n    events: [\"push\", \"pull_request\", \"issues\"]\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#system-log-collection","title":"System Log Collection","text":"<pre><code>// Available tools:\ncollect_rpi_console_logs({\n    host: \"your-rpi-ip\",\n    lines: 100\n})\n\ncollect_ubuntu_system_logs({\n    host: \"your-ubuntu-ip\", \n    logTypes: [\"syslog\", \"auth\", \"kern\"],\n    since: \"1 hour ago\"\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#log-analysis","title":"Log Analysis","text":"<pre><code>// Available tools:\nanalyze_logs({\n    sources: [\"browser\", \"github\", \"system\"],\n    pattern: \"error|exception|fail\"\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#web-endpoints","title":"\ud83c\udf10 Web Endpoints","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-log-collection_1","title":"Browser Log Collection","text":"<ul> <li>POST <code>/logs/browser</code> - Receive browser logs</li> <li>GET <code>/logs/system</code> - Collect system logs</li> <li>GET <code>/logs/rpi/:host</code> - Collect RPI logs</li> <li>GET <code>/logs/application</code> - Get MonsterBox logs</li> <li>POST <code>/logs/analyze</code> - Analyze collected logs</li> <li>GET <code>/logs/stream</code> - Real-time log streaming</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#health-monitoring","title":"Health Monitoring","text":"<ul> <li>GET <code>/health</code> - Basic health check</li> <li>GET <code>/health/api-keys</code> - API key status</li> <li>GET <code>/health/environment</code> - Environment variables</li> <li>GET <code>/health/connectivity</code> - Service connectivity</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#file-structure","title":"\ud83d\udcc1 File Structure","text":"<pre><code>MonsterBox/\n\u251c\u2500\u2500 mcp-servers/\n\u2502   \u2514\u2500\u2500 log-collector-server.js     # MCP log collection server\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 github-log-collector.js     # GitHub API log collector\n\u2502   \u2514\u2500\u2500 test-mcp-setup.js          # MCP setup testing\n\u251c\u2500\u2500 public/js/\n\u2502   \u2514\u2500\u2500 log-collector.js           # Browser log collection client\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 logRoutes.js               # Enhanced log collection API\n\u251c\u2500\u2500 .cursor/\n\u2502   \u2514\u2500\u2500 mcp.json                   # MCP server configuration\n\u2514\u2500\u2500 log/\n    \u251c\u2500\u2500 browser.log                # Browser logs\n    \u251c\u2500\u2500 github-YYYY-MM-DD.log      # GitHub logs\n    \u2514\u2500\u2500 mcp-test-YYYY-MM-DD.json   # MCP test results\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#environment-variables","title":"\ud83d\udd11 Environment Variables","text":"<p>Your <code>.env</code> file now includes:</p> <pre><code># API Keys for MCP servers\nANTHROPIC_API_KEY=\"your-key\"\nOPENAI_API_KEY=\"your-key\" \nGOOGLE_API_KEY=\"your-key\"\n\n# Optional for GitHub log collection\nGITHUB_TOKEN=\"your-github-token\"\n\n# Application configuration\nSESSION_SECRET=\"your-session-secret\"\nNODE_ENV=\"development\"\nPORT=\"3000\"\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#testing-commands","title":"\ud83e\uddea Testing Commands","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#complete-mcp-test-suite","title":"Complete MCP Test Suite","text":"<pre><code>npm run test:mcp\n</code></pre> <p>Tests all MCP components, endpoints, and integrations.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#api-key-testing","title":"API Key Testing","text":"<pre><code>npm run check-api-keys\n</code></pre> <p>Verifies all API keys work with their services.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-log-collection_1","title":"GitHub Log Collection","text":"<pre><code>npm run collect:github-logs\n</code></pre> <p>Collects recent GitHub repository activity.</p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#log-collection-examples","title":"\ud83d\udcca Log Collection Examples","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-logs","title":"Browser Logs","text":"<pre><code>// Automatic collection of:\n{\n  \"type\": \"console\",\n  \"level\": \"error\", \n  \"message\": \"Failed to load scene data\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"url\": \"http://localhost:3000/scenes\",\n  \"sessionId\": \"mb-1705312200000-abc123\"\n}\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-logs","title":"GitHub Logs","text":"<pre><code>// Repository events:\n{\n  \"type\": \"PushEvent\",\n  \"actor\": \"arwpc\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"payload\": {\n    \"commits\": [...]\n  }\n}\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#system-logs","title":"System Logs","text":"<pre><code>// RPI/Ubuntu logs:\n{\n  \"timestamp\": \"2024-01-15 10:30:00\",\n  \"host\": \"monsterbox-rpi\",\n  \"service\": \"systemd\",\n  \"message\": \"Started MonsterBox service\"\n}\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#adding-rpi4b-log-collection","title":"Adding RPI4b Log Collection","text":"<ol> <li>Set up SSH key authentication to your RPI</li> <li>Update the log collection calls with your RPI IP:</li> </ol> <pre><code>collect_rpi_console_logs({\n    host: \"192.168.1.100\",  // Your RPI IP\n    lines: 100,\n    service: \"monsterbox\"   // Optional: specific service\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#adding-github-token","title":"Adding GitHub Token","text":"<ol> <li>Create a GitHub Personal Access Token</li> <li>Add to your <code>.env</code> file:</li> </ol> <pre><code>GITHUB_TOKEN=\"ghp_your_token_here\"\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#configuring-ubuntu-system-logs","title":"Configuring Ubuntu System Logs","text":"<pre><code>collect_ubuntu_system_logs({\n    host: \"your-ubuntu-server\",\n    logTypes: [\"syslog\", \"auth\", \"kern\", \"daemon\"],\n    since: \"1 hour ago\"\n})\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#mcp-server-not-starting","title":"MCP Server Not Starting","text":"<pre><code># Check MCP configuration\ncat .cursor/mcp.json\n\n# Test MCP server manually\nnode mcp-servers/log-collector-server.js\n</code></pre>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#browser-logs-not-collecting","title":"Browser Logs Not Collecting","text":"<ol> <li>Check if log-collector.js is loaded in browser</li> <li>Verify <code>/logs/browser</code> endpoint is accessible</li> <li>Check browser console for errors</li> </ol>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#github-api-rate-limits","title":"GitHub API Rate Limits","text":"<ul> <li>Without token: 60 requests/hour</li> <li>With token: 5000 requests/hour</li> <li>Check rate limit: <code>npm run collect:github-logs</code></li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#system-log-access-issues","title":"System Log Access Issues","text":"<ul> <li>Ensure SSH access to remote systems</li> <li>Check sudo permissions for journalctl</li> <li>Verify system log paths exist</li> </ul>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#monitoring-dashboard","title":"\ud83d\udcc8 Monitoring Dashboard","text":"<p>Access your logs through: - Web Interface: <code>http://localhost:3000/logs</code> - Health Status: <code>http://localhost:3000/health</code> - Real-time Stream: <code>http://localhost:3000/logs/stream</code></p>"},{"location":"setup/MCP-LOG-COLLECTION-SETUP/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Run the test suite: <code>npm run test:mcp</code></li> <li>Configure your RPI IP in log collection calls</li> <li>Add GitHub token for enhanced GitHub log collection</li> <li>Set up automated log collection using MCP tools</li> <li>Monitor logs through the web interface</li> </ol> <p>Your MonsterBox MCP log collection system is now ready to gather comprehensive monitoring data from all your sources! \ud83c\udf83\ud83d\udc7b\ud83e\udd16</p>"},{"location":"setup/SEMATEXT-SETUP/","title":"MonsterBox Sematext Integration Setup","text":"<p>This guide explains how to set up Sematext monitoring for your MonsterBox RPI4b systems, replacing SSH-based MCP log collection with a proper monitoring infrastructure.</p>"},{"location":"setup/SEMATEXT-SETUP/#overview","title":"\ud83c\udfaf Overview","text":"<p>Sematext provides: - Centralized log collection from all RPI4b systems - Real-time system metrics (CPU, memory, disk, network) - Application monitoring for MonsterBox services - Alerting for critical issues - MCP integration for AI-powered log analysis</p>"},{"location":"setup/SEMATEXT-SETUP/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ol> <li>Sematext Account: Sign up at sematext.com</li> <li>RPI4b Systems: Orlok (192.168.8.120) and Coffin (192.168.8.140) running</li> <li>SSH Access: Configured SSH credentials for RPI systems</li> <li>Node.js Dependencies: <code>inquirer</code> and <code>axios</code> installed</li> </ol>"},{"location":"setup/SEMATEXT-SETUP/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"setup/SEMATEXT-SETUP/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#2-set-up-sematext-account","title":"2. Set Up Sematext Account","text":"<ol> <li>Create account at sematext.com</li> <li>Create a new Logs App for MonsterBox</li> <li>Note your API Key and Logs Token</li> </ol>"},{"location":"setup/SEMATEXT-SETUP/#3-run-sematext-setup","title":"3. Run Sematext Setup","text":"<pre><code>npm run setup:sematext\n</code></pre> <p>The setup wizard will: - Prompt for your Sematext credentials - Install agents on enabled RPI4b systems - Configure log collection for MonsterBox services - Set up system metrics monitoring - Create MCP server integration</p>"},{"location":"setup/SEMATEXT-SETUP/#4-test-the-setup","title":"4. Test the Setup","text":"<pre><code>npm run test:sematext\n</code></pre> <p>This will verify: - \u2705 Sematext API connectivity - \u2705 Agent installation on RPI systems - \u2705 Log collection functionality - \u2705 Metrics collection (if enabled)</p>"},{"location":"setup/SEMATEXT-SETUP/#5-start-mcp-server","title":"5. Start MCP Server","text":"<pre><code>npm run start:sematext-mcp\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"setup/SEMATEXT-SETUP/#sematext-configuration","title":"Sematext Configuration","text":"<p>The setup creates <code>data/sematext-config.json</code>:</p> <pre><code>{\n  \"sematext\": {\n    \"api_key\": \"your-api-key\",\n    \"logs_token\": \"your-logs-token\",\n    \"app_name\": \"MonsterBox-Animatronics\",\n    \"log_sources\": [\"system\", \"monsterbox\", \"nginx\", \"ssh\", \"gpio\"],\n    \"metrics_enabled\": true,\n    \"alerts_enabled\": true\n  },\n  \"systems\": [\n    {\n      \"name\": \"orlok\",\n      \"host\": \"192.168.8.120\",\n      \"enabled\": true,\n      \"agent_status\": \"installed\"\n    },\n    {\n      \"name\": \"coffin\", \n      \"host\": \"192.168.8.140\",\n      \"enabled\": true,\n      \"agent_status\": \"installed\"\n    }\n  ]\n}\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#log-sources-monitored","title":"Log Sources Monitored","text":"<ul> <li>System Logs: <code>journalctl</code> output for system events</li> <li>MonsterBox App: Application logs from <code>/var/log/monsterbox/</code></li> <li>Nginx: Web server access and error logs</li> <li>SSH: Authentication and connection logs</li> <li>GPIO: Hardware control and sensor logs</li> <li>Custom: Any additional application logs</li> </ul>"},{"location":"setup/SEMATEXT-SETUP/#mcp-integration","title":"MCP Integration","text":"<p>The Sematext MCP server provides these tools:</p>"},{"location":"setup/SEMATEXT-SETUP/#query_sematext_logs","title":"<code>query_sematext_logs</code>","text":"<p>Query logs from RPI systems:</p> <pre><code>query_sematext_logs({\n    system: \"orlok\",           // orlok, coffin, pumpkinhead, all\n    log_type: \"monsterbox\",    // system, monsterbox, nginx, ssh, gpio, all\n    time_range: \"1h\",          // 1h, 6h, 24h, 7d\n    query: \"error\",            // Optional search term\n    limit: 100                 // Max results\n})\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#get_sematext_metrics","title":"<code>get_sematext_metrics</code>","text":"<p>Get system metrics:</p> <pre><code>get_sematext_metrics({\n    system: \"coffin\",          // orlok, coffin, pumpkinhead, all\n    metric_type: \"cpu\",        // cpu, memory, disk, network, all\n    time_range: \"6h\"           // 1h, 6h, 24h, 7d\n})\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#check_sematext_alerts","title":"<code>check_sematext_alerts</code>","text":"<p>Check active alerts:</p> <pre><code>check_sematext_alerts({\n    system: \"all\",             // orlok, coffin, pumpkinhead, all\n    severity: \"critical\"       // critical, warning, info, all\n})\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#get_system_status","title":"<code>get_system_status</code>","text":"<p>Get overall system status:</p> <pre><code>get_system_status({\n    include_metrics: true      // Include basic metrics\n})\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#accessing-your-data","title":"\ud83d\udcca Accessing Your Data","text":""},{"location":"setup/SEMATEXT-SETUP/#sematext-ui","title":"Sematext UI","text":"<ul> <li>Logs: https://apps.sematext.com/ui/logs</li> <li>Metrics: https://apps.sematext.com/ui/monitoring</li> <li>Alerts: https://apps.sematext.com/ui/alerts</li> </ul>"},{"location":"setup/SEMATEXT-SETUP/#mcp-integration_1","title":"MCP Integration","text":"<p>Add to your <code>augment-mcp-config.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"monsterbox-sematext\": {\n      \"command\": \"node\",\n      \"args\": [\"mcp-servers/sematext-server.js\"],\n      \"cwd\": \"C:\\\\Users\\\\arwpe\\\\CodeBase\\\\MonsterBox-1\"\n    }\n  }\n}\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"setup/SEMATEXT-SETUP/#agent-installation-issues","title":"Agent Installation Issues","text":"<ol> <li> <p>Check SSH connectivity:    <code>bash    ssh remote@192.168.8.120 \"echo 'Connection OK'\"</code></p> </li> <li> <p>Verify agent status:    <code>bash    ssh remote@192.168.8.120 \"sudo systemctl status spm-monitor logagent\"</code></p> </li> <li> <p>Check agent logs:    <code>bash    ssh remote@192.168.8.120 \"sudo journalctl -u logagent -f\"</code></p> </li> </ol>"},{"location":"setup/SEMATEXT-SETUP/#log-collection-issues","title":"Log Collection Issues","text":"<ol> <li> <p>Test log generation:    <code>bash    ssh remote@192.168.8.120 \"echo 'Test log' | logger -t monsterbox-test\"</code></p> </li> <li> <p>Check Sematext connectivity:    <code>bash    npm run test:sematext</code></p> </li> <li> <p>Verify configuration:    <code>bash    ssh remote@192.168.8.120 \"sudo cat /etc/sematext/logagent.conf\"</code></p> </li> </ol>"},{"location":"setup/SEMATEXT-SETUP/#mcp-server-issues","title":"MCP Server Issues","text":"<ol> <li> <p>Test MCP server directly:    <code>bash    node mcp-servers/sematext-server.js</code></p> </li> <li> <p>Check configuration file:    <code>bash    cat data/sematext-config.json</code></p> </li> <li> <p>Verify API credentials:</p> </li> <li>Check your Sematext dashboard</li> <li>Ensure API key and logs token are correct</li> </ol>"},{"location":"setup/SEMATEXT-SETUP/#advanced-configuration","title":"\ud83c\udf9b\ufe0f Advanced Configuration","text":""},{"location":"setup/SEMATEXT-SETUP/#custom-log-patterns","title":"Custom Log Patterns","text":"<p>Edit the logagent configuration on each RPI:</p> <pre><code>sudo nano /etc/sematext/logagent.conf\n</code></pre> <p>Add custom log sources:</p> <pre><code>input:\n  - module: files\n    patterns:\n      - '/path/to/custom/logs/*.log'\n    sourceName: custom-app\n    tags:\n      system: orlok\n      type: custom\n</code></pre>"},{"location":"setup/SEMATEXT-SETUP/#alert-configuration","title":"Alert Configuration","text":"<p>Set up alerts in the Sematext UI: 1. Go to https://apps.sematext.com/ui/alerts 2. Create new alert rule 3. Configure conditions (e.g., error rate &gt; 10/min) 4. Set notification channels</p>"},{"location":"setup/SEMATEXT-SETUP/#dashboard-creation","title":"Dashboard Creation","text":"<p>Create custom dashboards: 1. Go to https://apps.sematext.com/ui/dashboards 2. Add widgets for key metrics 3. Save and share with team</p>"},{"location":"setup/SEMATEXT-SETUP/#migration-from-ssh-based-mcp","title":"\ud83d\udd04 Migration from SSH-based MCP","text":"<p>The Sematext setup replaces the SSH-based log collection:</p>"},{"location":"setup/SEMATEXT-SETUP/#before-ssh-based","title":"Before (SSH-based)","text":"<ul> <li>Manual SSH connections to RPI systems</li> <li>Limited log retention</li> <li>No centralized monitoring</li> <li>Performance impact on RPI systems</li> </ul>"},{"location":"setup/SEMATEXT-SETUP/#after-sematext-based","title":"After (Sematext-based)","text":"<ul> <li>Automated log shipping</li> <li>Centralized storage and search</li> <li>Real-time monitoring and alerting</li> <li>Minimal RPI performance impact</li> <li>Professional monitoring infrastructure</li> </ul>"},{"location":"setup/SEMATEXT-SETUP/#transition-steps","title":"Transition Steps","text":"<ol> <li>Run Sematext setup: <code>npm run setup:sematext</code></li> <li>Test new system: <code>npm run test:sematext</code></li> <li>Update MCP config: Use <code>monsterbox-sematext</code> server</li> <li>Verify functionality: Check logs in Sematext UI</li> <li>Disable SSH MCP: Comment out <code>monsterbox-log-collector</code> in MCP config</li> </ol>"},{"location":"setup/SEMATEXT-SETUP/#benefits","title":"\ud83d\udcc8 Benefits","text":"<ul> <li>Scalability: Easy to add new RPI systems</li> <li>Reliability: Professional monitoring infrastructure</li> <li>Performance: Minimal impact on RPI resources</li> <li>Features: Advanced search, alerting, and analytics</li> <li>Integration: Seamless MCP integration for AI analysis</li> <li>Maintenance: Reduced SSH configuration complexity</li> </ul>"},{"location":"setup/SEMATEXT-SETUP/#support","title":"\ud83c\udd98 Support","text":"<ul> <li>Sematext Documentation: https://sematext.com/docs/</li> <li>MonsterBox Issues: Create GitHub issue</li> <li>MCP Integration: Check <code>mcp-servers/sematext-server.js</code></li> </ul>"}]}