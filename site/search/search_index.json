{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MonsterBox","text":"<p>MonsterBox is a refactored scene builder application designed to manage scenes and steps efficiently for animatronic automation. It integrates hardware components (I2C, GPIO, servos, sensors, audio, cameras) and provides a web-based interface for easy control and configuration.</p>"},{"location":"character_coffin_breaker/","title":"Coffin Breaker \u2014 Cyberpunk Character SheetCoffin Breaker","text":"Description: Our spanish lady has been trapped in the coffin for a thousand years, and now she's breaking out! Hardware Overview: Coffin Sensor (sensor), GPIO: 16 Coffin door (linear-actuator), DIR: 5, PWM: 13 Burning Rose (light), GPIO: 16 Sound List: Coffin Creaking (1729640529230-coffin_door_creaking.mp3) Coffin Background (1729640707787-07 - The Coffin.mp3) Coffin Breathing (1729640735282-11 - Breathing (In Terror).mp3) Welcome to Coralville, Where it's colder than Hell! (1730419782061-Welcome_to_Coralville__Where_i.mp3) I'm stuck in this coffin, please help me out little Iowan (1730419838788-I_m_stuck_in_this_coffin__plea.mp3) Here in Iowa's fertile ground (1730419956496-Here_in_Iowa_s_fertile_ground_.mp3) Alex's Curse (1730423842407-Alex_s_Curse_Alex_scorned_a_wi.mp3) Welcome to Coralville, Where it's colder than Hell! (1730505246291-Welcome_to_Coralville__Where_i.mp3) I'm stuck in this coffin, please help me out little Iowan (1730505257581-I_m_stuck_in_this_coffin__plea.mp3) Alex's Curse (1730505311236-Alex_s_Curse_Alex_scorned_a_wi.mp3)  Alex scorned a witch's heart, Now frozen deep, worlds apart. Poor Alex lies in Iowa's ground, While tractors make their rumbling sound. A thousand years must Alex wait, Until time unlocks his frozen fate. (1730505326248-_Alex_scorned_a_witch_s_heart_.mp3) In the graveyard (1730505527562-In_the_graveyard_late_at_night.mp3) In the graveyard (1730505563363-In_the_graveyard_late_at_night.mp3) Help? Is someone out there?  (1730505661219-Help__Is_someone_out_there__Pl.mp3) Notes/Improvements: \u2013"},{"location":"character_orlok/","title":"Orlok \u2014 Cyberpunk Character SheetOrlok","text":"Description: A mysterious nobleman and vampire who lives alone in his ruined castle, who wants to acquire a new property in Germany. He was once a Solomonar who was cursed by the Devil to become a vampire. Hardware Overview: Right Arm of Satan (linear-actuator), DIR: 23, PWM: 12 Left Arm of Manipulation (linear-actuator), DIR: 18, PWM: 13 Hand of Azura (light), GPIO: 26 Eye of Orlok (sensor), GPIO: 16 Elbow (servo), Pin: 3 Forearm (servo), Pin: 3 Head on a Swivel (servo), Pin: 3 Hand Light: 26 Motor1: DIR=18, PWM=13 Motor2: DIR=23, PWM=12 PIR Sensor: 16 LED: 17 Servo: 6 Sound List: Good Evening (1729639541789-Evening.mp3) Satanas Lucifer (1729639570661-satanas-lucifer.mp3) Speaking in tongues (1729639678184-gibberish words.mp3) I have bad weather (1730414837585-I_have_bad_weather.mp3) I hate bad weather (1730414851165-I_hate_bad_weather.mp3) My Head Is Spinning (1730416580678-My_Head_Is_Spinning.mp3) If you think it's cold in hell, check Coralville out!  (1730416624369-If_you_think_it_s_cold_in_hell.mp3) Happy Halloween Coralville!  (1730416677959-Happy_Halloween_Coralville__.mp3) IN The DESERT BY Stephen Crane (1730416871366-IN_The_DESERT__BY_Stephen_Cran.mp3) Listen up, Iowa kiddies (1730421630880-Listen_up__Iowa_kiddies_so_swe.mp3) Scary Latin (1730421695207-Audite__dulces_pueri_Iovenses_.mp3) The Devil's Detective (1730504652559-The_Devil_s_Detective_In_Iowa_.mp3) Don't Forget to Vote!  (1730504876171-Don_t_Forget_to_Vote__I_m_watc.mp3) Notes/Improvements: \u2013"},{"location":"character_pumpkinhead/","title":"PumpkinHead \u2014 Cyberpunk Character SheetPumpkinHead","text":"Description: The pumpkin patch has been full of the little guys, but who minds them? Pumpkinhead! Hardware Overview: Body Swing (motor), DIR: 26, PWM: 13 Punkin Motion Detector (sensor), GPIO: 16 Head Light (led), GPIO: 17 Scary Body Mover (motor), DIR: 6, PWM: 13 Sound List: Monster Howl (1729640808280-monster-howl-85304.mp3) Monster Snarl (1729640824676-monster-snarl-5-69062.mp3) Big Roar (1729640841292-Roar.mp3) Random Growling Sounds (1729640860311-random-monster-sounds-29328.mp3) Notes/Improvements: \u2013"},{"location":"character_sheet/","title":"Character sheet","text":"Cyberpunk Character Sheet Name: NeoSynth Description: Elite netrunner with a mysterious past. Master of digital infiltration. IP Address: 192.168.1.42 Samba Login: neosynth Samba Password: ******** SSH Login: neo@cyberdeck SSH Password: ******** Hardware Overview: <ul> <li>Raspberry Pi 4B</li> <li>USB Camera (active)</li> <li>Adafruit Audio FX Sound Board</li> <li>Servo Controller (PCA9685)</li> </ul> Video Usage: Camera active, streaming to HQ Sound List: <ul> <li>startup.wav (2s)</li> <li>alarm.wav (5s)</li> <li>greeting.wav (3s)</li> </ul> Notes/Improvements: Upgrade to infrared camera. Add voice modulation for disguise operations."},{"location":"config/","title":"Configuration","text":""},{"location":"config/#configuration-details","title":"Configuration Details","text":"<ul> <li><code>.env</code> defines environment variables</li> <li>JSON files in <code>data/</code> hold persistent settings</li> <li>Match GPIO/I2C pin numbers to your hardware setup</li> <li>Place custom scripts in <code>scripts/</code> directory</li> </ul>"},{"location":"faq/","title":"FAQ / Troubleshooting","text":""},{"location":"faq/#faq-troubleshooting","title":"FAQ / Troubleshooting","text":"<p>Q: Interface not loading? A: Ensure dependencies are installed and <code>.env</code> is set up.</p> <p>Q: Hardware unresponsive? A: Check GPIO/I2C pin config and wiring.</p> <p>Q: How to add characters or parts? A: Use the web UI.</p> <p>Q: Where are logs? A: Accessible via web UI or in <code>log/</code> dir.</p>"},{"location":"install/","title":"Installation Guide","text":"<p>MonsterBox supports easy setup on a Raspberry Pi 4B. Follow these steps for a fresh install or major redeployment.</p>"},{"location":"install/#1-prepare-your-raspberry-pi-4b","title":"1. Prepare Your Raspberry Pi 4B","text":"<ul> <li>Install the latest Raspberry Pi OS (Lite or Desktop) on your microSD card using the Raspberry Pi Imager.</li> <li>Boot the Pi, connect to your network, and perform initial setup (locale, WiFi, etc.).</li> <li>Ensure your Pi is connected to the Internet.</li> </ul>"},{"location":"install/#2-set-up-github-access","title":"2. Set Up GitHub Access","text":"<ul> <li>Install Git:   <code>bash   sudo apt-get update   sudo apt-get install -y git</code></li> <li>(Optional but recommended) Generate SSH keys and add them to your GitHub account for secure access:   <code>bash   ssh-keygen -t ed25519 -C \"your_email@example.com\"   cat ~/.ssh/id_ed25519.pub   # Copy this key to your GitHub SSH keys</code></li> </ul>"},{"location":"install/#3-download-monsterbox-files","title":"3. Download MonsterBox Files","text":"<ul> <li>Clone the repository:   <code>bash   git clone https://github.com/yourusername/monsterbox.git   cd monsterbox</code></li> </ul>"},{"location":"install/#4-run-the-installation-script","title":"4. Run the Installation Script","text":"<ul> <li>The install script will upgrade your OS, install all system and Python/Node dependencies, configure hardware interfaces, and set permissions:   <code>bash   sudo bash install.sh</code> <p>Note: This may take several minutes. The script will prompt if any errors occur.</p> </li> </ul>"},{"location":"install/#5-set-up-environment-variables","title":"5. Set Up Environment Variables","text":"<ul> <li>Create a <code>.env</code> file in the project root. See <code>.env.example</code> for required variables (e.g., PORT, NODE_ENV, hardware settings).</li> </ul>"},{"location":"install/#6-start-the-application","title":"6. Start the Application","text":"<ul> <li>Launch MonsterBox:   <code>bash   npm start</code></li> <li>Access the web interface at <code>http://&lt;your-pi-ip&gt;:3000</code> from your browser.</li> </ul>"},{"location":"install/#update-guide","title":"Update Guide","text":"<p>Routine updates keep your MonsterBox system and dependencies current without a full OS upgrade.</p>"},{"location":"install/#1-update-monsterbox-files","title":"1. Update MonsterBox Files","text":"<ul> <li>Pull the latest changes from GitHub:   <code>bash   git pull origin main</code></li> </ul>"},{"location":"install/#2-run-the-update-script","title":"2. Run the Update Script","text":"<ul> <li>This updates project dependencies and ensures required services are running:   <code>bash   sudo bash update.sh</code> <p>Note: No OS upgrade is performed. For major upgrades or after long periods, re-run the full install script.</p> </li> </ul> <p>For troubleshooting, see the FAQ or contact the project maintainer.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>MIT License. See <code>LICENSE</code> file for details.</p>"},{"location":"networking/","title":"Networking","text":""},{"location":"networking/#monsterbox-traveling-network","title":"MonsterBox Traveling Network","text":"<p>Private Networks: - <code>MonsterNet5g</code> / <code>MonsterNet2.4g</code> - Password: <code>VampiresSuck2025!</code></p> <p>Animatronic IPs: - Pumpkinhead: <code>192.168.8.200</code> - Coffin: <code>192.168.8.140</code> - Orlok: <code>192.168.8.120</code> - Login: <code>remote</code> / Password: <code>klrklr89!</code></p> <p>SMB File Sharing: - Accessible via Windows Explorer: <code>\\192.168.8.200</code> - Username: <code>remote</code>, Password: <code>klrklr89!</code></p> <p>SSH Access:</p> <pre><code>ssh -l remote 192.168.8.200\n</code></pre> <p>GitHub Repo: https://github.com/arwpc/MonsterBox</p>"},{"location":"structure/","title":"Directory Structure","text":""},{"location":"structure/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>controllers/</code>: Business logic</li> <li><code>data/</code>: Configuration JSON</li> <li><code>public/</code>: Static assets</li> <li><code>routes/</code>: API and routing</li> <li><code>scripts/</code>: Python/JS scripts</li> <li><code>services/</code>: Core services</li> <li><code>tests/</code>: Automated tests</li> <li><code>views/</code>: EJS web templates</li> </ul>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#usage-instructions","title":"Usage Instructions","text":"<ul> <li>Access the MonsterBox web interface at <code>http://localhost:3000</code> (or your configured port).</li> <li>Select a character and navigate through Characters, Parts, Sounds, Scenes, etc.</li> <li>Trigger scenes, view logs, and control devices in real time.</li> </ul>"},{"location":"usage/#installation-updates","title":"Installation &amp; Updates","text":"<ul> <li>For full installation instructions\u2014including first-time setup, GitHub connection, and running the install script\u2014see install.md.</li> <li>For regular updates (dependencies/services), use the update script:   <code>bash   sudo bash update.sh</code></li> <li>For a major re-deployment or after long periods, use the install script:   <code>bash   sudo bash install.sh</code></li> </ul> <p>Refer to install.md for detailed steps and troubleshooting.</p>"},{"location":"animatronics/","title":"Animatronics Workshop Overview","text":"<p>This section contains guides for working with animatronic characters using the MonsterBox framework. Each subsection provides documentation on setup, hands-on challenges, and integration with AI tools.</p>"},{"location":"animatronics/familiarization/","title":"Familiarization","text":""},{"location":"animatronics/familiarization/#1-familiarization","title":"1. Familiarization","text":""},{"location":"animatronics/familiarization/#hardware","title":"Hardware","text":"<ul> <li>Servos</li> <li>Linear Actuators</li> <li>Camera / Sound / AV</li> </ul>"},{"location":"animatronics/familiarization/#software","title":"Software","text":"<ul> <li>Git Repo</li> <li>RPi4b</li> <li>MonsterBox</li> <li>AI APIs</li> </ul>"},{"location":"animatronics/familiarization/#integration","title":"Integration","text":"<ul> <li>Software Development (Codemium or Windsurf)</li> <li>CI/CD Demonstrations</li> </ul>"},{"location":"animatronics/hands_on/","title":"Hands-On Activities","text":""},{"location":"animatronics/hands_on/#3-hands-on-opportunities","title":"3. Hands-On Opportunities","text":"<ul> <li>Coffin: ChatGPT integration, customizable voices</li> <li>Count Orlok: OpenCV head tracking</li> <li>Pumpkinhead: ElevenLabs TTS echoing</li> <li>BigMouth Skull: ChatterPi (talking + GPT)</li> <li>SmallMouth Skull: ChatterPi (talking + GPT)</li> </ul>"},{"location":"animatronics/presentation/","title":"Final Presentation","text":""},{"location":"animatronics/presentation/#4-presentation-of-monsters","title":"4. Presentation of Monsters","text":"<ul> <li>Possible Contest or Awards</li> <li>Letting GPTs talk to each other</li> <li>Lessons Learned and Suggestions for Improvement</li> </ul>"},{"location":"animatronics/simple_steps/","title":"Simple Steps","text":""},{"location":"animatronics/simple_steps/#2-simple-steps","title":"2. Simple Steps","text":"<ul> <li>Movement with Linear Actuators &amp; Servos</li> <li>Sounds using ElevenLabs AI</li> <li>ChatterPi - Talking Skulls</li> </ul>"},{"location":"hardware/gpio_assignments/","title":"GPIO Assignments","text":""},{"location":"hardware/gpio_assignments/#gpio-assignments","title":"GPIO Assignments","text":""},{"location":"hardware/gpio_assignments/#orlok","title":"Orlok","text":"<ul> <li>Hand Light: 26</li> <li>Motor1: DIR=18, PWM=13</li> <li>Motor2: DIR=23, PWM=12</li> <li>PIR Sensor: 16</li> <li>LED: 17</li> <li>Servo: 6</li> </ul>"},{"location":"hardware/gpio_assignments/#coffin","title":"Coffin","text":"<ul> <li>MDD10A Control Board</li> <li>Motor1: DIR=5, PWM=13</li> <li>PIR Sensor: 26</li> </ul>"},{"location":"hardware/gpio_assignments/#pumpkinhead","title":"Pumpkinhead","text":"<ul> <li>Motor1: DIR=26, PWM=13</li> <li>Sensor: 16</li> </ul>"},{"location":"hardware/hardware_schedule/","title":"Hardware Schedule","text":""},{"location":"hardware/hardware_schedule/#hardware-schedule","title":"Hardware Schedule","text":"<p>Core: - Raspberry Pi 4B, 4GB RAM, 256GB SD</p> <p>Audio Interface: - USB Audio Card</p> <p>Motor Control: - Cytron 2x10A Motor Driver</p> <p>Servo Controllers: - PCA9685 Controller</p> <p>Servos: - Hooyij 40kg Servo - Miuzei MG90S Micro Servo - GoBilda Stingray 2 Servo</p> <p>Linear Actuators: - 150mm Actuator - 12\" Coffin Actuator</p> <p>Misc: - Jeep Wiper Motor - PIR Motion Sensor</p>"},{"location":"integration/elevenlabs/","title":"ElevenLabs TTS","text":""},{"location":"integration/elevenlabs/#elevenlabs-integration","title":"ElevenLabs Integration","text":"<p>MonsterBox integrates ElevenLabs Text-to-Speech (TTS) to generate high-quality voice lines for animatronic characters. This integration allows users to select from a variety of voices, preview generated speech, and assign voices to characters or scenes.</p>"},{"location":"integration/elevenlabs/#how-elevenlabs-is-integrated","title":"How ElevenLabs is Integrated","text":"<ul> <li>ElevenLabs TTS is accessed via the MonsterBox web interface (\"Configure Voice\" button, scene editor, and sound management).</li> <li>The backend uses a Node.js API wrapper that communicates with the ElevenLabs API using a secret API key stored in environment variables.</li> <li>Voices are fetched via <code>/api/voice/available</code>, filtered for TTS capabilities, and displayed in the UI for selection.</li> <li>Voice generation (TTS) is triggered via <code>/api/voice/generate</code> and <code>/api/voice/generate-for-scene</code> endpoints.</li> </ul>"},{"location":"integration/elevenlabs/#api-key-configuration","title":"API Key Configuration","text":"<p>To use ElevenLabs, you must provide a valid API key. Set this in your <code>.env</code> file at the project root:</p> <pre><code>ELEVENLABS_API_KEY=your_actual_api_key_here\n</code></pre> <p>Restart the application after changing the key.</p>"},{"location":"integration/elevenlabs/#listing-and-using-voices","title":"Listing and Using Voices","text":"<p>MonsterBox fetches the list of available voices and displays them in the \"Configure Voice\" interface. Users can filter by gender, style, accent, and age, and preview each voice with different styles (e.g., neutral, happy, sad).</p>"},{"location":"integration/elevenlabs/#sample-code-fetching-voices-frontend","title":"Sample Code: Fetching Voices (Frontend)","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\nasync loadVoices() {\n    try {\n        this.showLoading('Loading voices...');\n        const response = await fetch('/api/voice/available');\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Failed to load voices');\n        }\n        const voices = await response.json();\n        this.voices = voices;\n        this.populateVoiceTable();\n        await this.loadRecentlyUsed();\n    } catch (error) {\n        console.error('Error loading voices:', error);\n        this.showError('Failed to load voices: ' + error.message);\n    } finally {\n        this.hideLoading();\n    }\n}\n</code></pre>"},{"location":"integration/elevenlabs/#filtering-for-tts-capabilities","title":"Filtering for TTS Capabilities","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\ngetVoiceStyles(voice) {\n    const baseStyles = ['neutral'];\n    if (voice.capabilities &amp;&amp; voice.capabilities['tts.vox_2_0']) {\n        baseStyles.push('happy', 'sad', 'angry', 'fearful');\n    }\n    return baseStyles;\n}\n</code></pre>"},{"location":"integration/elevenlabs/#generating-speech-preview","title":"Generating Speech (Preview)","text":"<pre><code>// scripts/voiceSelector.js (excerpt)\nasync generatePreview(style = 'neutral') {\n    try {\n        this.showLoading('Generating preview...');\n        const previewText = document.querySelector('#previewText').value;\n        const speakerId = this.currentPreviewVoice.speaker_id;\n        if (!speakerId) throw new Error('No valid speaker ID found for this voice');\n        const response = await fetch('/api/voice/generate', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                speaker_id: speakerId,\n                text: previewText,\n                style,\n                characterId: this.characterId,\n                options: {\n                    speed: parseFloat(document.querySelector('#speed').value),\n                    pitch: parseInt(document.querySelector('#pitch').value),\n                    volume: parseInt(document.querySelector('#volume').value)\n                }\n            })\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Failed to generate preview');\n        }\n        const data = await response.json();\n        this.lastGeneratedAudio = data;\n        // Play the audio preview...\n    } catch (error) {\n        // Handle errors\n    } finally {\n        this.hideLoading();\n    }\n}\n</code></pre>"},{"location":"integration/elevenlabs/#typical-workflow","title":"Typical Workflow","text":"<ol> <li>Go to \"Configure Voice\" in the MonsterBox web UI.</li> <li>Browse and filter available voices (fetched from ElevenLabs).</li> <li>Preview voices with different styles and settings.</li> <li>Assign a selected voice to a character or scene.</li> <li>When a scene is played, MonsterBox generates and plays the TTS audio using the selected voice.</li> </ol>"},{"location":"integration/elevenlabs/#security-note","title":"Security Note","text":"<p>Never share your ElevenLabs API key publicly. The example above is for documentation only. Always use your own key and keep it secret.</p>"}]}